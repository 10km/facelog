//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./IFaceLog_types');
//HELPER FUNCTIONS AND STRUCTURES

var IFaceLog_addFeature_args = function(args) {
  this.feature = null;
  this.personId = null;
  this.faecBeans = null;
  this.token = null;
  if (args) {
    if (args.feature !== undefined && args.feature !== null) {
      this.feature = args.feature;
    }
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    }
    if (args.faecBeans !== undefined && args.faecBeans !== null) {
      this.faecBeans = Thrift.copyList(args.faecBeans, [ttypes.FaceBean]);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_addFeature_args.prototype = {};
IFaceLog_addFeature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.feature = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.faecBeans = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.FaceBean();
          elem6.read(input);
          this.faecBeans.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addFeature_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addFeature_args');
  if (this.feature !== null && this.feature !== undefined) {
    output.writeFieldBegin('feature', Thrift.Type.STRING, 1);
    output.writeBinary(this.feature);
    output.writeFieldEnd();
  }
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 2);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.faecBeans !== null && this.faecBeans !== undefined) {
    output.writeFieldBegin('faecBeans', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.faecBeans.length);
    for (var iter7 in this.faecBeans)
    {
      if (this.faecBeans.hasOwnProperty(iter7))
      {
        iter7 = this.faecBeans[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 4);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addFeature_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.DuplicateRecordException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.FeatureBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_addFeature_result.prototype = {};
IFaceLog_addFeature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.FeatureBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.DuplicateRecordException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addFeature_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addFeature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addFeatureMulti_args = function(args) {
  this.feature = null;
  this.personId = null;
  this.faceInfo = null;
  this.deviceId = null;
  this.token = null;
  if (args) {
    if (args.feature !== undefined && args.feature !== null) {
      this.feature = args.feature;
    }
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    }
    if (args.faceInfo !== undefined && args.faceInfo !== null) {
      this.faceInfo = Thrift.copyMap(args.faceInfo, [ttypes.FaceBean]);
    }
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_addFeatureMulti_args.prototype = {};
IFaceLog_addFeatureMulti_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.feature = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size8 = 0;
        var _rtmp312;
        this.faceInfo = {};
        var _ktype9 = 0;
        var _vtype10 = 0;
        _rtmp312 = input.readMapBegin();
        _ktype9 = _rtmp312.ktype;
        _vtype10 = _rtmp312.vtype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var key14 = null;
          var val15 = null;
          key14 = input.readBinary();
          val15 = new ttypes.FaceBean();
          val15.read(input);
          this.faceInfo[key14] = val15;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addFeatureMulti_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addFeatureMulti_args');
  if (this.feature !== null && this.feature !== undefined) {
    output.writeFieldBegin('feature', Thrift.Type.STRING, 1);
    output.writeBinary(this.feature);
    output.writeFieldEnd();
  }
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 2);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.faceInfo !== null && this.faceInfo !== undefined) {
    output.writeFieldBegin('faceInfo', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.faceInfo));
    for (var kiter16 in this.faceInfo)
    {
      if (this.faceInfo.hasOwnProperty(kiter16))
      {
        var viter17 = this.faceInfo[kiter16];
        output.writeBinary(kiter16);
        viter17.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 4);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 5);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addFeatureMulti_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.DuplicateRecordException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.FeatureBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_addFeatureMulti_result.prototype = {};
IFaceLog_addFeatureMulti_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.FeatureBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.DuplicateRecordException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addFeatureMulti_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addFeatureMulti_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addImage_args = function(args) {
  this.imageData = null;
  this.deviceId = null;
  this.faceBean = null;
  this.personId = null;
  this.token = null;
  if (args) {
    if (args.imageData !== undefined && args.imageData !== null) {
      this.imageData = args.imageData;
    }
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    }
    if (args.faceBean !== undefined && args.faceBean !== null) {
      this.faceBean = new ttypes.FaceBean(args.faceBean);
    }
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_addImage_args.prototype = {};
IFaceLog_addImage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.imageData = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.faceBean = new ttypes.FaceBean();
        this.faceBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addImage_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addImage_args');
  if (this.imageData !== null && this.imageData !== undefined) {
    output.writeFieldBegin('imageData', Thrift.Type.STRING, 1);
    output.writeBinary(this.imageData);
    output.writeFieldEnd();
  }
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 2);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.faceBean !== null && this.faceBean !== undefined) {
    output.writeFieldBegin('faceBean', Thrift.Type.STRUCT, 3);
    this.faceBean.write(output);
    output.writeFieldEnd();
  }
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 4);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 5);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addImage_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.DuplicateRecordException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ImageBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_addImage_result.prototype = {};
IFaceLog_addImage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ImageBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.DuplicateRecordException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addImage_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addImage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addLog_args = function(args) {
  this.bean = null;
  this.token = null;
  if (args) {
    if (args.bean !== undefined && args.bean !== null) {
      this.bean = new ttypes.LogBean(args.bean);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_addLog_args.prototype = {};
IFaceLog_addLog_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.bean = new ttypes.LogBean();
        this.bean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addLog_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addLog_args');
  if (this.bean !== null && this.bean !== undefined) {
    output.writeFieldBegin('bean', Thrift.Type.STRUCT, 1);
    this.bean.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addLog_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.DuplicateRecordException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_addLog_result.prototype = {};
IFaceLog_addLog_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.DuplicateRecordException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addLog_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addLog_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addLogs_args = function(args) {
  this.beans = null;
  this.token = null;
  if (args) {
    if (args.beans !== undefined && args.beans !== null) {
      this.beans = Thrift.copyList(args.beans, [ttypes.LogBean]);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_addLogs_args.prototype = {};
IFaceLog_addLogs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size18 = 0;
        var _rtmp322;
        this.beans = [];
        var _etype21 = 0;
        _rtmp322 = input.readListBegin();
        _etype21 = _rtmp322.etype;
        _size18 = _rtmp322.size;
        for (var _i23 = 0; _i23 < _size18; ++_i23)
        {
          var elem24 = null;
          elem24 = new ttypes.LogBean();
          elem24.read(input);
          this.beans.push(elem24);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addLogs_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addLogs_args');
  if (this.beans !== null && this.beans !== undefined) {
    output.writeFieldBegin('beans', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.beans.length);
    for (var iter25 in this.beans)
    {
      if (this.beans.hasOwnProperty(iter25))
      {
        iter25 = this.beans[iter25];
        iter25.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addLogs_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.DuplicateRecordException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_addLogs_result.prototype = {};
IFaceLog_addLogs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.DuplicateRecordException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addLogs_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addLogs_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addPermit_args = function(args) {
  this.deviceGroup = null;
  this.personGroup = null;
  this.token = null;
  if (args) {
    if (args.deviceGroup !== undefined && args.deviceGroup !== null) {
      this.deviceGroup = new ttypes.DeviceGroupBean(args.deviceGroup);
    }
    if (args.personGroup !== undefined && args.personGroup !== null) {
      this.personGroup = new ttypes.PersonGroupBean(args.personGroup);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_addPermit_args.prototype = {};
IFaceLog_addPermit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.deviceGroup = new ttypes.DeviceGroupBean();
        this.deviceGroup.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.personGroup = new ttypes.PersonGroupBean();
        this.personGroup.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addPermit_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addPermit_args');
  if (this.deviceGroup !== null && this.deviceGroup !== undefined) {
    output.writeFieldBegin('deviceGroup', Thrift.Type.STRUCT, 1);
    this.deviceGroup.write(output);
    output.writeFieldEnd();
  }
  if (this.personGroup !== null && this.personGroup !== undefined) {
    output.writeFieldBegin('personGroup', Thrift.Type.STRUCT, 2);
    this.personGroup.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addPermit_result = function(args) {
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_addPermit_result.prototype = {};
IFaceLog_addPermit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addPermit_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addPermit_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addPermitById_args = function(args) {
  this.deviceGroupId = null;
  this.personGroupId = null;
  this.token = null;
  if (args) {
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceGroupId is unset!');
    }
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personGroupId is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_addPermitById_args.prototype = {};
IFaceLog_addPermitById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addPermitById_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addPermitById_args');
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 2);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addPermitById_result = function(args) {
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_addPermitById_result.prototype = {};
IFaceLog_addPermitById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addPermitById_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addPermitById_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_applyAckChannel_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_applyAckChannel_args.prototype = {};
IFaceLog_applyAckChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyAckChannel_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyAckChannel_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_applyAckChannel_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_applyAckChannel_result.prototype = {};
IFaceLog_applyAckChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyAckChannel_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyAckChannel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_applyAckChannelWithDuration_args = function(args) {
  this.token = null;
  this.duration = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
    if (args.duration !== undefined && args.duration !== null) {
      this.duration = args.duration;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field duration is unset!');
    }
  }
};
IFaceLog_applyAckChannelWithDuration_args.prototype = {};
IFaceLog_applyAckChannelWithDuration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.duration = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyAckChannelWithDuration_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyAckChannelWithDuration_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  if (this.duration !== null && this.duration !== undefined) {
    output.writeFieldBegin('duration', Thrift.Type.I64, 2);
    output.writeI64(this.duration);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_applyAckChannelWithDuration_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_applyAckChannelWithDuration_result.prototype = {};
IFaceLog_applyAckChannelWithDuration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyAckChannelWithDuration_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyAckChannelWithDuration_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_applyCmdSn_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_applyCmdSn_args.prototype = {};
IFaceLog_applyCmdSn_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyCmdSn_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyCmdSn_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_applyCmdSn_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_applyCmdSn_result.prototype = {};
IFaceLog_applyCmdSn_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyCmdSn_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyCmdSn_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_applyPersonToken_args = function(args) {
  this.personId = null;
  this.password = null;
  this.isMd5 = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.isMd5 !== undefined && args.isMd5 !== null) {
      this.isMd5 = args.isMd5;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isMd5 is unset!');
    }
  }
};
IFaceLog_applyPersonToken_args.prototype = {};
IFaceLog_applyPersonToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.isMd5 = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyPersonToken_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyPersonToken_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.isMd5 !== null && this.isMd5 !== undefined) {
    output.writeFieldBegin('isMd5', Thrift.Type.BOOL, 3);
    output.writeBool(this.isMd5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_applyPersonToken_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.ServiceSecurityException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Token(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_applyPersonToken_result.prototype = {};
IFaceLog_applyPersonToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Token();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceSecurityException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyPersonToken_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyPersonToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_applyRootToken_args = function(args) {
  this.password = null;
  this.isMd5 = null;
  if (args) {
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.isMd5 !== undefined && args.isMd5 !== null) {
      this.isMd5 = args.isMd5;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isMd5 is unset!');
    }
  }
};
IFaceLog_applyRootToken_args.prototype = {};
IFaceLog_applyRootToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.isMd5 = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyRootToken_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyRootToken_args');
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 1);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.isMd5 !== null && this.isMd5 !== undefined) {
    output.writeFieldBegin('isMd5', Thrift.Type.BOOL, 2);
    output.writeBool(this.isMd5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_applyRootToken_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.ServiceSecurityException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Token(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_applyRootToken_result.prototype = {};
IFaceLog_applyRootToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Token();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceSecurityException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyRootToken_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyRootToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_bindBorder_args = function(args) {
  this.personGroupId = null;
  this.deviceGroupId = null;
  this.token = null;
  if (args) {
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    }
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_bindBorder_args.prototype = {};
IFaceLog_bindBorder_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_bindBorder_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_bindBorder_args');
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 2);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_bindBorder_result = function(args) {
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_bindBorder_result.prototype = {};
IFaceLog_bindBorder_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_bindBorder_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_bindBorder_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countDeviceByWhere_args = function(args) {
  this.where = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_countDeviceByWhere_args.prototype = {};
IFaceLog_countDeviceByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countDeviceByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countDeviceByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countDeviceByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_countDeviceByWhere_result.prototype = {};
IFaceLog_countDeviceByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countDeviceByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countDeviceByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countDeviceGroupByWhere_args = function(args) {
  this.where = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_countDeviceGroupByWhere_args.prototype = {};
IFaceLog_countDeviceGroupByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countDeviceGroupByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countDeviceGroupByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countDeviceGroupByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_countDeviceGroupByWhere_result.prototype = {};
IFaceLog_countDeviceGroupByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countDeviceGroupByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countDeviceGroupByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countLogByWhere_args = function(args) {
  this.where = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_countLogByWhere_args.prototype = {};
IFaceLog_countLogByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countLogByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countLogByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countLogByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_countLogByWhere_result.prototype = {};
IFaceLog_countLogByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countLogByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countLogByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countLogLightByVerifyTime_args = function(args) {
  this.timestamp = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamp is unset!');
    }
  }
};
IFaceLog_countLogLightByVerifyTime_args.prototype = {};
IFaceLog_countLogLightByVerifyTime_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countLogLightByVerifyTime_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countLogLightByVerifyTime_args');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countLogLightByVerifyTime_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_countLogLightByVerifyTime_result.prototype = {};
IFaceLog_countLogLightByVerifyTime_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countLogLightByVerifyTime_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countLogLightByVerifyTime_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countLogLightByWhere_args = function(args) {
  this.where = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_countLogLightByWhere_args.prototype = {};
IFaceLog_countLogLightByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countLogLightByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countLogLightByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countLogLightByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_countLogLightByWhere_result.prototype = {};
IFaceLog_countLogLightByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countLogLightByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countLogLightByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countPersonByWhere_args = function(args) {
  this.where = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_countPersonByWhere_args.prototype = {};
IFaceLog_countPersonByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countPersonByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countPersonByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countPersonByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_countPersonByWhere_result.prototype = {};
IFaceLog_countPersonByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countPersonByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countPersonByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countPersonGroupByWhere_args = function(args) {
  this.where = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_countPersonGroupByWhere_args.prototype = {};
IFaceLog_countPersonGroupByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countPersonGroupByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countPersonGroupByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countPersonGroupByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_countPersonGroupByWhere_result.prototype = {};
IFaceLog_countPersonGroupByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countPersonGroupByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countPersonGroupByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deleteAllFeaturesByPersonId_args = function(args) {
  this.personId = null;
  this.deleteImage = null;
  this.token = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
    if (args.deleteImage !== undefined && args.deleteImage !== null) {
      this.deleteImage = args.deleteImage;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deleteImage is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_deleteAllFeaturesByPersonId_args.prototype = {};
IFaceLog_deleteAllFeaturesByPersonId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteImage = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deleteAllFeaturesByPersonId_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deleteAllFeaturesByPersonId_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.deleteImage !== null && this.deleteImage !== undefined) {
    output.writeFieldBegin('deleteImage', Thrift.Type.BOOL, 2);
    output.writeBool(this.deleteImage);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deleteAllFeaturesByPersonId_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deleteAllFeaturesByPersonId_result.prototype = {};
IFaceLog_deleteAllFeaturesByPersonId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deleteAllFeaturesByPersonId_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deleteAllFeaturesByPersonId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deleteDeviceGroup_args = function(args) {
  this.deviceGroupId = null;
  this.token = null;
  if (args) {
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceGroupId is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_deleteDeviceGroup_args.prototype = {};
IFaceLog_deleteDeviceGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deleteDeviceGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deleteDeviceGroup_args');
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deleteDeviceGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deleteDeviceGroup_result.prototype = {};
IFaceLog_deleteDeviceGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deleteDeviceGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deleteDeviceGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deleteFeature_args = function(args) {
  this.featureMd5 = null;
  this.deleteImage = null;
  this.token = null;
  if (args) {
    if (args.featureMd5 !== undefined && args.featureMd5 !== null) {
      this.featureMd5 = args.featureMd5;
    }
    if (args.deleteImage !== undefined && args.deleteImage !== null) {
      this.deleteImage = args.deleteImage;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deleteImage is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_deleteFeature_args.prototype = {};
IFaceLog_deleteFeature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.featureMd5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteImage = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deleteFeature_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deleteFeature_args');
  if (this.featureMd5 !== null && this.featureMd5 !== undefined) {
    output.writeFieldBegin('featureMd5', Thrift.Type.STRING, 1);
    output.writeString(this.featureMd5);
    output.writeFieldEnd();
  }
  if (this.deleteImage !== null && this.deleteImage !== undefined) {
    output.writeFieldBegin('deleteImage', Thrift.Type.BOOL, 2);
    output.writeBool(this.deleteImage);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deleteFeature_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deleteFeature_result.prototype = {};
IFaceLog_deleteFeature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size26 = 0;
        var _rtmp330;
        this.success = [];
        var _etype29 = 0;
        _rtmp330 = input.readListBegin();
        _etype29 = _rtmp330.etype;
        _size26 = _rtmp330.size;
        for (var _i31 = 0; _i31 < _size26; ++_i31)
        {
          var elem32 = null;
          elem32 = input.readString();
          this.success.push(elem32);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deleteFeature_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deleteFeature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter33 in this.success)
    {
      if (this.success.hasOwnProperty(iter33))
      {
        iter33 = this.success[iter33];
        output.writeString(iter33);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deleteImage_args = function(args) {
  this.imageMd5 = null;
  this.token = null;
  if (args) {
    if (args.imageMd5 !== undefined && args.imageMd5 !== null) {
      this.imageMd5 = args.imageMd5;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_deleteImage_args.prototype = {};
IFaceLog_deleteImage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.imageMd5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deleteImage_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deleteImage_args');
  if (this.imageMd5 !== null && this.imageMd5 !== undefined) {
    output.writeFieldBegin('imageMd5', Thrift.Type.STRING, 1);
    output.writeString(this.imageMd5);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deleteImage_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deleteImage_result.prototype = {};
IFaceLog_deleteImage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deleteImage_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deleteImage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deletePermit_args = function(args) {
  this.deviceGroup = null;
  this.personGroup = null;
  this.token = null;
  if (args) {
    if (args.deviceGroup !== undefined && args.deviceGroup !== null) {
      this.deviceGroup = new ttypes.DeviceGroupBean(args.deviceGroup);
    }
    if (args.personGroup !== undefined && args.personGroup !== null) {
      this.personGroup = new ttypes.PersonGroupBean(args.personGroup);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_deletePermit_args.prototype = {};
IFaceLog_deletePermit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.deviceGroup = new ttypes.DeviceGroupBean();
        this.deviceGroup.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.personGroup = new ttypes.PersonGroupBean();
        this.personGroup.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePermit_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePermit_args');
  if (this.deviceGroup !== null && this.deviceGroup !== undefined) {
    output.writeFieldBegin('deviceGroup', Thrift.Type.STRUCT, 1);
    this.deviceGroup.write(output);
    output.writeFieldEnd();
  }
  if (this.personGroup !== null && this.personGroup !== undefined) {
    output.writeFieldBegin('personGroup', Thrift.Type.STRUCT, 2);
    this.personGroup.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deletePermit_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deletePermit_result.prototype = {};
IFaceLog_deletePermit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePermit_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePermit_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deletePerson_args = function(args) {
  this.personId = null;
  this.token = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_deletePerson_args.prototype = {};
IFaceLog_deletePerson_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePerson_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePerson_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deletePerson_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deletePerson_result.prototype = {};
IFaceLog_deletePerson_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePerson_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePerson_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deletePersonByPapersNum_args = function(args) {
  this.papersNum = null;
  this.token = null;
  if (args) {
    if (args.papersNum !== undefined && args.papersNum !== null) {
      this.papersNum = args.papersNum;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_deletePersonByPapersNum_args.prototype = {};
IFaceLog_deletePersonByPapersNum_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.papersNum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePersonByPapersNum_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePersonByPapersNum_args');
  if (this.papersNum !== null && this.papersNum !== undefined) {
    output.writeFieldBegin('papersNum', Thrift.Type.STRING, 1);
    output.writeString(this.papersNum);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deletePersonByPapersNum_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deletePersonByPapersNum_result.prototype = {};
IFaceLog_deletePersonByPapersNum_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePersonByPapersNum_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePersonByPapersNum_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deletePersonGroup_args = function(args) {
  this.personGroupId = null;
  this.token = null;
  if (args) {
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personGroupId is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_deletePersonGroup_args.prototype = {};
IFaceLog_deletePersonGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePersonGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePersonGroup_args');
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deletePersonGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deletePersonGroup_result.prototype = {};
IFaceLog_deletePersonGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePersonGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePersonGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deletePersons_args = function(args) {
  this.personIdList = null;
  this.token = null;
  if (args) {
    if (args.personIdList !== undefined && args.personIdList !== null) {
      this.personIdList = Thrift.copyList(args.personIdList, [null]);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_deletePersons_args.prototype = {};
IFaceLog_deletePersons_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size34 = 0;
        var _rtmp338;
        this.personIdList = [];
        var _etype37 = 0;
        _rtmp338 = input.readListBegin();
        _etype37 = _rtmp338.etype;
        _size34 = _rtmp338.size;
        for (var _i39 = 0; _i39 < _size34; ++_i39)
        {
          var elem40 = null;
          elem40 = input.readI32();
          this.personIdList.push(elem40);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePersons_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePersons_args');
  if (this.personIdList !== null && this.personIdList !== undefined) {
    output.writeFieldBegin('personIdList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.personIdList.length);
    for (var iter41 in this.personIdList)
    {
      if (this.personIdList.hasOwnProperty(iter41))
      {
        iter41 = this.personIdList[iter41];
        output.writeI32(iter41);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deletePersons_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deletePersons_result.prototype = {};
IFaceLog_deletePersons_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePersons_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePersons_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deletePersonsByPapersNum_args = function(args) {
  this.papersNumlist = null;
  this.token = null;
  if (args) {
    if (args.papersNumlist !== undefined && args.papersNumlist !== null) {
      this.papersNumlist = Thrift.copyList(args.papersNumlist, [null]);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_deletePersonsByPapersNum_args.prototype = {};
IFaceLog_deletePersonsByPapersNum_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size42 = 0;
        var _rtmp346;
        this.papersNumlist = [];
        var _etype45 = 0;
        _rtmp346 = input.readListBegin();
        _etype45 = _rtmp346.etype;
        _size42 = _rtmp346.size;
        for (var _i47 = 0; _i47 < _size42; ++_i47)
        {
          var elem48 = null;
          elem48 = input.readString();
          this.papersNumlist.push(elem48);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePersonsByPapersNum_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePersonsByPapersNum_args');
  if (this.papersNumlist !== null && this.papersNumlist !== undefined) {
    output.writeFieldBegin('papersNumlist', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.papersNumlist.length);
    for (var iter49 in this.papersNumlist)
    {
      if (this.papersNumlist.hasOwnProperty(iter49))
      {
        iter49 = this.papersNumlist[iter49];
        output.writeString(iter49);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deletePersonsByPapersNum_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deletePersonsByPapersNum_result.prototype = {};
IFaceLog_deletePersonsByPapersNum_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePersonsByPapersNum_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePersonsByPapersNum_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_disablePerson_args = function(args) {
  this.personId = null;
  this.token = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_disablePerson_args.prototype = {};
IFaceLog_disablePerson_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_disablePerson_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_disablePerson_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_disablePerson_result = function(args) {
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_disablePerson_result.prototype = {};
IFaceLog_disablePerson_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_disablePerson_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_disablePerson_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_disablePersonList_args = function(args) {
  this.personIdList = null;
  this.token = null;
  if (args) {
    if (args.personIdList !== undefined && args.personIdList !== null) {
      this.personIdList = Thrift.copyList(args.personIdList, [null]);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_disablePersonList_args.prototype = {};
IFaceLog_disablePersonList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size50 = 0;
        var _rtmp354;
        this.personIdList = [];
        var _etype53 = 0;
        _rtmp354 = input.readListBegin();
        _etype53 = _rtmp354.etype;
        _size50 = _rtmp354.size;
        for (var _i55 = 0; _i55 < _size50; ++_i55)
        {
          var elem56 = null;
          elem56 = input.readI32();
          this.personIdList.push(elem56);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_disablePersonList_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_disablePersonList_args');
  if (this.personIdList !== null && this.personIdList !== undefined) {
    output.writeFieldBegin('personIdList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.personIdList.length);
    for (var iter57 in this.personIdList)
    {
      if (this.personIdList.hasOwnProperty(iter57))
      {
        iter57 = this.personIdList[iter57];
        output.writeI32(iter57);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_disablePersonList_result = function(args) {
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_disablePersonList_result.prototype = {};
IFaceLog_disablePersonList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_disablePersonList_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_disablePersonList_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_existsDevice_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
IFaceLog_existsDevice_args.prototype = {};
IFaceLog_existsDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_existsDevice_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_existsDevice_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_existsDevice_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_existsDevice_result.prototype = {};
IFaceLog_existsDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_existsDevice_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_existsDevice_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_existsFeature_args = function(args) {
  this.md5 = null;
  if (args) {
    if (args.md5 !== undefined && args.md5 !== null) {
      this.md5 = args.md5;
    }
  }
};
IFaceLog_existsFeature_args.prototype = {};
IFaceLog_existsFeature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.md5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_existsFeature_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_existsFeature_args');
  if (this.md5 !== null && this.md5 !== undefined) {
    output.writeFieldBegin('md5', Thrift.Type.STRING, 1);
    output.writeString(this.md5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_existsFeature_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_existsFeature_result.prototype = {};
IFaceLog_existsFeature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_existsFeature_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_existsFeature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_existsImage_args = function(args) {
  this.md5 = null;
  if (args) {
    if (args.md5 !== undefined && args.md5 !== null) {
      this.md5 = args.md5;
    }
  }
};
IFaceLog_existsImage_args.prototype = {};
IFaceLog_existsImage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.md5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_existsImage_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_existsImage_args');
  if (this.md5 !== null && this.md5 !== undefined) {
    output.writeFieldBegin('md5', Thrift.Type.STRING, 1);
    output.writeString(this.md5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_existsImage_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_existsImage_result.prototype = {};
IFaceLog_existsImage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_existsImage_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_existsImage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_existsPerson_args = function(args) {
  this.persionId = null;
  if (args) {
    if (args.persionId !== undefined && args.persionId !== null) {
      this.persionId = args.persionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field persionId is unset!');
    }
  }
};
IFaceLog_existsPerson_args.prototype = {};
IFaceLog_existsPerson_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.persionId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_existsPerson_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_existsPerson_args');
  if (this.persionId !== null && this.persionId !== undefined) {
    output.writeFieldBegin('persionId', Thrift.Type.I32, 1);
    output.writeI32(this.persionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_existsPerson_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_existsPerson_result.prototype = {};
IFaceLog_existsPerson_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_existsPerson_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_existsPerson_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDevice_args = function(args) {
  this.deviceId = null;
  if (args) {
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceId is unset!');
    }
  }
};
IFaceLog_getDevice_args.prototype = {};
IFaceLog_getDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDevice_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDevice_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDevice_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.DeviceBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getDevice_result.prototype = {};
IFaceLog_getDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.DeviceBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDevice_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDevice_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDeviceGroup_args = function(args) {
  this.deviceGroupId = null;
  if (args) {
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceGroupId is unset!');
    }
  }
};
IFaceLog_getDeviceGroup_args.prototype = {};
IFaceLog_getDeviceGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceGroup_args');
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDeviceGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.DeviceGroupBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getDeviceGroup_result.prototype = {};
IFaceLog_getDeviceGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.DeviceGroupBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDeviceGroups_args = function(args) {
  this.groupIdList = null;
  if (args) {
    if (args.groupIdList !== undefined && args.groupIdList !== null) {
      this.groupIdList = Thrift.copyList(args.groupIdList, [null]);
    }
  }
};
IFaceLog_getDeviceGroups_args.prototype = {};
IFaceLog_getDeviceGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size58 = 0;
        var _rtmp362;
        this.groupIdList = [];
        var _etype61 = 0;
        _rtmp362 = input.readListBegin();
        _etype61 = _rtmp362.etype;
        _size58 = _rtmp362.size;
        for (var _i63 = 0; _i63 < _size58; ++_i63)
        {
          var elem64 = null;
          elem64 = input.readI32();
          this.groupIdList.push(elem64);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceGroups_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceGroups_args');
  if (this.groupIdList !== null && this.groupIdList !== undefined) {
    output.writeFieldBegin('groupIdList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.groupIdList.length);
    for (var iter65 in this.groupIdList)
    {
      if (this.groupIdList.hasOwnProperty(iter65))
      {
        iter65 = this.groupIdList[iter65];
        output.writeI32(iter65);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDeviceGroups_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.DeviceGroupBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getDeviceGroups_result.prototype = {};
IFaceLog_getDeviceGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size66 = 0;
        var _rtmp370;
        this.success = [];
        var _etype69 = 0;
        _rtmp370 = input.readListBegin();
        _etype69 = _rtmp370.etype;
        _size66 = _rtmp370.size;
        for (var _i71 = 0; _i71 < _size66; ++_i71)
        {
          var elem72 = null;
          elem72 = new ttypes.DeviceGroupBean();
          elem72.read(input);
          this.success.push(elem72);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceGroups_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceGroups_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter73 in this.success)
    {
      if (this.success.hasOwnProperty(iter73))
      {
        iter73 = this.success[iter73];
        iter73.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDeviceGroupsBelongs_args = function(args) {
  this.deviceId = null;
  if (args) {
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceId is unset!');
    }
  }
};
IFaceLog_getDeviceGroupsBelongs_args.prototype = {};
IFaceLog_getDeviceGroupsBelongs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceGroupsBelongs_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceGroupsBelongs_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDeviceGroupsBelongs_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getDeviceGroupsBelongs_result.prototype = {};
IFaceLog_getDeviceGroupsBelongs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size74 = 0;
        var _rtmp378;
        this.success = [];
        var _etype77 = 0;
        _rtmp378 = input.readListBegin();
        _etype77 = _rtmp378.etype;
        _size74 = _rtmp378.size;
        for (var _i79 = 0; _i79 < _size74; ++_i79)
        {
          var elem80 = null;
          elem80 = input.readI32();
          this.success.push(elem80);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceGroupsBelongs_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceGroupsBelongs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter81 in this.success)
    {
      if (this.success.hasOwnProperty(iter81))
      {
        iter81 = this.success[iter81];
        output.writeI32(iter81);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDeviceGroupsPermit_args = function(args) {
  this.personGroupId = null;
  if (args) {
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    }
  }
};
IFaceLog_getDeviceGroupsPermit_args.prototype = {};
IFaceLog_getDeviceGroupsPermit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceGroupsPermit_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceGroupsPermit_args');
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDeviceGroupsPermit_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getDeviceGroupsPermit_result.prototype = {};
IFaceLog_getDeviceGroupsPermit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size82 = 0;
        var _rtmp386;
        this.success = [];
        var _etype85 = 0;
        _rtmp386 = input.readListBegin();
        _etype85 = _rtmp386.etype;
        _size82 = _rtmp386.size;
        for (var _i87 = 0; _i87 < _size82; ++_i87)
        {
          var elem88 = null;
          elem88 = input.readI32();
          this.success.push(elem88);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceGroupsPermit_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceGroupsPermit_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter89 in this.success)
    {
      if (this.success.hasOwnProperty(iter89))
      {
        iter89 = this.success[iter89];
        output.writeI32(iter89);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDeviceGroupsPermittedBy_args = function(args) {
  this.personGroupId = null;
  if (args) {
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    }
  }
};
IFaceLog_getDeviceGroupsPermittedBy_args.prototype = {};
IFaceLog_getDeviceGroupsPermittedBy_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceGroupsPermittedBy_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceGroupsPermittedBy_args');
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDeviceGroupsPermittedBy_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getDeviceGroupsPermittedBy_result.prototype = {};
IFaceLog_getDeviceGroupsPermittedBy_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size90 = 0;
        var _rtmp394;
        this.success = [];
        var _etype93 = 0;
        _rtmp394 = input.readListBegin();
        _etype93 = _rtmp394.etype;
        _size90 = _rtmp394.size;
        for (var _i95 = 0; _i95 < _size90; ++_i95)
        {
          var elem96 = null;
          elem96 = input.readI32();
          this.success.push(elem96);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceGroupsPermittedBy_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceGroupsPermittedBy_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter97 in this.success)
    {
      if (this.success.hasOwnProperty(iter97))
      {
        iter97 = this.success[iter97];
        output.writeI32(iter97);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDeviceIdOfFeature_args = function(args) {
  this.featureMd5 = null;
  if (args) {
    if (args.featureMd5 !== undefined && args.featureMd5 !== null) {
      this.featureMd5 = args.featureMd5;
    }
  }
};
IFaceLog_getDeviceIdOfFeature_args.prototype = {};
IFaceLog_getDeviceIdOfFeature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.featureMd5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceIdOfFeature_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceIdOfFeature_args');
  if (this.featureMd5 !== null && this.featureMd5 !== undefined) {
    output.writeFieldBegin('featureMd5', Thrift.Type.STRING, 1);
    output.writeString(this.featureMd5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDeviceIdOfFeature_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getDeviceIdOfFeature_result.prototype = {};
IFaceLog_getDeviceIdOfFeature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceIdOfFeature_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceIdOfFeature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDevices_args = function(args) {
  this.idList = null;
  if (args) {
    if (args.idList !== undefined && args.idList !== null) {
      this.idList = Thrift.copyList(args.idList, [null]);
    }
  }
};
IFaceLog_getDevices_args.prototype = {};
IFaceLog_getDevices_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size98 = 0;
        var _rtmp3102;
        this.idList = [];
        var _etype101 = 0;
        _rtmp3102 = input.readListBegin();
        _etype101 = _rtmp3102.etype;
        _size98 = _rtmp3102.size;
        for (var _i103 = 0; _i103 < _size98; ++_i103)
        {
          var elem104 = null;
          elem104 = input.readI32();
          this.idList.push(elem104);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDevices_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDevices_args');
  if (this.idList !== null && this.idList !== undefined) {
    output.writeFieldBegin('idList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.idList.length);
    for (var iter105 in this.idList)
    {
      if (this.idList.hasOwnProperty(iter105))
      {
        iter105 = this.idList[iter105];
        output.writeI32(iter105);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDevices_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.DeviceBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getDevices_result.prototype = {};
IFaceLog_getDevices_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size106 = 0;
        var _rtmp3110;
        this.success = [];
        var _etype109 = 0;
        _rtmp3110 = input.readListBegin();
        _etype109 = _rtmp3110.etype;
        _size106 = _rtmp3110.size;
        for (var _i111 = 0; _i111 < _size106; ++_i111)
        {
          var elem112 = null;
          elem112 = new ttypes.DeviceBean();
          elem112.read(input);
          this.success.push(elem112);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDevices_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDevices_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter113 in this.success)
    {
      if (this.success.hasOwnProperty(iter113))
      {
        iter113 = this.success[iter113];
        iter113.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDevicesOfGroup_args = function(args) {
  this.deviceGroupId = null;
  if (args) {
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceGroupId is unset!');
    }
  }
};
IFaceLog_getDevicesOfGroup_args.prototype = {};
IFaceLog_getDevicesOfGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDevicesOfGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDevicesOfGroup_args');
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDevicesOfGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getDevicesOfGroup_result.prototype = {};
IFaceLog_getDevicesOfGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size114 = 0;
        var _rtmp3118;
        this.success = [];
        var _etype117 = 0;
        _rtmp3118 = input.readListBegin();
        _etype117 = _rtmp3118.etype;
        _size114 = _rtmp3118.size;
        for (var _i119 = 0; _i119 < _size114; ++_i119)
        {
          var elem120 = null;
          elem120 = input.readI32();
          this.success.push(elem120);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDevicesOfGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDevicesOfGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter121 in this.success)
    {
      if (this.success.hasOwnProperty(iter121))
      {
        iter121 = this.success[iter121];
        output.writeI32(iter121);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFeature_args = function(args) {
  this.md5 = null;
  if (args) {
    if (args.md5 !== undefined && args.md5 !== null) {
      this.md5 = args.md5;
    }
  }
};
IFaceLog_getFeature_args.prototype = {};
IFaceLog_getFeature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.md5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeature_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeature_args');
  if (this.md5 !== null && this.md5 !== undefined) {
    output.writeFieldBegin('md5', Thrift.Type.STRING, 1);
    output.writeString(this.md5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFeature_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.FeatureBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getFeature_result.prototype = {};
IFaceLog_getFeature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.FeatureBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeature_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFeatureBeansByPersonId_args = function(args) {
  this.personId = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
  }
};
IFaceLog_getFeatureBeansByPersonId_args.prototype = {};
IFaceLog_getFeatureBeansByPersonId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeatureBeansByPersonId_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeatureBeansByPersonId_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFeatureBeansByPersonId_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getFeatureBeansByPersonId_result.prototype = {};
IFaceLog_getFeatureBeansByPersonId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size122 = 0;
        var _rtmp3126;
        this.success = [];
        var _etype125 = 0;
        _rtmp3126 = input.readListBegin();
        _etype125 = _rtmp3126.etype;
        _size122 = _rtmp3126.size;
        for (var _i127 = 0; _i127 < _size122; ++_i127)
        {
          var elem128 = null;
          elem128 = input.readString();
          this.success.push(elem128);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeatureBeansByPersonId_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeatureBeansByPersonId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter129 in this.success)
    {
      if (this.success.hasOwnProperty(iter129))
      {
        iter129 = this.success[iter129];
        output.writeString(iter129);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFeatureBytes_args = function(args) {
  this.md5 = null;
  if (args) {
    if (args.md5 !== undefined && args.md5 !== null) {
      this.md5 = args.md5;
    }
  }
};
IFaceLog_getFeatureBytes_args.prototype = {};
IFaceLog_getFeatureBytes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.md5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeatureBytes_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeatureBytes_args');
  if (this.md5 !== null && this.md5 !== undefined) {
    output.writeFieldBegin('md5', Thrift.Type.STRING, 1);
    output.writeString(this.md5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFeatureBytes_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getFeatureBytes_result.prototype = {};
IFaceLog_getFeatureBytes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeatureBytes_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeatureBytes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFeatures_args = function(args) {
  this.md5 = null;
  if (args) {
    if (args.md5 !== undefined && args.md5 !== null) {
      this.md5 = Thrift.copyList(args.md5, [null]);
    }
  }
};
IFaceLog_getFeatures_args.prototype = {};
IFaceLog_getFeatures_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size130 = 0;
        var _rtmp3134;
        this.md5 = [];
        var _etype133 = 0;
        _rtmp3134 = input.readListBegin();
        _etype133 = _rtmp3134.etype;
        _size130 = _rtmp3134.size;
        for (var _i135 = 0; _i135 < _size130; ++_i135)
        {
          var elem136 = null;
          elem136 = input.readString();
          this.md5.push(elem136);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeatures_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeatures_args');
  if (this.md5 !== null && this.md5 !== undefined) {
    output.writeFieldBegin('md5', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.md5.length);
    for (var iter137 in this.md5)
    {
      if (this.md5.hasOwnProperty(iter137))
      {
        iter137 = this.md5[iter137];
        output.writeString(iter137);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFeatures_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.FeatureBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getFeatures_result.prototype = {};
IFaceLog_getFeatures_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size138 = 0;
        var _rtmp3142;
        this.success = [];
        var _etype141 = 0;
        _rtmp3142 = input.readListBegin();
        _etype141 = _rtmp3142.etype;
        _size138 = _rtmp3142.size;
        for (var _i143 = 0; _i143 < _size138; ++_i143)
        {
          var elem144 = null;
          elem144 = new ttypes.FeatureBean();
          elem144.read(input);
          this.success.push(elem144);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeatures_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeatures_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter145 in this.success)
    {
      if (this.success.hasOwnProperty(iter145))
      {
        iter145 = this.success[iter145];
        iter145.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFeaturesOfPerson_args = function(args) {
  this.personId = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
  }
};
IFaceLog_getFeaturesOfPerson_args.prototype = {};
IFaceLog_getFeaturesOfPerson_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeaturesOfPerson_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeaturesOfPerson_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFeaturesOfPerson_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getFeaturesOfPerson_result.prototype = {};
IFaceLog_getFeaturesOfPerson_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size146 = 0;
        var _rtmp3150;
        this.success = [];
        var _etype149 = 0;
        _rtmp3150 = input.readListBegin();
        _etype149 = _rtmp3150.etype;
        _size146 = _rtmp3150.size;
        for (var _i151 = 0; _i151 < _size146; ++_i151)
        {
          var elem152 = null;
          elem152 = input.readString();
          this.success.push(elem152);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeaturesOfPerson_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeaturesOfPerson_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter153 in this.success)
    {
      if (this.success.hasOwnProperty(iter153))
      {
        iter153 = this.success[iter153];
        output.writeString(iter153);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getGroupPermit_args = function(args) {
  this.deviceId = null;
  this.personGroupId = null;
  if (args) {
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceId is unset!');
    }
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personGroupId is unset!');
    }
  }
};
IFaceLog_getGroupPermit_args.prototype = {};
IFaceLog_getGroupPermit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getGroupPermit_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getGroupPermit_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 2);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getGroupPermit_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getGroupPermit_result.prototype = {};
IFaceLog_getGroupPermit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getGroupPermit_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getGroupPermit_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getGroupPermits_args = function(args) {
  this.deviceId = null;
  this.personGroupIdList = null;
  if (args) {
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceId is unset!');
    }
    if (args.personGroupIdList !== undefined && args.personGroupIdList !== null) {
      this.personGroupIdList = Thrift.copyList(args.personGroupIdList, [null]);
    }
  }
};
IFaceLog_getGroupPermits_args.prototype = {};
IFaceLog_getGroupPermits_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size154 = 0;
        var _rtmp3158;
        this.personGroupIdList = [];
        var _etype157 = 0;
        _rtmp3158 = input.readListBegin();
        _etype157 = _rtmp3158.etype;
        _size154 = _rtmp3158.size;
        for (var _i159 = 0; _i159 < _size154; ++_i159)
        {
          var elem160 = null;
          elem160 = input.readI32();
          this.personGroupIdList.push(elem160);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getGroupPermits_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getGroupPermits_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.personGroupIdList !== null && this.personGroupIdList !== undefined) {
    output.writeFieldBegin('personGroupIdList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.personGroupIdList.length);
    for (var iter161 in this.personGroupIdList)
    {
      if (this.personGroupIdList.hasOwnProperty(iter161))
      {
        iter161 = this.personGroupIdList[iter161];
        output.writeI32(iter161);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getGroupPermits_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getGroupPermits_result.prototype = {};
IFaceLog_getGroupPermits_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size162 = 0;
        var _rtmp3166;
        this.success = [];
        var _etype165 = 0;
        _rtmp3166 = input.readListBegin();
        _etype165 = _rtmp3166.etype;
        _size162 = _rtmp3166.size;
        for (var _i167 = 0; _i167 < _size162; ++_i167)
        {
          var elem168 = null;
          elem168 = input.readBool();
          this.success.push(elem168);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getGroupPermits_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getGroupPermits_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.BOOL, this.success.length);
    for (var iter169 in this.success)
    {
      if (this.success.hasOwnProperty(iter169))
      {
        iter169 = this.success[iter169];
        output.writeBool(iter169);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getImage_args = function(args) {
  this.imageMD5 = null;
  if (args) {
    if (args.imageMD5 !== undefined && args.imageMD5 !== null) {
      this.imageMD5 = args.imageMD5;
    }
  }
};
IFaceLog_getImage_args.prototype = {};
IFaceLog_getImage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.imageMD5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getImage_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getImage_args');
  if (this.imageMD5 !== null && this.imageMD5 !== undefined) {
    output.writeFieldBegin('imageMD5', Thrift.Type.STRING, 1);
    output.writeString(this.imageMD5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getImage_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ImageBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getImage_result.prototype = {};
IFaceLog_getImage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ImageBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getImage_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getImage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getImageBytes_args = function(args) {
  this.imageMD5 = null;
  if (args) {
    if (args.imageMD5 !== undefined && args.imageMD5 !== null) {
      this.imageMD5 = args.imageMD5;
    }
  }
};
IFaceLog_getImageBytes_args.prototype = {};
IFaceLog_getImageBytes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.imageMD5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getImageBytes_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getImageBytes_args');
  if (this.imageMD5 !== null && this.imageMD5 !== undefined) {
    output.writeFieldBegin('imageMD5', Thrift.Type.STRING, 1);
    output.writeString(this.imageMD5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getImageBytes_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getImageBytes_result.prototype = {};
IFaceLog_getImageBytes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getImageBytes_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getImageBytes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getImagesAssociatedByFeature_args = function(args) {
  this.featureMd5 = null;
  if (args) {
    if (args.featureMd5 !== undefined && args.featureMd5 !== null) {
      this.featureMd5 = args.featureMd5;
    }
  }
};
IFaceLog_getImagesAssociatedByFeature_args.prototype = {};
IFaceLog_getImagesAssociatedByFeature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.featureMd5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getImagesAssociatedByFeature_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getImagesAssociatedByFeature_args');
  if (this.featureMd5 !== null && this.featureMd5 !== undefined) {
    output.writeFieldBegin('featureMd5', Thrift.Type.STRING, 1);
    output.writeString(this.featureMd5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getImagesAssociatedByFeature_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getImagesAssociatedByFeature_result.prototype = {};
IFaceLog_getImagesAssociatedByFeature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size170 = 0;
        var _rtmp3174;
        this.success = [];
        var _etype173 = 0;
        _rtmp3174 = input.readListBegin();
        _etype173 = _rtmp3174.etype;
        _size170 = _rtmp3174.size;
        for (var _i175 = 0; _i175 < _size170; ++_i175)
        {
          var elem176 = null;
          elem176 = input.readString();
          this.success.push(elem176);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getImagesAssociatedByFeature_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getImagesAssociatedByFeature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter177 in this.success)
    {
      if (this.success.hasOwnProperty(iter177))
      {
        iter177 = this.success[iter177];
        output.writeString(iter177);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getLogBeansByPersonId_args = function(args) {
  this.personId = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
  }
};
IFaceLog_getLogBeansByPersonId_args.prototype = {};
IFaceLog_getLogBeansByPersonId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getLogBeansByPersonId_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getLogBeansByPersonId_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getLogBeansByPersonId_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.LogBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getLogBeansByPersonId_result.prototype = {};
IFaceLog_getLogBeansByPersonId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size178 = 0;
        var _rtmp3182;
        this.success = [];
        var _etype181 = 0;
        _rtmp3182 = input.readListBegin();
        _etype181 = _rtmp3182.etype;
        _size178 = _rtmp3182.size;
        for (var _i183 = 0; _i183 < _size178; ++_i183)
        {
          var elem184 = null;
          elem184 = new ttypes.LogBean();
          elem184.read(input);
          this.success.push(elem184);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getLogBeansByPersonId_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getLogBeansByPersonId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter185 in this.success)
    {
      if (this.success.hasOwnProperty(iter185))
      {
        iter185 = this.success[iter185];
        iter185.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPerson_args = function(args) {
  this.personId = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
  }
};
IFaceLog_getPerson_args.prototype = {};
IFaceLog_getPerson_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPerson_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPerson_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPerson_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PersonBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPerson_result.prototype = {};
IFaceLog_getPerson_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PersonBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPerson_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPerson_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonByPapersNum_args = function(args) {
  this.papersNum = null;
  if (args) {
    if (args.papersNum !== undefined && args.papersNum !== null) {
      this.papersNum = args.papersNum;
    }
  }
};
IFaceLog_getPersonByPapersNum_args.prototype = {};
IFaceLog_getPersonByPapersNum_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.papersNum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonByPapersNum_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonByPapersNum_args');
  if (this.papersNum !== null && this.papersNum !== undefined) {
    output.writeFieldBegin('papersNum', Thrift.Type.STRING, 1);
    output.writeString(this.papersNum);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonByPapersNum_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PersonBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPersonByPapersNum_result.prototype = {};
IFaceLog_getPersonByPapersNum_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PersonBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonByPapersNum_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonByPapersNum_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonGroup_args = function(args) {
  this.personGroupId = null;
  if (args) {
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personGroupId is unset!');
    }
  }
};
IFaceLog_getPersonGroup_args.prototype = {};
IFaceLog_getPersonGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonGroup_args');
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PersonGroupBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPersonGroup_result.prototype = {};
IFaceLog_getPersonGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PersonGroupBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonGroups_args = function(args) {
  this.groupIdList = null;
  if (args) {
    if (args.groupIdList !== undefined && args.groupIdList !== null) {
      this.groupIdList = Thrift.copyList(args.groupIdList, [null]);
    }
  }
};
IFaceLog_getPersonGroups_args.prototype = {};
IFaceLog_getPersonGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size186 = 0;
        var _rtmp3190;
        this.groupIdList = [];
        var _etype189 = 0;
        _rtmp3190 = input.readListBegin();
        _etype189 = _rtmp3190.etype;
        _size186 = _rtmp3190.size;
        for (var _i191 = 0; _i191 < _size186; ++_i191)
        {
          var elem192 = null;
          elem192 = input.readI32();
          this.groupIdList.push(elem192);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonGroups_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonGroups_args');
  if (this.groupIdList !== null && this.groupIdList !== undefined) {
    output.writeFieldBegin('groupIdList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.groupIdList.length);
    for (var iter193 in this.groupIdList)
    {
      if (this.groupIdList.hasOwnProperty(iter193))
      {
        iter193 = this.groupIdList[iter193];
        output.writeI32(iter193);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonGroups_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.PersonGroupBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPersonGroups_result.prototype = {};
IFaceLog_getPersonGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size194 = 0;
        var _rtmp3198;
        this.success = [];
        var _etype197 = 0;
        _rtmp3198 = input.readListBegin();
        _etype197 = _rtmp3198.etype;
        _size194 = _rtmp3198.size;
        for (var _i199 = 0; _i199 < _size194; ++_i199)
        {
          var elem200 = null;
          elem200 = new ttypes.PersonGroupBean();
          elem200.read(input);
          this.success.push(elem200);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonGroups_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonGroups_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter201 in this.success)
    {
      if (this.success.hasOwnProperty(iter201))
      {
        iter201 = this.success[iter201];
        iter201.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonGroupsBelongs_args = function(args) {
  this.personId = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
  }
};
IFaceLog_getPersonGroupsBelongs_args.prototype = {};
IFaceLog_getPersonGroupsBelongs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonGroupsBelongs_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonGroupsBelongs_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonGroupsBelongs_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPersonGroupsBelongs_result.prototype = {};
IFaceLog_getPersonGroupsBelongs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size202 = 0;
        var _rtmp3206;
        this.success = [];
        var _etype205 = 0;
        _rtmp3206 = input.readListBegin();
        _etype205 = _rtmp3206.etype;
        _size202 = _rtmp3206.size;
        for (var _i207 = 0; _i207 < _size202; ++_i207)
        {
          var elem208 = null;
          elem208 = input.readI32();
          this.success.push(elem208);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonGroupsBelongs_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonGroupsBelongs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter209 in this.success)
    {
      if (this.success.hasOwnProperty(iter209))
      {
        iter209 = this.success[iter209];
        output.writeI32(iter209);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonGroupsPermittedBy_args = function(args) {
  this.deviceGroupId = null;
  if (args) {
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    }
  }
};
IFaceLog_getPersonGroupsPermittedBy_args.prototype = {};
IFaceLog_getPersonGroupsPermittedBy_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonGroupsPermittedBy_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonGroupsPermittedBy_args');
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonGroupsPermittedBy_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPersonGroupsPermittedBy_result.prototype = {};
IFaceLog_getPersonGroupsPermittedBy_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size210 = 0;
        var _rtmp3214;
        this.success = [];
        var _etype213 = 0;
        _rtmp3214 = input.readListBegin();
        _etype213 = _rtmp3214.etype;
        _size210 = _rtmp3214.size;
        for (var _i215 = 0; _i215 < _size210; ++_i215)
        {
          var elem216 = null;
          elem216 = input.readI32();
          this.success.push(elem216);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonGroupsPermittedBy_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonGroupsPermittedBy_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter217 in this.success)
    {
      if (this.success.hasOwnProperty(iter217))
      {
        iter217 = this.success[iter217];
        output.writeI32(iter217);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonPermit_args = function(args) {
  this.deviceId = null;
  this.personId = null;
  if (args) {
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceId is unset!');
    }
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
  }
};
IFaceLog_getPersonPermit_args.prototype = {};
IFaceLog_getPersonPermit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonPermit_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonPermit_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 2);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonPermit_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPersonPermit_result.prototype = {};
IFaceLog_getPersonPermit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonPermit_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonPermit_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonPermits_args = function(args) {
  this.deviceId = null;
  this.personIdList = null;
  if (args) {
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceId is unset!');
    }
    if (args.personIdList !== undefined && args.personIdList !== null) {
      this.personIdList = Thrift.copyList(args.personIdList, [null]);
    }
  }
};
IFaceLog_getPersonPermits_args.prototype = {};
IFaceLog_getPersonPermits_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size218 = 0;
        var _rtmp3222;
        this.personIdList = [];
        var _etype221 = 0;
        _rtmp3222 = input.readListBegin();
        _etype221 = _rtmp3222.etype;
        _size218 = _rtmp3222.size;
        for (var _i223 = 0; _i223 < _size218; ++_i223)
        {
          var elem224 = null;
          elem224 = input.readI32();
          this.personIdList.push(elem224);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonPermits_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonPermits_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.personIdList !== null && this.personIdList !== undefined) {
    output.writeFieldBegin('personIdList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.personIdList.length);
    for (var iter225 in this.personIdList)
    {
      if (this.personIdList.hasOwnProperty(iter225))
      {
        iter225 = this.personIdList[iter225];
        output.writeI32(iter225);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonPermits_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPersonPermits_result.prototype = {};
IFaceLog_getPersonPermits_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size226 = 0;
        var _rtmp3230;
        this.success = [];
        var _etype229 = 0;
        _rtmp3230 = input.readListBegin();
        _etype229 = _rtmp3230.etype;
        _size226 = _rtmp3230.size;
        for (var _i231 = 0; _i231 < _size226; ++_i231)
        {
          var elem232 = null;
          elem232 = input.readBool();
          this.success.push(elem232);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonPermits_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonPermits_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.BOOL, this.success.length);
    for (var iter233 in this.success)
    {
      if (this.success.hasOwnProperty(iter233))
      {
        iter233 = this.success[iter233];
        output.writeBool(iter233);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersons_args = function(args) {
  this.idList = null;
  if (args) {
    if (args.idList !== undefined && args.idList !== null) {
      this.idList = Thrift.copyList(args.idList, [null]);
    }
  }
};
IFaceLog_getPersons_args.prototype = {};
IFaceLog_getPersons_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size234 = 0;
        var _rtmp3238;
        this.idList = [];
        var _etype237 = 0;
        _rtmp3238 = input.readListBegin();
        _etype237 = _rtmp3238.etype;
        _size234 = _rtmp3238.size;
        for (var _i239 = 0; _i239 < _size234; ++_i239)
        {
          var elem240 = null;
          elem240 = input.readI32();
          this.idList.push(elem240);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersons_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersons_args');
  if (this.idList !== null && this.idList !== undefined) {
    output.writeFieldBegin('idList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.idList.length);
    for (var iter241 in this.idList)
    {
      if (this.idList.hasOwnProperty(iter241))
      {
        iter241 = this.idList[iter241];
        output.writeI32(iter241);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersons_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.PersonBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPersons_result.prototype = {};
IFaceLog_getPersons_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size242 = 0;
        var _rtmp3246;
        this.success = [];
        var _etype245 = 0;
        _rtmp3246 = input.readListBegin();
        _etype245 = _rtmp3246.etype;
        _size242 = _rtmp3246.size;
        for (var _i247 = 0; _i247 < _size242; ++_i247)
        {
          var elem248 = null;
          elem248 = new ttypes.PersonBean();
          elem248.read(input);
          this.success.push(elem248);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersons_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersons_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter249 in this.success)
    {
      if (this.success.hasOwnProperty(iter249))
      {
        iter249 = this.success[iter249];
        iter249.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonsOfGroup_args = function(args) {
  this.personGroupId = null;
  if (args) {
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personGroupId is unset!');
    }
  }
};
IFaceLog_getPersonsOfGroup_args.prototype = {};
IFaceLog_getPersonsOfGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonsOfGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonsOfGroup_args');
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonsOfGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPersonsOfGroup_result.prototype = {};
IFaceLog_getPersonsOfGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size250 = 0;
        var _rtmp3254;
        this.success = [];
        var _etype253 = 0;
        _rtmp3254 = input.readListBegin();
        _etype253 = _rtmp3254.etype;
        _size250 = _rtmp3254.size;
        for (var _i255 = 0; _i255 < _size250; ++_i255)
        {
          var elem256 = null;
          elem256 = input.readI32();
          this.success.push(elem256);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonsOfGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonsOfGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter257 in this.success)
    {
      if (this.success.hasOwnProperty(iter257))
      {
        iter257 = this.success[iter257];
        output.writeI32(iter257);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getProperty_args = function(args) {
  this.key = null;
  this.token = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_getProperty_args.prototype = {};
IFaceLog_getProperty_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getProperty_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getProperty_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getProperty_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getProperty_result.prototype = {};
IFaceLog_getProperty_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getProperty_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getProperty_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getRedisParameters_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_getRedisParameters_args.prototype = {};
IFaceLog_getRedisParameters_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getRedisParameters_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getRedisParameters_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getRedisParameters_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getRedisParameters_result.prototype = {};
IFaceLog_getRedisParameters_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size258 = 0;
        var _rtmp3262;
        this.success = {};
        var _ktype259 = 0;
        var _vtype260 = 0;
        _rtmp3262 = input.readMapBegin();
        _ktype259 = _rtmp3262.ktype;
        _vtype260 = _rtmp3262.vtype;
        _size258 = _rtmp3262.size;
        for (var _i263 = 0; _i263 < _size258; ++_i263)
        {
          var key264 = null;
          var val265 = null;
          key264 = input.readI32();
          val265 = input.readString();
          this.success[key264] = val265;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getRedisParameters_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getRedisParameters_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter266 in this.success)
    {
      if (this.success.hasOwnProperty(kiter266))
      {
        var viter267 = this.success[kiter266];
        output.writeI32(kiter266);
        output.writeString(viter267);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getServiceConfig_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_getServiceConfig_args.prototype = {};
IFaceLog_getServiceConfig_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getServiceConfig_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getServiceConfig_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getServiceConfig_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getServiceConfig_result.prototype = {};
IFaceLog_getServiceConfig_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size268 = 0;
        var _rtmp3272;
        this.success = {};
        var _ktype269 = 0;
        var _vtype270 = 0;
        _rtmp3272 = input.readMapBegin();
        _ktype269 = _rtmp3272.ktype;
        _vtype270 = _rtmp3272.vtype;
        _size268 = _rtmp3272.size;
        for (var _i273 = 0; _i273 < _size268; ++_i273)
        {
          var key274 = null;
          var val275 = null;
          key274 = input.readString();
          val275 = input.readString();
          this.success[key274] = val275;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getServiceConfig_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getServiceConfig_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter276 in this.success)
    {
      if (this.success.hasOwnProperty(kiter276))
      {
        var viter277 = this.success[kiter276];
        output.writeString(kiter276);
        output.writeString(viter277);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getSubDeviceGroup_args = function(args) {
  this.deviceGroupId = null;
  if (args) {
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceGroupId is unset!');
    }
  }
};
IFaceLog_getSubDeviceGroup_args.prototype = {};
IFaceLog_getSubDeviceGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getSubDeviceGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getSubDeviceGroup_args');
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getSubDeviceGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getSubDeviceGroup_result.prototype = {};
IFaceLog_getSubDeviceGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size278 = 0;
        var _rtmp3282;
        this.success = [];
        var _etype281 = 0;
        _rtmp3282 = input.readListBegin();
        _etype281 = _rtmp3282.etype;
        _size278 = _rtmp3282.size;
        for (var _i283 = 0; _i283 < _size278; ++_i283)
        {
          var elem284 = null;
          elem284 = input.readI32();
          this.success.push(elem284);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getSubDeviceGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getSubDeviceGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter285 in this.success)
    {
      if (this.success.hasOwnProperty(iter285))
      {
        iter285 = this.success[iter285];
        output.writeI32(iter285);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getSubPersonGroup_args = function(args) {
  this.personGroupId = null;
  if (args) {
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personGroupId is unset!');
    }
  }
};
IFaceLog_getSubPersonGroup_args.prototype = {};
IFaceLog_getSubPersonGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getSubPersonGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getSubPersonGroup_args');
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getSubPersonGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getSubPersonGroup_result.prototype = {};
IFaceLog_getSubPersonGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size286 = 0;
        var _rtmp3290;
        this.success = [];
        var _etype289 = 0;
        _rtmp3290 = input.readListBegin();
        _etype289 = _rtmp3290.etype;
        _size286 = _rtmp3290.size;
        for (var _i291 = 0; _i291 < _size286; ++_i291)
        {
          var elem292 = null;
          elem292 = input.readI32();
          this.success.push(elem292);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getSubPersonGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getSubPersonGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter293 in this.success)
    {
      if (this.success.hasOwnProperty(iter293))
      {
        iter293 = this.success[iter293];
        output.writeI32(iter293);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isDisable_args = function(args) {
  this.personId = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
  }
};
IFaceLog_isDisable_args.prototype = {};
IFaceLog_isDisable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isDisable_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isDisable_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isDisable_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_isDisable_result.prototype = {};
IFaceLog_isDisable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isDisable_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isDisable_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isLocal_args = function(args) {
};
IFaceLog_isLocal_args.prototype = {};
IFaceLog_isLocal_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isLocal_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isLocal_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isLocal_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_isLocal_result.prototype = {};
IFaceLog_isLocal_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isLocal_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isLocal_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidAckChannel_args = function(args) {
  this.ackChannel = null;
  if (args) {
    if (args.ackChannel !== undefined && args.ackChannel !== null) {
      this.ackChannel = args.ackChannel;
    }
  }
};
IFaceLog_isValidAckChannel_args.prototype = {};
IFaceLog_isValidAckChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ackChannel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidAckChannel_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidAckChannel_args');
  if (this.ackChannel !== null && this.ackChannel !== undefined) {
    output.writeFieldBegin('ackChannel', Thrift.Type.STRING, 1);
    output.writeString(this.ackChannel);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidAckChannel_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_isValidAckChannel_result.prototype = {};
IFaceLog_isValidAckChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidAckChannel_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidAckChannel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidCmdSn_args = function(args) {
  this.cmdSn = null;
  if (args) {
    if (args.cmdSn !== undefined && args.cmdSn !== null) {
      this.cmdSn = args.cmdSn;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field cmdSn is unset!');
    }
  }
};
IFaceLog_isValidCmdSn_args.prototype = {};
IFaceLog_isValidCmdSn_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.cmdSn = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidCmdSn_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidCmdSn_args');
  if (this.cmdSn !== null && this.cmdSn !== undefined) {
    output.writeFieldBegin('cmdSn', Thrift.Type.I64, 1);
    output.writeI64(this.cmdSn);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidCmdSn_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_isValidCmdSn_result.prototype = {};
IFaceLog_isValidCmdSn_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidCmdSn_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidCmdSn_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidDeviceToken_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_isValidDeviceToken_args.prototype = {};
IFaceLog_isValidDeviceToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidDeviceToken_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidDeviceToken_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidDeviceToken_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_isValidDeviceToken_result.prototype = {};
IFaceLog_isValidDeviceToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidDeviceToken_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidDeviceToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidPassword_args = function(args) {
  this.userId = null;
  this.password = null;
  this.isMd5 = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.isMd5 !== undefined && args.isMd5 !== null) {
      this.isMd5 = args.isMd5;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isMd5 is unset!');
    }
  }
};
IFaceLog_isValidPassword_args.prototype = {};
IFaceLog_isValidPassword_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.isMd5 = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidPassword_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidPassword_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.isMd5 !== null && this.isMd5 !== undefined) {
    output.writeFieldBegin('isMd5', Thrift.Type.BOOL, 3);
    output.writeBool(this.isMd5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidPassword_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_isValidPassword_result.prototype = {};
IFaceLog_isValidPassword_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidPassword_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidPassword_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidPersonToken_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_isValidPersonToken_args.prototype = {};
IFaceLog_isValidPersonToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidPersonToken_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidPersonToken_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidPersonToken_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_isValidPersonToken_result.prototype = {};
IFaceLog_isValidPersonToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidPersonToken_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidPersonToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidRootToken_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_isValidRootToken_args.prototype = {};
IFaceLog_isValidRootToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidRootToken_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidRootToken_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidRootToken_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_isValidRootToken_result.prototype = {};
IFaceLog_isValidRootToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidRootToken_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidRootToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_listOfParentForDeviceGroup_args = function(args) {
  this.deviceGroupId = null;
  if (args) {
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceGroupId is unset!');
    }
  }
};
IFaceLog_listOfParentForDeviceGroup_args.prototype = {};
IFaceLog_listOfParentForDeviceGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_listOfParentForDeviceGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_listOfParentForDeviceGroup_args');
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_listOfParentForDeviceGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_listOfParentForDeviceGroup_result.prototype = {};
IFaceLog_listOfParentForDeviceGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size294 = 0;
        var _rtmp3298;
        this.success = [];
        var _etype297 = 0;
        _rtmp3298 = input.readListBegin();
        _etype297 = _rtmp3298.etype;
        _size294 = _rtmp3298.size;
        for (var _i299 = 0; _i299 < _size294; ++_i299)
        {
          var elem300 = null;
          elem300 = input.readI32();
          this.success.push(elem300);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_listOfParentForDeviceGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_listOfParentForDeviceGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter301 in this.success)
    {
      if (this.success.hasOwnProperty(iter301))
      {
        iter301 = this.success[iter301];
        output.writeI32(iter301);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_listOfParentForPersonGroup_args = function(args) {
  this.personGroupId = null;
  if (args) {
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personGroupId is unset!');
    }
  }
};
IFaceLog_listOfParentForPersonGroup_args.prototype = {};
IFaceLog_listOfParentForPersonGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_listOfParentForPersonGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_listOfParentForPersonGroup_args');
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_listOfParentForPersonGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_listOfParentForPersonGroup_result.prototype = {};
IFaceLog_listOfParentForPersonGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size302 = 0;
        var _rtmp3306;
        this.success = [];
        var _etype305 = 0;
        _rtmp3306 = input.readListBegin();
        _etype305 = _rtmp3306.etype;
        _size302 = _rtmp3306.size;
        for (var _i307 = 0; _i307 < _size302; ++_i307)
        {
          var elem308 = null;
          elem308 = input.readI32();
          this.success.push(elem308);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_listOfParentForPersonGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_listOfParentForPersonGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter309 in this.success)
    {
      if (this.success.hasOwnProperty(iter309))
      {
        iter309 = this.success[iter309];
        output.writeI32(iter309);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadAllPerson_args = function(args) {
};
IFaceLog_loadAllPerson_args.prototype = {};
IFaceLog_loadAllPerson_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadAllPerson_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadAllPerson_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadAllPerson_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadAllPerson_result.prototype = {};
IFaceLog_loadAllPerson_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size310 = 0;
        var _rtmp3314;
        this.success = [];
        var _etype313 = 0;
        _rtmp3314 = input.readListBegin();
        _etype313 = _rtmp3314.etype;
        _size310 = _rtmp3314.size;
        for (var _i315 = 0; _i315 < _size310; ++_i315)
        {
          var elem316 = null;
          elem316 = input.readI32();
          this.success.push(elem316);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadAllPerson_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadAllPerson_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter317 in this.success)
    {
      if (this.success.hasOwnProperty(iter317))
      {
        iter317 = this.success[iter317];
        output.writeI32(iter317);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadDeviceByWhere_args = function(args) {
  this.where = null;
  this.startRow = null;
  this.numRows = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
    if (args.startRow !== undefined && args.startRow !== null) {
      this.startRow = args.startRow;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startRow is unset!');
    }
    if (args.numRows !== undefined && args.numRows !== null) {
      this.numRows = args.numRows;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numRows is unset!');
    }
  }
};
IFaceLog_loadDeviceByWhere_args.prototype = {};
IFaceLog_loadDeviceByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.startRow = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numRows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadDeviceByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadDeviceByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.I32, 2);
    output.writeI32(this.startRow);
    output.writeFieldEnd();
  }
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I32, 3);
    output.writeI32(this.numRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadDeviceByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.DeviceBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadDeviceByWhere_result.prototype = {};
IFaceLog_loadDeviceByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size318 = 0;
        var _rtmp3322;
        this.success = [];
        var _etype321 = 0;
        _rtmp3322 = input.readListBegin();
        _etype321 = _rtmp3322.etype;
        _size318 = _rtmp3322.size;
        for (var _i323 = 0; _i323 < _size318; ++_i323)
        {
          var elem324 = null;
          elem324 = new ttypes.DeviceBean();
          elem324.read(input);
          this.success.push(elem324);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadDeviceByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadDeviceByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter325 in this.success)
    {
      if (this.success.hasOwnProperty(iter325))
      {
        iter325 = this.success[iter325];
        iter325.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadDeviceGroupByWhere_args = function(args) {
  this.where = null;
  this.startRow = null;
  this.numRows = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
    if (args.startRow !== undefined && args.startRow !== null) {
      this.startRow = args.startRow;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startRow is unset!');
    }
    if (args.numRows !== undefined && args.numRows !== null) {
      this.numRows = args.numRows;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numRows is unset!');
    }
  }
};
IFaceLog_loadDeviceGroupByWhere_args.prototype = {};
IFaceLog_loadDeviceGroupByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.startRow = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numRows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadDeviceGroupByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadDeviceGroupByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.I32, 2);
    output.writeI32(this.startRow);
    output.writeFieldEnd();
  }
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I32, 3);
    output.writeI32(this.numRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadDeviceGroupByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadDeviceGroupByWhere_result.prototype = {};
IFaceLog_loadDeviceGroupByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size326 = 0;
        var _rtmp3330;
        this.success = [];
        var _etype329 = 0;
        _rtmp3330 = input.readListBegin();
        _etype329 = _rtmp3330.etype;
        _size326 = _rtmp3330.size;
        for (var _i331 = 0; _i331 < _size326; ++_i331)
        {
          var elem332 = null;
          elem332 = input.readI32();
          this.success.push(elem332);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadDeviceGroupByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadDeviceGroupByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter333 in this.success)
    {
      if (this.success.hasOwnProperty(iter333))
      {
        iter333 = this.success[iter333];
        output.writeI32(iter333);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadDeviceGroupIdByWhere_args = function(args) {
  this.where = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_loadDeviceGroupIdByWhere_args.prototype = {};
IFaceLog_loadDeviceGroupIdByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadDeviceGroupIdByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadDeviceGroupIdByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadDeviceGroupIdByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadDeviceGroupIdByWhere_result.prototype = {};
IFaceLog_loadDeviceGroupIdByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size334 = 0;
        var _rtmp3338;
        this.success = [];
        var _etype337 = 0;
        _rtmp3338 = input.readListBegin();
        _etype337 = _rtmp3338.etype;
        _size334 = _rtmp3338.size;
        for (var _i339 = 0; _i339 < _size334; ++_i339)
        {
          var elem340 = null;
          elem340 = input.readI32();
          this.success.push(elem340);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadDeviceGroupIdByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadDeviceGroupIdByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter341 in this.success)
    {
      if (this.success.hasOwnProperty(iter341))
      {
        iter341 = this.success[iter341];
        output.writeI32(iter341);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadDeviceIdByWhere_args = function(args) {
  this.where = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_loadDeviceIdByWhere_args.prototype = {};
IFaceLog_loadDeviceIdByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadDeviceIdByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadDeviceIdByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadDeviceIdByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadDeviceIdByWhere_result.prototype = {};
IFaceLog_loadDeviceIdByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size342 = 0;
        var _rtmp3346;
        this.success = [];
        var _etype345 = 0;
        _rtmp3346 = input.readListBegin();
        _etype345 = _rtmp3346.etype;
        _size342 = _rtmp3346.size;
        for (var _i347 = 0; _i347 < _size342; ++_i347)
        {
          var elem348 = null;
          elem348 = input.readI32();
          this.success.push(elem348);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadDeviceIdByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadDeviceIdByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter349 in this.success)
    {
      if (this.success.hasOwnProperty(iter349))
      {
        iter349 = this.success[iter349];
        output.writeI32(iter349);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadFeatureMd5ByUpdate_args = function(args) {
  this.timestamp = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamp is unset!');
    }
  }
};
IFaceLog_loadFeatureMd5ByUpdate_args.prototype = {};
IFaceLog_loadFeatureMd5ByUpdate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadFeatureMd5ByUpdate_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadFeatureMd5ByUpdate_args');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadFeatureMd5ByUpdate_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadFeatureMd5ByUpdate_result.prototype = {};
IFaceLog_loadFeatureMd5ByUpdate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size350 = 0;
        var _rtmp3354;
        this.success = [];
        var _etype353 = 0;
        _rtmp3354 = input.readListBegin();
        _etype353 = _rtmp3354.etype;
        _size350 = _rtmp3354.size;
        for (var _i355 = 0; _i355 < _size350; ++_i355)
        {
          var elem356 = null;
          elem356 = input.readString();
          this.success.push(elem356);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadFeatureMd5ByUpdate_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadFeatureMd5ByUpdate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter357 in this.success)
    {
      if (this.success.hasOwnProperty(iter357))
      {
        iter357 = this.success[iter357];
        output.writeString(iter357);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadLogByWhere_args = function(args) {
  this.where = null;
  this.startRow = null;
  this.numRows = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
    if (args.startRow !== undefined && args.startRow !== null) {
      this.startRow = args.startRow;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startRow is unset!');
    }
    if (args.numRows !== undefined && args.numRows !== null) {
      this.numRows = args.numRows;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numRows is unset!');
    }
  }
};
IFaceLog_loadLogByWhere_args.prototype = {};
IFaceLog_loadLogByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.startRow = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numRows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadLogByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadLogByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.I32, 2);
    output.writeI32(this.startRow);
    output.writeFieldEnd();
  }
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I32, 3);
    output.writeI32(this.numRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadLogByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.LogBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadLogByWhere_result.prototype = {};
IFaceLog_loadLogByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size358 = 0;
        var _rtmp3362;
        this.success = [];
        var _etype361 = 0;
        _rtmp3362 = input.readListBegin();
        _etype361 = _rtmp3362.etype;
        _size358 = _rtmp3362.size;
        for (var _i363 = 0; _i363 < _size358; ++_i363)
        {
          var elem364 = null;
          elem364 = new ttypes.LogBean();
          elem364.read(input);
          this.success.push(elem364);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadLogByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadLogByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter365 in this.success)
    {
      if (this.success.hasOwnProperty(iter365))
      {
        iter365 = this.success[iter365];
        iter365.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadLogLightByVerifyTime_args = function(args) {
  this.timestamp = null;
  this.startRow = null;
  this.numRows = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamp is unset!');
    }
    if (args.startRow !== undefined && args.startRow !== null) {
      this.startRow = args.startRow;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startRow is unset!');
    }
    if (args.numRows !== undefined && args.numRows !== null) {
      this.numRows = args.numRows;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numRows is unset!');
    }
  }
};
IFaceLog_loadLogLightByVerifyTime_args.prototype = {};
IFaceLog_loadLogLightByVerifyTime_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.startRow = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numRows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadLogLightByVerifyTime_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadLogLightByVerifyTime_args');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.I32, 2);
    output.writeI32(this.startRow);
    output.writeFieldEnd();
  }
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I32, 3);
    output.writeI32(this.numRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadLogLightByVerifyTime_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.LogLightBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadLogLightByVerifyTime_result.prototype = {};
IFaceLog_loadLogLightByVerifyTime_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size366 = 0;
        var _rtmp3370;
        this.success = [];
        var _etype369 = 0;
        _rtmp3370 = input.readListBegin();
        _etype369 = _rtmp3370.etype;
        _size366 = _rtmp3370.size;
        for (var _i371 = 0; _i371 < _size366; ++_i371)
        {
          var elem372 = null;
          elem372 = new ttypes.LogLightBean();
          elem372.read(input);
          this.success.push(elem372);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadLogLightByVerifyTime_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadLogLightByVerifyTime_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter373 in this.success)
    {
      if (this.success.hasOwnProperty(iter373))
      {
        iter373 = this.success[iter373];
        iter373.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadLogLightByWhere_args = function(args) {
  this.where = null;
  this.startRow = null;
  this.numRows = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
    if (args.startRow !== undefined && args.startRow !== null) {
      this.startRow = args.startRow;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startRow is unset!');
    }
    if (args.numRows !== undefined && args.numRows !== null) {
      this.numRows = args.numRows;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numRows is unset!');
    }
  }
};
IFaceLog_loadLogLightByWhere_args.prototype = {};
IFaceLog_loadLogLightByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.startRow = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numRows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadLogLightByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadLogLightByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.I32, 2);
    output.writeI32(this.startRow);
    output.writeFieldEnd();
  }
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I32, 3);
    output.writeI32(this.numRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadLogLightByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.LogLightBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadLogLightByWhere_result.prototype = {};
IFaceLog_loadLogLightByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size374 = 0;
        var _rtmp3378;
        this.success = [];
        var _etype377 = 0;
        _rtmp3378 = input.readListBegin();
        _etype377 = _rtmp3378.etype;
        _size374 = _rtmp3378.size;
        for (var _i379 = 0; _i379 < _size374; ++_i379)
        {
          var elem380 = null;
          elem380 = new ttypes.LogLightBean();
          elem380.read(input);
          this.success.push(elem380);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadLogLightByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadLogLightByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter381 in this.success)
    {
      if (this.success.hasOwnProperty(iter381))
      {
        iter381 = this.success[iter381];
        iter381.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPermitByUpdate_args = function(args) {
  this.timestamp = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamp is unset!');
    }
  }
};
IFaceLog_loadPermitByUpdate_args.prototype = {};
IFaceLog_loadPermitByUpdate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPermitByUpdate_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPermitByUpdate_args');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPermitByUpdate_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.PermitBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadPermitByUpdate_result.prototype = {};
IFaceLog_loadPermitByUpdate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size382 = 0;
        var _rtmp3386;
        this.success = [];
        var _etype385 = 0;
        _rtmp3386 = input.readListBegin();
        _etype385 = _rtmp3386.etype;
        _size382 = _rtmp3386.size;
        for (var _i387 = 0; _i387 < _size382; ++_i387)
        {
          var elem388 = null;
          elem388 = new ttypes.PermitBean();
          elem388.read(input);
          this.success.push(elem388);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPermitByUpdate_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPermitByUpdate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter389 in this.success)
    {
      if (this.success.hasOwnProperty(iter389))
      {
        iter389 = this.success[iter389];
        iter389.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPersonByWhere_args = function(args) {
  this.where = null;
  this.startRow = null;
  this.numRows = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
    if (args.startRow !== undefined && args.startRow !== null) {
      this.startRow = args.startRow;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startRow is unset!');
    }
    if (args.numRows !== undefined && args.numRows !== null) {
      this.numRows = args.numRows;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numRows is unset!');
    }
  }
};
IFaceLog_loadPersonByWhere_args.prototype = {};
IFaceLog_loadPersonByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.startRow = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numRows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.I32, 2);
    output.writeI32(this.startRow);
    output.writeFieldEnd();
  }
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I32, 3);
    output.writeI32(this.numRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPersonByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.PersonBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadPersonByWhere_result.prototype = {};
IFaceLog_loadPersonByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size390 = 0;
        var _rtmp3394;
        this.success = [];
        var _etype393 = 0;
        _rtmp3394 = input.readListBegin();
        _etype393 = _rtmp3394.etype;
        _size390 = _rtmp3394.size;
        for (var _i395 = 0; _i395 < _size390; ++_i395)
        {
          var elem396 = null;
          elem396 = new ttypes.PersonBean();
          elem396.read(input);
          this.success.push(elem396);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter397 in this.success)
    {
      if (this.success.hasOwnProperty(iter397))
      {
        iter397 = this.success[iter397];
        iter397.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPersonGroupByWhere_args = function(args) {
  this.where = null;
  this.startRow = null;
  this.numRows = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
    if (args.startRow !== undefined && args.startRow !== null) {
      this.startRow = args.startRow;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startRow is unset!');
    }
    if (args.numRows !== undefined && args.numRows !== null) {
      this.numRows = args.numRows;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numRows is unset!');
    }
  }
};
IFaceLog_loadPersonGroupByWhere_args.prototype = {};
IFaceLog_loadPersonGroupByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.startRow = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numRows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonGroupByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonGroupByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.I32, 2);
    output.writeI32(this.startRow);
    output.writeFieldEnd();
  }
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I32, 3);
    output.writeI32(this.numRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPersonGroupByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadPersonGroupByWhere_result.prototype = {};
IFaceLog_loadPersonGroupByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size398 = 0;
        var _rtmp3402;
        this.success = [];
        var _etype401 = 0;
        _rtmp3402 = input.readListBegin();
        _etype401 = _rtmp3402.etype;
        _size398 = _rtmp3402.size;
        for (var _i403 = 0; _i403 < _size398; ++_i403)
        {
          var elem404 = null;
          elem404 = input.readI32();
          this.success.push(elem404);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonGroupByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonGroupByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter405 in this.success)
    {
      if (this.success.hasOwnProperty(iter405))
      {
        iter405 = this.success[iter405];
        output.writeI32(iter405);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPersonGroupIdByWhere_args = function(args) {
  this.where = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_loadPersonGroupIdByWhere_args.prototype = {};
IFaceLog_loadPersonGroupIdByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonGroupIdByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonGroupIdByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPersonGroupIdByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadPersonGroupIdByWhere_result.prototype = {};
IFaceLog_loadPersonGroupIdByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size406 = 0;
        var _rtmp3410;
        this.success = [];
        var _etype409 = 0;
        _rtmp3410 = input.readListBegin();
        _etype409 = _rtmp3410.etype;
        _size406 = _rtmp3410.size;
        for (var _i411 = 0; _i411 < _size406; ++_i411)
        {
          var elem412 = null;
          elem412 = input.readI32();
          this.success.push(elem412);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonGroupIdByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonGroupIdByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter413 in this.success)
    {
      if (this.success.hasOwnProperty(iter413))
      {
        iter413 = this.success[iter413];
        output.writeI32(iter413);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPersonIdByUpdateTime_args = function(args) {
  this.timestamp = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamp is unset!');
    }
  }
};
IFaceLog_loadPersonIdByUpdateTime_args.prototype = {};
IFaceLog_loadPersonIdByUpdateTime_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonIdByUpdateTime_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonIdByUpdateTime_args');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPersonIdByUpdateTime_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadPersonIdByUpdateTime_result.prototype = {};
IFaceLog_loadPersonIdByUpdateTime_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size414 = 0;
        var _rtmp3418;
        this.success = [];
        var _etype417 = 0;
        _rtmp3418 = input.readListBegin();
        _etype417 = _rtmp3418.etype;
        _size414 = _rtmp3418.size;
        for (var _i419 = 0; _i419 < _size414; ++_i419)
        {
          var elem420 = null;
          elem420 = input.readI32();
          this.success.push(elem420);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonIdByUpdateTime_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonIdByUpdateTime_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter421 in this.success)
    {
      if (this.success.hasOwnProperty(iter421))
      {
        iter421 = this.success[iter421];
        output.writeI32(iter421);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPersonIdByWhere_args = function(args) {
  this.where = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_loadPersonIdByWhere_args.prototype = {};
IFaceLog_loadPersonIdByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonIdByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonIdByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPersonIdByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadPersonIdByWhere_result.prototype = {};
IFaceLog_loadPersonIdByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size422 = 0;
        var _rtmp3426;
        this.success = [];
        var _etype425 = 0;
        _rtmp3426 = input.readListBegin();
        _etype425 = _rtmp3426.etype;
        _size422 = _rtmp3426.size;
        for (var _i427 = 0; _i427 < _size422; ++_i427)
        {
          var elem428 = null;
          elem428 = input.readI32();
          this.success.push(elem428);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonIdByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonIdByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter429 in this.success)
    {
      if (this.success.hasOwnProperty(iter429))
      {
        iter429 = this.success[iter429];
        output.writeI32(iter429);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadUpdatedPersons_args = function(args) {
  this.timestamp = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamp is unset!');
    }
  }
};
IFaceLog_loadUpdatedPersons_args.prototype = {};
IFaceLog_loadUpdatedPersons_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadUpdatedPersons_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadUpdatedPersons_args');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadUpdatedPersons_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadUpdatedPersons_result.prototype = {};
IFaceLog_loadUpdatedPersons_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size430 = 0;
        var _rtmp3434;
        this.success = [];
        var _etype433 = 0;
        _rtmp3434 = input.readListBegin();
        _etype433 = _rtmp3434.etype;
        _size430 = _rtmp3434.size;
        for (var _i435 = 0; _i435 < _size430; ++_i435)
        {
          var elem436 = null;
          elem436 = input.readI32();
          this.success.push(elem436);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadUpdatedPersons_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadUpdatedPersons_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter437 in this.success)
    {
      if (this.success.hasOwnProperty(iter437))
      {
        iter437 = this.success[iter437];
        output.writeI32(iter437);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_offline_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_offline_args.prototype = {};
IFaceLog_offline_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_offline_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_offline_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_offline_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.ServiceSecurityException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_offline_result.prototype = {};
IFaceLog_offline_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceSecurityException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_offline_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_offline_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_online_args = function(args) {
  this.device = null;
  if (args) {
    if (args.device !== undefined && args.device !== null) {
      this.device = new ttypes.DeviceBean(args.device);
    }
  }
};
IFaceLog_online_args.prototype = {};
IFaceLog_online_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.device = new ttypes.DeviceBean();
        this.device.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_online_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_online_args');
  if (this.device !== null && this.device !== undefined) {
    output.writeFieldBegin('device', Thrift.Type.STRUCT, 1);
    this.device.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_online_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.ServiceSecurityException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Token(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_online_result.prototype = {};
IFaceLog_online_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Token();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceSecurityException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_online_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_online_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_registerDevice_args = function(args) {
  this.newDevice = null;
  if (args) {
    if (args.newDevice !== undefined && args.newDevice !== null) {
      this.newDevice = new ttypes.DeviceBean(args.newDevice);
    }
  }
};
IFaceLog_registerDevice_args.prototype = {};
IFaceLog_registerDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.newDevice = new ttypes.DeviceBean();
        this.newDevice.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_registerDevice_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_registerDevice_args');
  if (this.newDevice !== null && this.newDevice !== undefined) {
    output.writeFieldBegin('newDevice', Thrift.Type.STRUCT, 1);
    this.newDevice.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_registerDevice_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.ServiceSecurityException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.DeviceBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_registerDevice_result.prototype = {};
IFaceLog_registerDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.DeviceBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceSecurityException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_registerDevice_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_registerDevice_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_releasePersonToken_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_releasePersonToken_args.prototype = {};
IFaceLog_releasePersonToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_releasePersonToken_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_releasePersonToken_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_releasePersonToken_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.ServiceSecurityException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_releasePersonToken_result.prototype = {};
IFaceLog_releasePersonToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceSecurityException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_releasePersonToken_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_releasePersonToken_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_releaseRootToken_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_releaseRootToken_args.prototype = {};
IFaceLog_releaseRootToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_releaseRootToken_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_releaseRootToken_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_releaseRootToken_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.ServiceSecurityException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_releaseRootToken_result.prototype = {};
IFaceLog_releaseRootToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceSecurityException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_releaseRootToken_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_releaseRootToken_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_replaceFeature_args = function(args) {
  this.personId = null;
  this.featureMd5 = null;
  this.deleteOldFeatureImage = null;
  this.token = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    }
    if (args.featureMd5 !== undefined && args.featureMd5 !== null) {
      this.featureMd5 = args.featureMd5;
    }
    if (args.deleteOldFeatureImage !== undefined && args.deleteOldFeatureImage !== null) {
      this.deleteOldFeatureImage = args.deleteOldFeatureImage;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deleteOldFeatureImage is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_replaceFeature_args.prototype = {};
IFaceLog_replaceFeature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.featureMd5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteOldFeatureImage = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_replaceFeature_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_replaceFeature_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.featureMd5 !== null && this.featureMd5 !== undefined) {
    output.writeFieldBegin('featureMd5', Thrift.Type.STRING, 2);
    output.writeString(this.featureMd5);
    output.writeFieldEnd();
  }
  if (this.deleteOldFeatureImage !== null && this.deleteOldFeatureImage !== undefined) {
    output.writeFieldBegin('deleteOldFeatureImage', Thrift.Type.BOOL, 3);
    output.writeBool(this.deleteOldFeatureImage);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 4);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_replaceFeature_result = function(args) {
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_replaceFeature_result.prototype = {};
IFaceLog_replaceFeature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_replaceFeature_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_replaceFeature_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_rootGroupOfDevice_args = function(args) {
  this.deviceId = null;
  if (args) {
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    }
  }
};
IFaceLog_rootGroupOfDevice_args.prototype = {};
IFaceLog_rootGroupOfDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_rootGroupOfDevice_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_rootGroupOfDevice_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_rootGroupOfDevice_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_rootGroupOfDevice_result.prototype = {};
IFaceLog_rootGroupOfDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_rootGroupOfDevice_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_rootGroupOfDevice_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_rootGroupOfPerson_args = function(args) {
  this.personId = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    }
  }
};
IFaceLog_rootGroupOfPerson_args.prototype = {};
IFaceLog_rootGroupOfPerson_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_rootGroupOfPerson_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_rootGroupOfPerson_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_rootGroupOfPerson_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_rootGroupOfPerson_result.prototype = {};
IFaceLog_rootGroupOfPerson_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_rootGroupOfPerson_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_rootGroupOfPerson_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_saveDevice_args = function(args) {
  this.deviceBean = null;
  this.token = null;
  if (args) {
    if (args.deviceBean !== undefined && args.deviceBean !== null) {
      this.deviceBean = new ttypes.DeviceBean(args.deviceBean);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_saveDevice_args.prototype = {};
IFaceLog_saveDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.deviceBean = new ttypes.DeviceBean();
        this.deviceBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_saveDevice_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_saveDevice_args');
  if (this.deviceBean !== null && this.deviceBean !== undefined) {
    output.writeFieldBegin('deviceBean', Thrift.Type.STRUCT, 1);
    this.deviceBean.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_saveDevice_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.DeviceBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_saveDevice_result.prototype = {};
IFaceLog_saveDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.DeviceBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_saveDevice_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_saveDevice_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_saveDeviceGroup_args = function(args) {
  this.deviceGroupBean = null;
  this.token = null;
  if (args) {
    if (args.deviceGroupBean !== undefined && args.deviceGroupBean !== null) {
      this.deviceGroupBean = new ttypes.DeviceGroupBean(args.deviceGroupBean);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_saveDeviceGroup_args.prototype = {};
IFaceLog_saveDeviceGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.deviceGroupBean = new ttypes.DeviceGroupBean();
        this.deviceGroupBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_saveDeviceGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_saveDeviceGroup_args');
  if (this.deviceGroupBean !== null && this.deviceGroupBean !== undefined) {
    output.writeFieldBegin('deviceGroupBean', Thrift.Type.STRUCT, 1);
    this.deviceGroupBean.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_saveDeviceGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.DeviceGroupBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_saveDeviceGroup_result.prototype = {};
IFaceLog_saveDeviceGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.DeviceGroupBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_saveDeviceGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_saveDeviceGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePerson_args = function(args) {
  this.bean = null;
  this.token = null;
  if (args) {
    if (args.bean !== undefined && args.bean !== null) {
      this.bean = new ttypes.PersonBean(args.bean);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_savePerson_args.prototype = {};
IFaceLog_savePerson_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.bean = new ttypes.PersonBean();
        this.bean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePerson_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePerson_args');
  if (this.bean !== null && this.bean !== undefined) {
    output.writeFieldBegin('bean', Thrift.Type.STRUCT, 1);
    this.bean.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePerson_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PersonBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePerson_result.prototype = {};
IFaceLog_savePerson_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PersonBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePerson_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePerson_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonFull_args = function(args) {
  this.bean = null;
  this.idPhoto = null;
  this.feature = null;
  this.featureImage = null;
  this.featureFaceBean = null;
  this.deviceId = null;
  this.token = null;
  if (args) {
    if (args.bean !== undefined && args.bean !== null) {
      this.bean = new ttypes.PersonBean(args.bean);
    }
    if (args.idPhoto !== undefined && args.idPhoto !== null) {
      this.idPhoto = args.idPhoto;
    }
    if (args.feature !== undefined && args.feature !== null) {
      this.feature = args.feature;
    }
    if (args.featureImage !== undefined && args.featureImage !== null) {
      this.featureImage = args.featureImage;
    }
    if (args.featureFaceBean !== undefined && args.featureFaceBean !== null) {
      this.featureFaceBean = new ttypes.FaceBean(args.featureFaceBean);
    }
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_savePersonFull_args.prototype = {};
IFaceLog_savePersonFull_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.bean = new ttypes.PersonBean();
        this.bean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.idPhoto = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.feature = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.featureImage = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.featureFaceBean = new ttypes.FaceBean();
        this.featureFaceBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonFull_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonFull_args');
  if (this.bean !== null && this.bean !== undefined) {
    output.writeFieldBegin('bean', Thrift.Type.STRUCT, 1);
    this.bean.write(output);
    output.writeFieldEnd();
  }
  if (this.idPhoto !== null && this.idPhoto !== undefined) {
    output.writeFieldBegin('idPhoto', Thrift.Type.STRING, 2);
    output.writeBinary(this.idPhoto);
    output.writeFieldEnd();
  }
  if (this.feature !== null && this.feature !== undefined) {
    output.writeFieldBegin('feature', Thrift.Type.STRING, 3);
    output.writeBinary(this.feature);
    output.writeFieldEnd();
  }
  if (this.featureImage !== null && this.featureImage !== undefined) {
    output.writeFieldBegin('featureImage', Thrift.Type.STRING, 4);
    output.writeBinary(this.featureImage);
    output.writeFieldEnd();
  }
  if (this.featureFaceBean !== null && this.featureFaceBean !== undefined) {
    output.writeFieldBegin('featureFaceBean', Thrift.Type.STRUCT, 5);
    this.featureFaceBean.write(output);
    output.writeFieldEnd();
  }
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 6);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 7);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonFull_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PersonBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePersonFull_result.prototype = {};
IFaceLog_savePersonFull_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PersonBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonFull_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonFull_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonGroup_args = function(args) {
  this.personGroupBean = null;
  this.token = null;
  if (args) {
    if (args.personGroupBean !== undefined && args.personGroupBean !== null) {
      this.personGroupBean = new ttypes.PersonGroupBean(args.personGroupBean);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_savePersonGroup_args.prototype = {};
IFaceLog_savePersonGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.personGroupBean = new ttypes.PersonGroupBean();
        this.personGroupBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonGroup_args');
  if (this.personGroupBean !== null && this.personGroupBean !== undefined) {
    output.writeFieldBegin('personGroupBean', Thrift.Type.STRUCT, 1);
    this.personGroupBean.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PersonGroupBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePersonGroup_result.prototype = {};
IFaceLog_savePersonGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PersonGroupBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonWithPhoto_args = function(args) {
  this.bean = null;
  this.idPhoto = null;
  this.token = null;
  if (args) {
    if (args.bean !== undefined && args.bean !== null) {
      this.bean = new ttypes.PersonBean(args.bean);
    }
    if (args.idPhoto !== undefined && args.idPhoto !== null) {
      this.idPhoto = args.idPhoto;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_savePersonWithPhoto_args.prototype = {};
IFaceLog_savePersonWithPhoto_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.bean = new ttypes.PersonBean();
        this.bean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.idPhoto = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonWithPhoto_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonWithPhoto_args');
  if (this.bean !== null && this.bean !== undefined) {
    output.writeFieldBegin('bean', Thrift.Type.STRUCT, 1);
    this.bean.write(output);
    output.writeFieldEnd();
  }
  if (this.idPhoto !== null && this.idPhoto !== undefined) {
    output.writeFieldBegin('idPhoto', Thrift.Type.STRING, 2);
    output.writeBinary(this.idPhoto);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonWithPhoto_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PersonBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePersonWithPhoto_result.prototype = {};
IFaceLog_savePersonWithPhoto_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PersonBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonWithPhoto_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonWithPhoto_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonWithPhotoAndFeature_args = function(args) {
  this.bean = null;
  this.idPhoto = null;
  this.featureBean = null;
  this.deviceId = null;
  this.token = null;
  if (args) {
    if (args.bean !== undefined && args.bean !== null) {
      this.bean = new ttypes.PersonBean(args.bean);
    }
    if (args.idPhoto !== undefined && args.idPhoto !== null) {
      this.idPhoto = args.idPhoto;
    }
    if (args.featureBean !== undefined && args.featureBean !== null) {
      this.featureBean = new ttypes.FeatureBean(args.featureBean);
    }
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_savePersonWithPhotoAndFeature_args.prototype = {};
IFaceLog_savePersonWithPhotoAndFeature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.bean = new ttypes.PersonBean();
        this.bean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.idPhoto = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.featureBean = new ttypes.FeatureBean();
        this.featureBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonWithPhotoAndFeature_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonWithPhotoAndFeature_args');
  if (this.bean !== null && this.bean !== undefined) {
    output.writeFieldBegin('bean', Thrift.Type.STRUCT, 1);
    this.bean.write(output);
    output.writeFieldEnd();
  }
  if (this.idPhoto !== null && this.idPhoto !== undefined) {
    output.writeFieldBegin('idPhoto', Thrift.Type.STRING, 2);
    output.writeBinary(this.idPhoto);
    output.writeFieldEnd();
  }
  if (this.featureBean !== null && this.featureBean !== undefined) {
    output.writeFieldBegin('featureBean', Thrift.Type.STRUCT, 3);
    this.featureBean.write(output);
    output.writeFieldEnd();
  }
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 4);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 5);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonWithPhotoAndFeature_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PersonBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePersonWithPhotoAndFeature_result.prototype = {};
IFaceLog_savePersonWithPhotoAndFeature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PersonBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonWithPhotoAndFeature_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonWithPhotoAndFeature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args = function(args) {
  this.bean = null;
  this.idPhoto = null;
  this.feature = null;
  this.faceBeans = null;
  this.token = null;
  if (args) {
    if (args.bean !== undefined && args.bean !== null) {
      this.bean = new ttypes.PersonBean(args.bean);
    }
    if (args.idPhoto !== undefined && args.idPhoto !== null) {
      this.idPhoto = args.idPhoto;
    }
    if (args.feature !== undefined && args.feature !== null) {
      this.feature = args.feature;
    }
    if (args.faceBeans !== undefined && args.faceBeans !== null) {
      this.faceBeans = Thrift.copyList(args.faceBeans, [ttypes.FaceBean]);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args.prototype = {};
IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.bean = new ttypes.PersonBean();
        this.bean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.idPhoto = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.feature = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size438 = 0;
        var _rtmp3442;
        this.faceBeans = [];
        var _etype441 = 0;
        _rtmp3442 = input.readListBegin();
        _etype441 = _rtmp3442.etype;
        _size438 = _rtmp3442.size;
        for (var _i443 = 0; _i443 < _size438; ++_i443)
        {
          var elem444 = null;
          elem444 = new ttypes.FaceBean();
          elem444.read(input);
          this.faceBeans.push(elem444);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args');
  if (this.bean !== null && this.bean !== undefined) {
    output.writeFieldBegin('bean', Thrift.Type.STRUCT, 1);
    this.bean.write(output);
    output.writeFieldEnd();
  }
  if (this.idPhoto !== null && this.idPhoto !== undefined) {
    output.writeFieldBegin('idPhoto', Thrift.Type.STRING, 2);
    output.writeBinary(this.idPhoto);
    output.writeFieldEnd();
  }
  if (this.feature !== null && this.feature !== undefined) {
    output.writeFieldBegin('feature', Thrift.Type.STRING, 3);
    output.writeBinary(this.feature);
    output.writeFieldEnd();
  }
  if (this.faceBeans !== null && this.faceBeans !== undefined) {
    output.writeFieldBegin('faceBeans', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.faceBeans.length);
    for (var iter445 in this.faceBeans)
    {
      if (this.faceBeans.hasOwnProperty(iter445))
      {
        iter445 = this.faceBeans[iter445];
        iter445.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 5);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PersonBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result.prototype = {};
IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PersonBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args = function(args) {
  this.bean = null;
  this.idPhoto = null;
  this.feature = null;
  this.faceInfo = null;
  this.deviceId = null;
  this.token = null;
  if (args) {
    if (args.bean !== undefined && args.bean !== null) {
      this.bean = new ttypes.PersonBean(args.bean);
    }
    if (args.idPhoto !== undefined && args.idPhoto !== null) {
      this.idPhoto = args.idPhoto;
    }
    if (args.feature !== undefined && args.feature !== null) {
      this.feature = args.feature;
    }
    if (args.faceInfo !== undefined && args.faceInfo !== null) {
      this.faceInfo = Thrift.copyMap(args.faceInfo, [ttypes.FaceBean]);
    }
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args.prototype = {};
IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.bean = new ttypes.PersonBean();
        this.bean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.idPhoto = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.feature = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size446 = 0;
        var _rtmp3450;
        this.faceInfo = {};
        var _ktype447 = 0;
        var _vtype448 = 0;
        _rtmp3450 = input.readMapBegin();
        _ktype447 = _rtmp3450.ktype;
        _vtype448 = _rtmp3450.vtype;
        _size446 = _rtmp3450.size;
        for (var _i451 = 0; _i451 < _size446; ++_i451)
        {
          var key452 = null;
          var val453 = null;
          key452 = input.readBinary();
          val453 = new ttypes.FaceBean();
          val453.read(input);
          this.faceInfo[key452] = val453;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args');
  if (this.bean !== null && this.bean !== undefined) {
    output.writeFieldBegin('bean', Thrift.Type.STRUCT, 1);
    this.bean.write(output);
    output.writeFieldEnd();
  }
  if (this.idPhoto !== null && this.idPhoto !== undefined) {
    output.writeFieldBegin('idPhoto', Thrift.Type.STRING, 2);
    output.writeBinary(this.idPhoto);
    output.writeFieldEnd();
  }
  if (this.feature !== null && this.feature !== undefined) {
    output.writeFieldBegin('feature', Thrift.Type.STRING, 3);
    output.writeBinary(this.feature);
    output.writeFieldEnd();
  }
  if (this.faceInfo !== null && this.faceInfo !== undefined) {
    output.writeFieldBegin('faceInfo', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.faceInfo));
    for (var kiter454 in this.faceInfo)
    {
      if (this.faceInfo.hasOwnProperty(kiter454))
      {
        var viter455 = this.faceInfo[kiter454];
        output.writeBinary(kiter454);
        viter455.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 5);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 6);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PersonBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result.prototype = {};
IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PersonBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonWithPhotoAndFeatureSaved_args = function(args) {
  this.bean = null;
  this.idPhotoMd5 = null;
  this.featureMd5 = null;
  this.token = null;
  if (args) {
    if (args.bean !== undefined && args.bean !== null) {
      this.bean = new ttypes.PersonBean(args.bean);
    }
    if (args.idPhotoMd5 !== undefined && args.idPhotoMd5 !== null) {
      this.idPhotoMd5 = args.idPhotoMd5;
    }
    if (args.featureMd5 !== undefined && args.featureMd5 !== null) {
      this.featureMd5 = args.featureMd5;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_savePersonWithPhotoAndFeatureSaved_args.prototype = {};
IFaceLog_savePersonWithPhotoAndFeatureSaved_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.bean = new ttypes.PersonBean();
        this.bean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.idPhotoMd5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.featureMd5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonWithPhotoAndFeatureSaved_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonWithPhotoAndFeatureSaved_args');
  if (this.bean !== null && this.bean !== undefined) {
    output.writeFieldBegin('bean', Thrift.Type.STRUCT, 1);
    this.bean.write(output);
    output.writeFieldEnd();
  }
  if (this.idPhotoMd5 !== null && this.idPhotoMd5 !== undefined) {
    output.writeFieldBegin('idPhotoMd5', Thrift.Type.STRING, 2);
    output.writeString(this.idPhotoMd5);
    output.writeFieldEnd();
  }
  if (this.featureMd5 !== null && this.featureMd5 !== undefined) {
    output.writeFieldBegin('featureMd5', Thrift.Type.STRING, 3);
    output.writeString(this.featureMd5);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 4);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonWithPhotoAndFeatureSaved_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PersonBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePersonWithPhotoAndFeatureSaved_result.prototype = {};
IFaceLog_savePersonWithPhotoAndFeatureSaved_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PersonBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonWithPhotoAndFeatureSaved_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonWithPhotoAndFeatureSaved_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersons_args = function(args) {
  this.beans = null;
  this.token = null;
  if (args) {
    if (args.beans !== undefined && args.beans !== null) {
      this.beans = Thrift.copyList(args.beans, [ttypes.PersonBean]);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_savePersons_args.prototype = {};
IFaceLog_savePersons_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size456 = 0;
        var _rtmp3460;
        this.beans = [];
        var _etype459 = 0;
        _rtmp3460 = input.readListBegin();
        _etype459 = _rtmp3460.etype;
        _size456 = _rtmp3460.size;
        for (var _i461 = 0; _i461 < _size456; ++_i461)
        {
          var elem462 = null;
          elem462 = new ttypes.PersonBean();
          elem462.read(input);
          this.beans.push(elem462);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersons_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersons_args');
  if (this.beans !== null && this.beans !== undefined) {
    output.writeFieldBegin('beans', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.beans.length);
    for (var iter463 in this.beans)
    {
      if (this.beans.hasOwnProperty(iter463))
      {
        iter463 = this.beans[iter463];
        iter463.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersons_result = function(args) {
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePersons_result.prototype = {};
IFaceLog_savePersons_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersons_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersons_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonsWithPhoto_args = function(args) {
  this.persons = null;
  this.token = null;
  if (args) {
    if (args.persons !== undefined && args.persons !== null) {
      this.persons = Thrift.copyMap(args.persons, [ttypes.PersonBean]);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_savePersonsWithPhoto_args.prototype = {};
IFaceLog_savePersonsWithPhoto_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size464 = 0;
        var _rtmp3468;
        this.persons = {};
        var _ktype465 = 0;
        var _vtype466 = 0;
        _rtmp3468 = input.readMapBegin();
        _ktype465 = _rtmp3468.ktype;
        _vtype466 = _rtmp3468.vtype;
        _size464 = _rtmp3468.size;
        for (var _i469 = 0; _i469 < _size464; ++_i469)
        {
          var key470 = null;
          var val471 = null;
          key470 = input.readBinary();
          val471 = new ttypes.PersonBean();
          val471.read(input);
          this.persons[key470] = val471;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonsWithPhoto_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonsWithPhoto_args');
  if (this.persons !== null && this.persons !== undefined) {
    output.writeFieldBegin('persons', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.persons));
    for (var kiter472 in this.persons)
    {
      if (this.persons.hasOwnProperty(kiter472))
      {
        var viter473 = this.persons[kiter472];
        output.writeBinary(kiter472);
        viter473.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonsWithPhoto_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePersonsWithPhoto_result.prototype = {};
IFaceLog_savePersonsWithPhoto_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonsWithPhoto_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonsWithPhoto_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_saveServiceConfig_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_saveServiceConfig_args.prototype = {};
IFaceLog_saveServiceConfig_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_saveServiceConfig_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_saveServiceConfig_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_saveServiceConfig_result = function(args) {
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_saveServiceConfig_result.prototype = {};
IFaceLog_saveServiceConfig_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_saveServiceConfig_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_saveServiceConfig_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_setPersonExpiryDate_args = function(args) {
  this.personId = null;
  this.expiryDate = null;
  this.token = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
    if (args.expiryDate !== undefined && args.expiryDate !== null) {
      this.expiryDate = args.expiryDate;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field expiryDate is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_setPersonExpiryDate_args.prototype = {};
IFaceLog_setPersonExpiryDate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.expiryDate = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_setPersonExpiryDate_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_setPersonExpiryDate_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.expiryDate !== null && this.expiryDate !== undefined) {
    output.writeFieldBegin('expiryDate', Thrift.Type.I64, 2);
    output.writeI64(this.expiryDate);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_setPersonExpiryDate_result = function(args) {
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_setPersonExpiryDate_result.prototype = {};
IFaceLog_setPersonExpiryDate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_setPersonExpiryDate_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_setPersonExpiryDate_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_setPersonExpiryDateList_args = function(args) {
  this.personIdList = null;
  this.expiryDate = null;
  this.token = null;
  if (args) {
    if (args.personIdList !== undefined && args.personIdList !== null) {
      this.personIdList = Thrift.copyList(args.personIdList, [null]);
    }
    if (args.expiryDate !== undefined && args.expiryDate !== null) {
      this.expiryDate = args.expiryDate;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field expiryDate is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_setPersonExpiryDateList_args.prototype = {};
IFaceLog_setPersonExpiryDateList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size474 = 0;
        var _rtmp3478;
        this.personIdList = [];
        var _etype477 = 0;
        _rtmp3478 = input.readListBegin();
        _etype477 = _rtmp3478.etype;
        _size474 = _rtmp3478.size;
        for (var _i479 = 0; _i479 < _size474; ++_i479)
        {
          var elem480 = null;
          elem480 = input.readI32();
          this.personIdList.push(elem480);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.expiryDate = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_setPersonExpiryDateList_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_setPersonExpiryDateList_args');
  if (this.personIdList !== null && this.personIdList !== undefined) {
    output.writeFieldBegin('personIdList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.personIdList.length);
    for (var iter481 in this.personIdList)
    {
      if (this.personIdList.hasOwnProperty(iter481))
      {
        iter481 = this.personIdList[iter481];
        output.writeI32(iter481);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.expiryDate !== null && this.expiryDate !== undefined) {
    output.writeFieldBegin('expiryDate', Thrift.Type.I64, 2);
    output.writeI64(this.expiryDate);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_setPersonExpiryDateList_result = function(args) {
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_setPersonExpiryDateList_result.prototype = {};
IFaceLog_setPersonExpiryDateList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_setPersonExpiryDateList_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_setPersonExpiryDateList_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_setProperties_args = function(args) {
  this.config = null;
  this.token = null;
  if (args) {
    if (args.config !== undefined && args.config !== null) {
      this.config = Thrift.copyMap(args.config, [null]);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_setProperties_args.prototype = {};
IFaceLog_setProperties_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size482 = 0;
        var _rtmp3486;
        this.config = {};
        var _ktype483 = 0;
        var _vtype484 = 0;
        _rtmp3486 = input.readMapBegin();
        _ktype483 = _rtmp3486.ktype;
        _vtype484 = _rtmp3486.vtype;
        _size482 = _rtmp3486.size;
        for (var _i487 = 0; _i487 < _size482; ++_i487)
        {
          var key488 = null;
          var val489 = null;
          key488 = input.readString();
          val489 = input.readString();
          this.config[key488] = val489;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_setProperties_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_setProperties_args');
  if (this.config !== null && this.config !== undefined) {
    output.writeFieldBegin('config', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.config));
    for (var kiter490 in this.config)
    {
      if (this.config.hasOwnProperty(kiter490))
      {
        var viter491 = this.config[kiter490];
        output.writeString(kiter490);
        output.writeString(viter491);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_setProperties_result = function(args) {
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_setProperties_result.prototype = {};
IFaceLog_setProperties_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_setProperties_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_setProperties_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_setProperty_args = function(args) {
  this.key = null;
  this.value = null;
  this.token = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_setProperty_args.prototype = {};
IFaceLog_setProperty_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_setProperty_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_setProperty_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_setProperty_result = function(args) {
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_setProperty_result.prototype = {};
IFaceLog_setProperty_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_setProperty_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_setProperty_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_taskQueueOf_args = function(args) {
  this.task = null;
  this.token = null;
  if (args) {
    if (args.task !== undefined && args.task !== null) {
      this.task = args.task;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_taskQueueOf_args.prototype = {};
IFaceLog_taskQueueOf_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.task = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_taskQueueOf_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_taskQueueOf_args');
  if (this.task !== null && this.task !== undefined) {
    output.writeFieldBegin('task', Thrift.Type.STRING, 1);
    output.writeString(this.task);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_taskQueueOf_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_taskQueueOf_result.prototype = {};
IFaceLog_taskQueueOf_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_taskQueueOf_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_taskQueueOf_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_taskRegister_args = function(args) {
  this.task = null;
  this.token = null;
  if (args) {
    if (args.task !== undefined && args.task !== null) {
      this.task = args.task;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_taskRegister_args.prototype = {};
IFaceLog_taskRegister_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.task = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_taskRegister_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_taskRegister_args');
  if (this.task !== null && this.task !== undefined) {
    output.writeFieldBegin('task', Thrift.Type.STRING, 1);
    output.writeString(this.task);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_taskRegister_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_taskRegister_result.prototype = {};
IFaceLog_taskRegister_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_taskRegister_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_taskRegister_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_unbindBorder_args = function(args) {
  this.personGroupId = null;
  this.deviceGroupId = null;
  this.token = null;
  if (args) {
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    }
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_unbindBorder_args.prototype = {};
IFaceLog_unbindBorder_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_unbindBorder_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_unbindBorder_args');
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 2);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_unbindBorder_result = function(args) {
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_unbindBorder_result.prototype = {};
IFaceLog_unbindBorder_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_unbindBorder_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_unbindBorder_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_unregisterDevice_args = function(args) {
  this.deviceId = null;
  this.token = null;
  if (args) {
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceId is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_unregisterDevice_args.prototype = {};
IFaceLog_unregisterDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_unregisterDevice_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_unregisterDevice_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_unregisterDevice_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.ServiceSecurityException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_unregisterDevice_result.prototype = {};
IFaceLog_unregisterDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceSecurityException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_unregisterDevice_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_unregisterDevice_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_updateDevice_args = function(args) {
  this.deviceBean = null;
  this.token = null;
  if (args) {
    if (args.deviceBean !== undefined && args.deviceBean !== null) {
      this.deviceBean = new ttypes.DeviceBean(args.deviceBean);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_updateDevice_args.prototype = {};
IFaceLog_updateDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.deviceBean = new ttypes.DeviceBean();
        this.deviceBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_updateDevice_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_updateDevice_args');
  if (this.deviceBean !== null && this.deviceBean !== undefined) {
    output.writeFieldBegin('deviceBean', Thrift.Type.STRUCT, 1);
    this.deviceBean.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_updateDevice_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.DeviceBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_updateDevice_result.prototype = {};
IFaceLog_updateDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.DeviceBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_updateDevice_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_updateDevice_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_version_args = function(args) {
};
IFaceLog_version_args.prototype = {};
IFaceLog_version_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_version_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_version_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_version_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_version_result.prototype = {};
IFaceLog_version_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_version_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_version_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_versionInfo_args = function(args) {
};
IFaceLog_versionInfo_args.prototype = {};
IFaceLog_versionInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_versionInfo_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_versionInfo_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_versionInfo_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_versionInfo_result.prototype = {};
IFaceLog_versionInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size492 = 0;
        var _rtmp3496;
        this.success = {};
        var _ktype493 = 0;
        var _vtype494 = 0;
        _rtmp3496 = input.readMapBegin();
        _ktype493 = _rtmp3496.ktype;
        _vtype494 = _rtmp3496.vtype;
        _size492 = _rtmp3496.size;
        for (var _i497 = 0; _i497 < _size492; ++_i497)
        {
          var key498 = null;
          var val499 = null;
          key498 = input.readString();
          val499 = input.readString();
          this.success[key498] = val499;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_versionInfo_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_versionInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter500 in this.success)
    {
      if (this.success.hasOwnProperty(kiter500))
      {
        var viter501 = this.success[kiter500];
        output.writeString(kiter500);
        output.writeString(viter501);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLogClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
IFaceLogClient.prototype = {};
IFaceLogClient.prototype.seqid = function() { return this._seqid; };
IFaceLogClient.prototype.new_seqid = function() { return this._seqid += 1; };
IFaceLogClient.prototype.addFeature = function(feature, personId, faecBeans, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addFeature(feature, personId, faecBeans, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addFeature(feature, personId, faecBeans, token);
  }
};

IFaceLogClient.prototype.send_addFeature = function(feature, personId, faecBeans, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addFeature', Thrift.MessageType.CALL, this.seqid());
  var params = {
    feature: feature,
    personId: personId,
    faecBeans: faecBeans,
    token: token
  };
  var args = new IFaceLog_addFeature_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_addFeature = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_addFeature_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addFeature failed: unknown result');
};
IFaceLogClient.prototype.addFeatureMulti = function(feature, personId, faceInfo, deviceId, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addFeatureMulti(feature, personId, faceInfo, deviceId, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addFeatureMulti(feature, personId, faceInfo, deviceId, token);
  }
};

IFaceLogClient.prototype.send_addFeatureMulti = function(feature, personId, faceInfo, deviceId, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addFeatureMulti', Thrift.MessageType.CALL, this.seqid());
  var params = {
    feature: feature,
    personId: personId,
    faceInfo: faceInfo,
    deviceId: deviceId,
    token: token
  };
  var args = new IFaceLog_addFeatureMulti_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_addFeatureMulti = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_addFeatureMulti_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addFeatureMulti failed: unknown result');
};
IFaceLogClient.prototype.addImage = function(imageData, deviceId, faceBean, personId, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addImage(imageData, deviceId, faceBean, personId, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addImage(imageData, deviceId, faceBean, personId, token);
  }
};

IFaceLogClient.prototype.send_addImage = function(imageData, deviceId, faceBean, personId, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addImage', Thrift.MessageType.CALL, this.seqid());
  var params = {
    imageData: imageData,
    deviceId: deviceId,
    faceBean: faceBean,
    personId: personId,
    token: token
  };
  var args = new IFaceLog_addImage_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_addImage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_addImage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addImage failed: unknown result');
};
IFaceLogClient.prototype.addLog = function(bean, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addLog(bean, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addLog(bean, token);
  }
};

IFaceLogClient.prototype.send_addLog = function(bean, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addLog', Thrift.MessageType.CALL, this.seqid());
  var params = {
    bean: bean,
    token: token
  };
  var args = new IFaceLog_addLog_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_addLog = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_addLog_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  callback(null);
};
IFaceLogClient.prototype.addLogs = function(beans, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addLogs(beans, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addLogs(beans, token);
  }
};

IFaceLogClient.prototype.send_addLogs = function(beans, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addLogs', Thrift.MessageType.CALL, this.seqid());
  var params = {
    beans: beans,
    token: token
  };
  var args = new IFaceLog_addLogs_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_addLogs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_addLogs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  callback(null);
};
IFaceLogClient.prototype.addPermit = function(deviceGroup, personGroup, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addPermit(deviceGroup, personGroup, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addPermit(deviceGroup, personGroup, token);
  }
};

IFaceLogClient.prototype.send_addPermit = function(deviceGroup, personGroup, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addPermit', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceGroup: deviceGroup,
    personGroup: personGroup,
    token: token
  };
  var args = new IFaceLog_addPermit_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_addPermit = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_addPermit_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  callback(null);
};
IFaceLogClient.prototype.addPermitById = function(deviceGroupId, personGroupId, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addPermitById(deviceGroupId, personGroupId, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addPermitById(deviceGroupId, personGroupId, token);
  }
};

IFaceLogClient.prototype.send_addPermitById = function(deviceGroupId, personGroupId, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addPermitById', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceGroupId: deviceGroupId,
    personGroupId: personGroupId,
    token: token
  };
  var args = new IFaceLog_addPermitById_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_addPermitById = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_addPermitById_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  callback(null);
};
IFaceLogClient.prototype.applyAckChannel = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_applyAckChannel(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_applyAckChannel(token);
  }
};

IFaceLogClient.prototype.send_applyAckChannel = function(token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('applyAckChannel', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token
  };
  var args = new IFaceLog_applyAckChannel_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_applyAckChannel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_applyAckChannel_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('applyAckChannel failed: unknown result');
};
IFaceLogClient.prototype.applyAckChannelWithDuration = function(token, duration, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_applyAckChannelWithDuration(token, duration);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_applyAckChannelWithDuration(token, duration);
  }
};

IFaceLogClient.prototype.send_applyAckChannelWithDuration = function(token, duration) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('applyAckChannelWithDuration', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token,
    duration: duration
  };
  var args = new IFaceLog_applyAckChannelWithDuration_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_applyAckChannelWithDuration = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_applyAckChannelWithDuration_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('applyAckChannelWithDuration failed: unknown result');
};
IFaceLogClient.prototype.applyCmdSn = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_applyCmdSn(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_applyCmdSn(token);
  }
};

IFaceLogClient.prototype.send_applyCmdSn = function(token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('applyCmdSn', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token
  };
  var args = new IFaceLog_applyCmdSn_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_applyCmdSn = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_applyCmdSn_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('applyCmdSn failed: unknown result');
};
IFaceLogClient.prototype.applyPersonToken = function(personId, password, isMd5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_applyPersonToken(personId, password, isMd5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_applyPersonToken(personId, password, isMd5);
  }
};

IFaceLogClient.prototype.send_applyPersonToken = function(personId, password, isMd5) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('applyPersonToken', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId,
    password: password,
    isMd5: isMd5
  };
  var args = new IFaceLog_applyPersonToken_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_applyPersonToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_applyPersonToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('applyPersonToken failed: unknown result');
};
IFaceLogClient.prototype.applyRootToken = function(password, isMd5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_applyRootToken(password, isMd5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_applyRootToken(password, isMd5);
  }
};

IFaceLogClient.prototype.send_applyRootToken = function(password, isMd5) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('applyRootToken', Thrift.MessageType.CALL, this.seqid());
  var params = {
    password: password,
    isMd5: isMd5
  };
  var args = new IFaceLog_applyRootToken_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_applyRootToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_applyRootToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('applyRootToken failed: unknown result');
};
IFaceLogClient.prototype.bindBorder = function(personGroupId, deviceGroupId, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_bindBorder(personGroupId, deviceGroupId, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_bindBorder(personGroupId, deviceGroupId, token);
  }
};

IFaceLogClient.prototype.send_bindBorder = function(personGroupId, deviceGroupId, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('bindBorder', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personGroupId: personGroupId,
    deviceGroupId: deviceGroupId,
    token: token
  };
  var args = new IFaceLog_bindBorder_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_bindBorder = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_bindBorder_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  callback(null);
};
IFaceLogClient.prototype.countDeviceByWhere = function(where, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_countDeviceByWhere(where);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_countDeviceByWhere(where);
  }
};

IFaceLogClient.prototype.send_countDeviceByWhere = function(where) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('countDeviceByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where
  };
  var args = new IFaceLog_countDeviceByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_countDeviceByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_countDeviceByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('countDeviceByWhere failed: unknown result');
};
IFaceLogClient.prototype.countDeviceGroupByWhere = function(where, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_countDeviceGroupByWhere(where);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_countDeviceGroupByWhere(where);
  }
};

IFaceLogClient.prototype.send_countDeviceGroupByWhere = function(where) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('countDeviceGroupByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where
  };
  var args = new IFaceLog_countDeviceGroupByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_countDeviceGroupByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_countDeviceGroupByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('countDeviceGroupByWhere failed: unknown result');
};
IFaceLogClient.prototype.countLogByWhere = function(where, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_countLogByWhere(where);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_countLogByWhere(where);
  }
};

IFaceLogClient.prototype.send_countLogByWhere = function(where) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('countLogByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where
  };
  var args = new IFaceLog_countLogByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_countLogByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_countLogByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('countLogByWhere failed: unknown result');
};
IFaceLogClient.prototype.countLogLightByVerifyTime = function(timestamp, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_countLogLightByVerifyTime(timestamp);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_countLogLightByVerifyTime(timestamp);
  }
};

IFaceLogClient.prototype.send_countLogLightByVerifyTime = function(timestamp) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('countLogLightByVerifyTime', Thrift.MessageType.CALL, this.seqid());
  var params = {
    timestamp: timestamp
  };
  var args = new IFaceLog_countLogLightByVerifyTime_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_countLogLightByVerifyTime = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_countLogLightByVerifyTime_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('countLogLightByVerifyTime failed: unknown result');
};
IFaceLogClient.prototype.countLogLightByWhere = function(where, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_countLogLightByWhere(where);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_countLogLightByWhere(where);
  }
};

IFaceLogClient.prototype.send_countLogLightByWhere = function(where) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('countLogLightByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where
  };
  var args = new IFaceLog_countLogLightByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_countLogLightByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_countLogLightByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('countLogLightByWhere failed: unknown result');
};
IFaceLogClient.prototype.countPersonByWhere = function(where, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_countPersonByWhere(where);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_countPersonByWhere(where);
  }
};

IFaceLogClient.prototype.send_countPersonByWhere = function(where) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('countPersonByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where
  };
  var args = new IFaceLog_countPersonByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_countPersonByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_countPersonByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('countPersonByWhere failed: unknown result');
};
IFaceLogClient.prototype.countPersonGroupByWhere = function(where, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_countPersonGroupByWhere(where);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_countPersonGroupByWhere(where);
  }
};

IFaceLogClient.prototype.send_countPersonGroupByWhere = function(where) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('countPersonGroupByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where
  };
  var args = new IFaceLog_countPersonGroupByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_countPersonGroupByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_countPersonGroupByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('countPersonGroupByWhere failed: unknown result');
};
IFaceLogClient.prototype.deleteAllFeaturesByPersonId = function(personId, deleteImage, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteAllFeaturesByPersonId(personId, deleteImage, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteAllFeaturesByPersonId(personId, deleteImage, token);
  }
};

IFaceLogClient.prototype.send_deleteAllFeaturesByPersonId = function(personId, deleteImage, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteAllFeaturesByPersonId', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId,
    deleteImage: deleteImage,
    token: token
  };
  var args = new IFaceLog_deleteAllFeaturesByPersonId_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_deleteAllFeaturesByPersonId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_deleteAllFeaturesByPersonId_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteAllFeaturesByPersonId failed: unknown result');
};
IFaceLogClient.prototype.deleteDeviceGroup = function(deviceGroupId, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteDeviceGroup(deviceGroupId, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteDeviceGroup(deviceGroupId, token);
  }
};

IFaceLogClient.prototype.send_deleteDeviceGroup = function(deviceGroupId, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteDeviceGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceGroupId: deviceGroupId,
    token: token
  };
  var args = new IFaceLog_deleteDeviceGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_deleteDeviceGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_deleteDeviceGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteDeviceGroup failed: unknown result');
};
IFaceLogClient.prototype.deleteFeature = function(featureMd5, deleteImage, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteFeature(featureMd5, deleteImage, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteFeature(featureMd5, deleteImage, token);
  }
};

IFaceLogClient.prototype.send_deleteFeature = function(featureMd5, deleteImage, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteFeature', Thrift.MessageType.CALL, this.seqid());
  var params = {
    featureMd5: featureMd5,
    deleteImage: deleteImage,
    token: token
  };
  var args = new IFaceLog_deleteFeature_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_deleteFeature = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_deleteFeature_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteFeature failed: unknown result');
};
IFaceLogClient.prototype.deleteImage = function(imageMd5, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteImage(imageMd5, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteImage(imageMd5, token);
  }
};

IFaceLogClient.prototype.send_deleteImage = function(imageMd5, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteImage', Thrift.MessageType.CALL, this.seqid());
  var params = {
    imageMd5: imageMd5,
    token: token
  };
  var args = new IFaceLog_deleteImage_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_deleteImage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_deleteImage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteImage failed: unknown result');
};
IFaceLogClient.prototype.deletePermit = function(deviceGroup, personGroup, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deletePermit(deviceGroup, personGroup, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deletePermit(deviceGroup, personGroup, token);
  }
};

IFaceLogClient.prototype.send_deletePermit = function(deviceGroup, personGroup, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deletePermit', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceGroup: deviceGroup,
    personGroup: personGroup,
    token: token
  };
  var args = new IFaceLog_deletePermit_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_deletePermit = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_deletePermit_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deletePermit failed: unknown result');
};
IFaceLogClient.prototype.deletePerson = function(personId, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deletePerson(personId, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deletePerson(personId, token);
  }
};

IFaceLogClient.prototype.send_deletePerson = function(personId, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deletePerson', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId,
    token: token
  };
  var args = new IFaceLog_deletePerson_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_deletePerson = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_deletePerson_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deletePerson failed: unknown result');
};
IFaceLogClient.prototype.deletePersonByPapersNum = function(papersNum, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deletePersonByPapersNum(papersNum, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deletePersonByPapersNum(papersNum, token);
  }
};

IFaceLogClient.prototype.send_deletePersonByPapersNum = function(papersNum, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deletePersonByPapersNum', Thrift.MessageType.CALL, this.seqid());
  var params = {
    papersNum: papersNum,
    token: token
  };
  var args = new IFaceLog_deletePersonByPapersNum_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_deletePersonByPapersNum = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_deletePersonByPapersNum_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deletePersonByPapersNum failed: unknown result');
};
IFaceLogClient.prototype.deletePersonGroup = function(personGroupId, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deletePersonGroup(personGroupId, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deletePersonGroup(personGroupId, token);
  }
};

IFaceLogClient.prototype.send_deletePersonGroup = function(personGroupId, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deletePersonGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personGroupId: personGroupId,
    token: token
  };
  var args = new IFaceLog_deletePersonGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_deletePersonGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_deletePersonGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deletePersonGroup failed: unknown result');
};
IFaceLogClient.prototype.deletePersons = function(personIdList, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deletePersons(personIdList, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deletePersons(personIdList, token);
  }
};

IFaceLogClient.prototype.send_deletePersons = function(personIdList, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deletePersons', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personIdList: personIdList,
    token: token
  };
  var args = new IFaceLog_deletePersons_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_deletePersons = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_deletePersons_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deletePersons failed: unknown result');
};
IFaceLogClient.prototype.deletePersonsByPapersNum = function(papersNumlist, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deletePersonsByPapersNum(papersNumlist, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deletePersonsByPapersNum(papersNumlist, token);
  }
};

IFaceLogClient.prototype.send_deletePersonsByPapersNum = function(papersNumlist, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deletePersonsByPapersNum', Thrift.MessageType.CALL, this.seqid());
  var params = {
    papersNumlist: papersNumlist,
    token: token
  };
  var args = new IFaceLog_deletePersonsByPapersNum_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_deletePersonsByPapersNum = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_deletePersonsByPapersNum_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deletePersonsByPapersNum failed: unknown result');
};
IFaceLogClient.prototype.disablePerson = function(personId, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_disablePerson(personId, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_disablePerson(personId, token);
  }
};

IFaceLogClient.prototype.send_disablePerson = function(personId, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('disablePerson', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId,
    token: token
  };
  var args = new IFaceLog_disablePerson_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_disablePerson = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_disablePerson_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  callback(null);
};
IFaceLogClient.prototype.disablePersonList = function(personIdList, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_disablePersonList(personIdList, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_disablePersonList(personIdList, token);
  }
};

IFaceLogClient.prototype.send_disablePersonList = function(personIdList, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('disablePersonList', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personIdList: personIdList,
    token: token
  };
  var args = new IFaceLog_disablePersonList_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_disablePersonList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_disablePersonList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  callback(null);
};
IFaceLogClient.prototype.existsDevice = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_existsDevice(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_existsDevice(id);
  }
};

IFaceLogClient.prototype.send_existsDevice = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('existsDevice', Thrift.MessageType.CALL, this.seqid());
  var params = {
    id: id
  };
  var args = new IFaceLog_existsDevice_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_existsDevice = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_existsDevice_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('existsDevice failed: unknown result');
};
IFaceLogClient.prototype.existsFeature = function(md5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_existsFeature(md5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_existsFeature(md5);
  }
};

IFaceLogClient.prototype.send_existsFeature = function(md5) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('existsFeature', Thrift.MessageType.CALL, this.seqid());
  var params = {
    md5: md5
  };
  var args = new IFaceLog_existsFeature_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_existsFeature = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_existsFeature_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('existsFeature failed: unknown result');
};
IFaceLogClient.prototype.existsImage = function(md5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_existsImage(md5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_existsImage(md5);
  }
};

IFaceLogClient.prototype.send_existsImage = function(md5) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('existsImage', Thrift.MessageType.CALL, this.seqid());
  var params = {
    md5: md5
  };
  var args = new IFaceLog_existsImage_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_existsImage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_existsImage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('existsImage failed: unknown result');
};
IFaceLogClient.prototype.existsPerson = function(persionId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_existsPerson(persionId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_existsPerson(persionId);
  }
};

IFaceLogClient.prototype.send_existsPerson = function(persionId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('existsPerson', Thrift.MessageType.CALL, this.seqid());
  var params = {
    persionId: persionId
  };
  var args = new IFaceLog_existsPerson_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_existsPerson = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_existsPerson_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('existsPerson failed: unknown result');
};
IFaceLogClient.prototype.getDevice = function(deviceId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDevice(deviceId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDevice(deviceId);
  }
};

IFaceLogClient.prototype.send_getDevice = function(deviceId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDevice', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceId: deviceId
  };
  var args = new IFaceLog_getDevice_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getDevice = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getDevice_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDevice failed: unknown result');
};
IFaceLogClient.prototype.getDeviceGroup = function(deviceGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDeviceGroup(deviceGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDeviceGroup(deviceGroupId);
  }
};

IFaceLogClient.prototype.send_getDeviceGroup = function(deviceGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDeviceGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceGroupId: deviceGroupId
  };
  var args = new IFaceLog_getDeviceGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getDeviceGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getDeviceGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDeviceGroup failed: unknown result');
};
IFaceLogClient.prototype.getDeviceGroups = function(groupIdList, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDeviceGroups(groupIdList);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDeviceGroups(groupIdList);
  }
};

IFaceLogClient.prototype.send_getDeviceGroups = function(groupIdList) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDeviceGroups', Thrift.MessageType.CALL, this.seqid());
  var params = {
    groupIdList: groupIdList
  };
  var args = new IFaceLog_getDeviceGroups_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getDeviceGroups = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getDeviceGroups_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDeviceGroups failed: unknown result');
};
IFaceLogClient.prototype.getDeviceGroupsBelongs = function(deviceId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDeviceGroupsBelongs(deviceId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDeviceGroupsBelongs(deviceId);
  }
};

IFaceLogClient.prototype.send_getDeviceGroupsBelongs = function(deviceId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDeviceGroupsBelongs', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceId: deviceId
  };
  var args = new IFaceLog_getDeviceGroupsBelongs_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getDeviceGroupsBelongs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getDeviceGroupsBelongs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDeviceGroupsBelongs failed: unknown result');
};
IFaceLogClient.prototype.getDeviceGroupsPermit = function(personGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDeviceGroupsPermit(personGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDeviceGroupsPermit(personGroupId);
  }
};

IFaceLogClient.prototype.send_getDeviceGroupsPermit = function(personGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDeviceGroupsPermit', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personGroupId: personGroupId
  };
  var args = new IFaceLog_getDeviceGroupsPermit_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getDeviceGroupsPermit = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getDeviceGroupsPermit_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDeviceGroupsPermit failed: unknown result');
};
IFaceLogClient.prototype.getDeviceGroupsPermittedBy = function(personGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDeviceGroupsPermittedBy(personGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDeviceGroupsPermittedBy(personGroupId);
  }
};

IFaceLogClient.prototype.send_getDeviceGroupsPermittedBy = function(personGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDeviceGroupsPermittedBy', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personGroupId: personGroupId
  };
  var args = new IFaceLog_getDeviceGroupsPermittedBy_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getDeviceGroupsPermittedBy = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getDeviceGroupsPermittedBy_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDeviceGroupsPermittedBy failed: unknown result');
};
IFaceLogClient.prototype.getDeviceIdOfFeature = function(featureMd5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDeviceIdOfFeature(featureMd5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDeviceIdOfFeature(featureMd5);
  }
};

IFaceLogClient.prototype.send_getDeviceIdOfFeature = function(featureMd5) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDeviceIdOfFeature', Thrift.MessageType.CALL, this.seqid());
  var params = {
    featureMd5: featureMd5
  };
  var args = new IFaceLog_getDeviceIdOfFeature_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getDeviceIdOfFeature = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getDeviceIdOfFeature_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDeviceIdOfFeature failed: unknown result');
};
IFaceLogClient.prototype.getDevices = function(idList, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDevices(idList);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDevices(idList);
  }
};

IFaceLogClient.prototype.send_getDevices = function(idList) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDevices', Thrift.MessageType.CALL, this.seqid());
  var params = {
    idList: idList
  };
  var args = new IFaceLog_getDevices_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getDevices = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getDevices_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDevices failed: unknown result');
};
IFaceLogClient.prototype.getDevicesOfGroup = function(deviceGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDevicesOfGroup(deviceGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDevicesOfGroup(deviceGroupId);
  }
};

IFaceLogClient.prototype.send_getDevicesOfGroup = function(deviceGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDevicesOfGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceGroupId: deviceGroupId
  };
  var args = new IFaceLog_getDevicesOfGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getDevicesOfGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getDevicesOfGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDevicesOfGroup failed: unknown result');
};
IFaceLogClient.prototype.getFeature = function(md5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getFeature(md5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getFeature(md5);
  }
};

IFaceLogClient.prototype.send_getFeature = function(md5) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFeature', Thrift.MessageType.CALL, this.seqid());
  var params = {
    md5: md5
  };
  var args = new IFaceLog_getFeature_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getFeature = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getFeature_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFeature failed: unknown result');
};
IFaceLogClient.prototype.getFeatureBeansByPersonId = function(personId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getFeatureBeansByPersonId(personId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getFeatureBeansByPersonId(personId);
  }
};

IFaceLogClient.prototype.send_getFeatureBeansByPersonId = function(personId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFeatureBeansByPersonId', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId
  };
  var args = new IFaceLog_getFeatureBeansByPersonId_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getFeatureBeansByPersonId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getFeatureBeansByPersonId_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFeatureBeansByPersonId failed: unknown result');
};
IFaceLogClient.prototype.getFeatureBytes = function(md5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getFeatureBytes(md5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getFeatureBytes(md5);
  }
};

IFaceLogClient.prototype.send_getFeatureBytes = function(md5) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFeatureBytes', Thrift.MessageType.CALL, this.seqid());
  var params = {
    md5: md5
  };
  var args = new IFaceLog_getFeatureBytes_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getFeatureBytes = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getFeatureBytes_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFeatureBytes failed: unknown result');
};
IFaceLogClient.prototype.getFeatures = function(md5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getFeatures(md5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getFeatures(md5);
  }
};

IFaceLogClient.prototype.send_getFeatures = function(md5) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFeatures', Thrift.MessageType.CALL, this.seqid());
  var params = {
    md5: md5
  };
  var args = new IFaceLog_getFeatures_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getFeatures = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getFeatures_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFeatures failed: unknown result');
};
IFaceLogClient.prototype.getFeaturesOfPerson = function(personId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getFeaturesOfPerson(personId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getFeaturesOfPerson(personId);
  }
};

IFaceLogClient.prototype.send_getFeaturesOfPerson = function(personId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFeaturesOfPerson', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId
  };
  var args = new IFaceLog_getFeaturesOfPerson_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getFeaturesOfPerson = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getFeaturesOfPerson_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFeaturesOfPerson failed: unknown result');
};
IFaceLogClient.prototype.getGroupPermit = function(deviceId, personGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getGroupPermit(deviceId, personGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getGroupPermit(deviceId, personGroupId);
  }
};

IFaceLogClient.prototype.send_getGroupPermit = function(deviceId, personGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getGroupPermit', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceId: deviceId,
    personGroupId: personGroupId
  };
  var args = new IFaceLog_getGroupPermit_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getGroupPermit = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getGroupPermit_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getGroupPermit failed: unknown result');
};
IFaceLogClient.prototype.getGroupPermits = function(deviceId, personGroupIdList, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getGroupPermits(deviceId, personGroupIdList);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getGroupPermits(deviceId, personGroupIdList);
  }
};

IFaceLogClient.prototype.send_getGroupPermits = function(deviceId, personGroupIdList) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getGroupPermits', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceId: deviceId,
    personGroupIdList: personGroupIdList
  };
  var args = new IFaceLog_getGroupPermits_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getGroupPermits = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getGroupPermits_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getGroupPermits failed: unknown result');
};
IFaceLogClient.prototype.getImage = function(imageMD5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getImage(imageMD5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getImage(imageMD5);
  }
};

IFaceLogClient.prototype.send_getImage = function(imageMD5) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getImage', Thrift.MessageType.CALL, this.seqid());
  var params = {
    imageMD5: imageMD5
  };
  var args = new IFaceLog_getImage_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getImage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getImage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getImage failed: unknown result');
};
IFaceLogClient.prototype.getImageBytes = function(imageMD5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getImageBytes(imageMD5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getImageBytes(imageMD5);
  }
};

IFaceLogClient.prototype.send_getImageBytes = function(imageMD5) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getImageBytes', Thrift.MessageType.CALL, this.seqid());
  var params = {
    imageMD5: imageMD5
  };
  var args = new IFaceLog_getImageBytes_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getImageBytes = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getImageBytes_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getImageBytes failed: unknown result');
};
IFaceLogClient.prototype.getImagesAssociatedByFeature = function(featureMd5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getImagesAssociatedByFeature(featureMd5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getImagesAssociatedByFeature(featureMd5);
  }
};

IFaceLogClient.prototype.send_getImagesAssociatedByFeature = function(featureMd5) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getImagesAssociatedByFeature', Thrift.MessageType.CALL, this.seqid());
  var params = {
    featureMd5: featureMd5
  };
  var args = new IFaceLog_getImagesAssociatedByFeature_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getImagesAssociatedByFeature = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getImagesAssociatedByFeature_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getImagesAssociatedByFeature failed: unknown result');
};
IFaceLogClient.prototype.getLogBeansByPersonId = function(personId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getLogBeansByPersonId(personId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getLogBeansByPersonId(personId);
  }
};

IFaceLogClient.prototype.send_getLogBeansByPersonId = function(personId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getLogBeansByPersonId', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId
  };
  var args = new IFaceLog_getLogBeansByPersonId_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getLogBeansByPersonId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getLogBeansByPersonId_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getLogBeansByPersonId failed: unknown result');
};
IFaceLogClient.prototype.getPerson = function(personId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPerson(personId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPerson(personId);
  }
};

IFaceLogClient.prototype.send_getPerson = function(personId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPerson', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId
  };
  var args = new IFaceLog_getPerson_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getPerson = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getPerson_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPerson failed: unknown result');
};
IFaceLogClient.prototype.getPersonByPapersNum = function(papersNum, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPersonByPapersNum(papersNum);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPersonByPapersNum(papersNum);
  }
};

IFaceLogClient.prototype.send_getPersonByPapersNum = function(papersNum) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPersonByPapersNum', Thrift.MessageType.CALL, this.seqid());
  var params = {
    papersNum: papersNum
  };
  var args = new IFaceLog_getPersonByPapersNum_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getPersonByPapersNum = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getPersonByPapersNum_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPersonByPapersNum failed: unknown result');
};
IFaceLogClient.prototype.getPersonGroup = function(personGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPersonGroup(personGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPersonGroup(personGroupId);
  }
};

IFaceLogClient.prototype.send_getPersonGroup = function(personGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPersonGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personGroupId: personGroupId
  };
  var args = new IFaceLog_getPersonGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getPersonGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getPersonGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPersonGroup failed: unknown result');
};
IFaceLogClient.prototype.getPersonGroups = function(groupIdList, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPersonGroups(groupIdList);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPersonGroups(groupIdList);
  }
};

IFaceLogClient.prototype.send_getPersonGroups = function(groupIdList) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPersonGroups', Thrift.MessageType.CALL, this.seqid());
  var params = {
    groupIdList: groupIdList
  };
  var args = new IFaceLog_getPersonGroups_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getPersonGroups = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getPersonGroups_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPersonGroups failed: unknown result');
};
IFaceLogClient.prototype.getPersonGroupsBelongs = function(personId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPersonGroupsBelongs(personId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPersonGroupsBelongs(personId);
  }
};

IFaceLogClient.prototype.send_getPersonGroupsBelongs = function(personId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPersonGroupsBelongs', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId
  };
  var args = new IFaceLog_getPersonGroupsBelongs_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getPersonGroupsBelongs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getPersonGroupsBelongs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPersonGroupsBelongs failed: unknown result');
};
IFaceLogClient.prototype.getPersonGroupsPermittedBy = function(deviceGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPersonGroupsPermittedBy(deviceGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPersonGroupsPermittedBy(deviceGroupId);
  }
};

IFaceLogClient.prototype.send_getPersonGroupsPermittedBy = function(deviceGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPersonGroupsPermittedBy', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceGroupId: deviceGroupId
  };
  var args = new IFaceLog_getPersonGroupsPermittedBy_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getPersonGroupsPermittedBy = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getPersonGroupsPermittedBy_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPersonGroupsPermittedBy failed: unknown result');
};
IFaceLogClient.prototype.getPersonPermit = function(deviceId, personId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPersonPermit(deviceId, personId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPersonPermit(deviceId, personId);
  }
};

IFaceLogClient.prototype.send_getPersonPermit = function(deviceId, personId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPersonPermit', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceId: deviceId,
    personId: personId
  };
  var args = new IFaceLog_getPersonPermit_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getPersonPermit = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getPersonPermit_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPersonPermit failed: unknown result');
};
IFaceLogClient.prototype.getPersonPermits = function(deviceId, personIdList, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPersonPermits(deviceId, personIdList);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPersonPermits(deviceId, personIdList);
  }
};

IFaceLogClient.prototype.send_getPersonPermits = function(deviceId, personIdList) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPersonPermits', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceId: deviceId,
    personIdList: personIdList
  };
  var args = new IFaceLog_getPersonPermits_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getPersonPermits = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getPersonPermits_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPersonPermits failed: unknown result');
};
IFaceLogClient.prototype.getPersons = function(idList, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPersons(idList);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPersons(idList);
  }
};

IFaceLogClient.prototype.send_getPersons = function(idList) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPersons', Thrift.MessageType.CALL, this.seqid());
  var params = {
    idList: idList
  };
  var args = new IFaceLog_getPersons_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getPersons = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getPersons_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPersons failed: unknown result');
};
IFaceLogClient.prototype.getPersonsOfGroup = function(personGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPersonsOfGroup(personGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPersonsOfGroup(personGroupId);
  }
};

IFaceLogClient.prototype.send_getPersonsOfGroup = function(personGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPersonsOfGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personGroupId: personGroupId
  };
  var args = new IFaceLog_getPersonsOfGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getPersonsOfGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getPersonsOfGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPersonsOfGroup failed: unknown result');
};
IFaceLogClient.prototype.getProperty = function(key, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getProperty(key, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getProperty(key, token);
  }
};

IFaceLogClient.prototype.send_getProperty = function(key, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getProperty', Thrift.MessageType.CALL, this.seqid());
  var params = {
    key: key,
    token: token
  };
  var args = new IFaceLog_getProperty_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getProperty = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getProperty_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getProperty failed: unknown result');
};
IFaceLogClient.prototype.getRedisParameters = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRedisParameters(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRedisParameters(token);
  }
};

IFaceLogClient.prototype.send_getRedisParameters = function(token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRedisParameters', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token
  };
  var args = new IFaceLog_getRedisParameters_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getRedisParameters = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getRedisParameters_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRedisParameters failed: unknown result');
};
IFaceLogClient.prototype.getServiceConfig = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getServiceConfig(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getServiceConfig(token);
  }
};

IFaceLogClient.prototype.send_getServiceConfig = function(token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getServiceConfig', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token
  };
  var args = new IFaceLog_getServiceConfig_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getServiceConfig = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getServiceConfig_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getServiceConfig failed: unknown result');
};
IFaceLogClient.prototype.getSubDeviceGroup = function(deviceGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSubDeviceGroup(deviceGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSubDeviceGroup(deviceGroupId);
  }
};

IFaceLogClient.prototype.send_getSubDeviceGroup = function(deviceGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSubDeviceGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceGroupId: deviceGroupId
  };
  var args = new IFaceLog_getSubDeviceGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getSubDeviceGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getSubDeviceGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSubDeviceGroup failed: unknown result');
};
IFaceLogClient.prototype.getSubPersonGroup = function(personGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSubPersonGroup(personGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSubPersonGroup(personGroupId);
  }
};

IFaceLogClient.prototype.send_getSubPersonGroup = function(personGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSubPersonGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personGroupId: personGroupId
  };
  var args = new IFaceLog_getSubPersonGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getSubPersonGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getSubPersonGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSubPersonGroup failed: unknown result');
};
IFaceLogClient.prototype.isDisable = function(personId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isDisable(personId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isDisable(personId);
  }
};

IFaceLogClient.prototype.send_isDisable = function(personId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isDisable', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId
  };
  var args = new IFaceLog_isDisable_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_isDisable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_isDisable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isDisable failed: unknown result');
};
IFaceLogClient.prototype.isLocal = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isLocal();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isLocal();
  }
};

IFaceLogClient.prototype.send_isLocal = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isLocal', Thrift.MessageType.CALL, this.seqid());
  var args = new IFaceLog_isLocal_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_isLocal = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_isLocal_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isLocal failed: unknown result');
};
IFaceLogClient.prototype.isValidAckChannel = function(ackChannel, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isValidAckChannel(ackChannel);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isValidAckChannel(ackChannel);
  }
};

IFaceLogClient.prototype.send_isValidAckChannel = function(ackChannel) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isValidAckChannel', Thrift.MessageType.CALL, this.seqid());
  var params = {
    ackChannel: ackChannel
  };
  var args = new IFaceLog_isValidAckChannel_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_isValidAckChannel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_isValidAckChannel_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isValidAckChannel failed: unknown result');
};
IFaceLogClient.prototype.isValidCmdSn = function(cmdSn, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isValidCmdSn(cmdSn);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isValidCmdSn(cmdSn);
  }
};

IFaceLogClient.prototype.send_isValidCmdSn = function(cmdSn) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isValidCmdSn', Thrift.MessageType.CALL, this.seqid());
  var params = {
    cmdSn: cmdSn
  };
  var args = new IFaceLog_isValidCmdSn_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_isValidCmdSn = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_isValidCmdSn_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isValidCmdSn failed: unknown result');
};
IFaceLogClient.prototype.isValidDeviceToken = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isValidDeviceToken(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isValidDeviceToken(token);
  }
};

IFaceLogClient.prototype.send_isValidDeviceToken = function(token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isValidDeviceToken', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token
  };
  var args = new IFaceLog_isValidDeviceToken_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_isValidDeviceToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_isValidDeviceToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isValidDeviceToken failed: unknown result');
};
IFaceLogClient.prototype.isValidPassword = function(userId, password, isMd5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isValidPassword(userId, password, isMd5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isValidPassword(userId, password, isMd5);
  }
};

IFaceLogClient.prototype.send_isValidPassword = function(userId, password, isMd5) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isValidPassword', Thrift.MessageType.CALL, this.seqid());
  var params = {
    userId: userId,
    password: password,
    isMd5: isMd5
  };
  var args = new IFaceLog_isValidPassword_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_isValidPassword = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_isValidPassword_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isValidPassword failed: unknown result');
};
IFaceLogClient.prototype.isValidPersonToken = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isValidPersonToken(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isValidPersonToken(token);
  }
};

IFaceLogClient.prototype.send_isValidPersonToken = function(token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isValidPersonToken', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token
  };
  var args = new IFaceLog_isValidPersonToken_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_isValidPersonToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_isValidPersonToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isValidPersonToken failed: unknown result');
};
IFaceLogClient.prototype.isValidRootToken = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isValidRootToken(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isValidRootToken(token);
  }
};

IFaceLogClient.prototype.send_isValidRootToken = function(token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isValidRootToken', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token
  };
  var args = new IFaceLog_isValidRootToken_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_isValidRootToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_isValidRootToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isValidRootToken failed: unknown result');
};
IFaceLogClient.prototype.listOfParentForDeviceGroup = function(deviceGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listOfParentForDeviceGroup(deviceGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listOfParentForDeviceGroup(deviceGroupId);
  }
};

IFaceLogClient.prototype.send_listOfParentForDeviceGroup = function(deviceGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listOfParentForDeviceGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceGroupId: deviceGroupId
  };
  var args = new IFaceLog_listOfParentForDeviceGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_listOfParentForDeviceGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_listOfParentForDeviceGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listOfParentForDeviceGroup failed: unknown result');
};
IFaceLogClient.prototype.listOfParentForPersonGroup = function(personGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listOfParentForPersonGroup(personGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listOfParentForPersonGroup(personGroupId);
  }
};

IFaceLogClient.prototype.send_listOfParentForPersonGroup = function(personGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listOfParentForPersonGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personGroupId: personGroupId
  };
  var args = new IFaceLog_listOfParentForPersonGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_listOfParentForPersonGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_listOfParentForPersonGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listOfParentForPersonGroup failed: unknown result');
};
IFaceLogClient.prototype.loadAllPerson = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadAllPerson();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadAllPerson();
  }
};

IFaceLogClient.prototype.send_loadAllPerson = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadAllPerson', Thrift.MessageType.CALL, this.seqid());
  var args = new IFaceLog_loadAllPerson_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadAllPerson = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadAllPerson_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadAllPerson failed: unknown result');
};
IFaceLogClient.prototype.loadDeviceByWhere = function(where, startRow, numRows, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadDeviceByWhere(where, startRow, numRows);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadDeviceByWhere(where, startRow, numRows);
  }
};

IFaceLogClient.prototype.send_loadDeviceByWhere = function(where, startRow, numRows) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadDeviceByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where,
    startRow: startRow,
    numRows: numRows
  };
  var args = new IFaceLog_loadDeviceByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadDeviceByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadDeviceByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadDeviceByWhere failed: unknown result');
};
IFaceLogClient.prototype.loadDeviceGroupByWhere = function(where, startRow, numRows, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadDeviceGroupByWhere(where, startRow, numRows);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadDeviceGroupByWhere(where, startRow, numRows);
  }
};

IFaceLogClient.prototype.send_loadDeviceGroupByWhere = function(where, startRow, numRows) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadDeviceGroupByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where,
    startRow: startRow,
    numRows: numRows
  };
  var args = new IFaceLog_loadDeviceGroupByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadDeviceGroupByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadDeviceGroupByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadDeviceGroupByWhere failed: unknown result');
};
IFaceLogClient.prototype.loadDeviceGroupIdByWhere = function(where, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadDeviceGroupIdByWhere(where);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadDeviceGroupIdByWhere(where);
  }
};

IFaceLogClient.prototype.send_loadDeviceGroupIdByWhere = function(where) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadDeviceGroupIdByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where
  };
  var args = new IFaceLog_loadDeviceGroupIdByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadDeviceGroupIdByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadDeviceGroupIdByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadDeviceGroupIdByWhere failed: unknown result');
};
IFaceLogClient.prototype.loadDeviceIdByWhere = function(where, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadDeviceIdByWhere(where);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadDeviceIdByWhere(where);
  }
};

IFaceLogClient.prototype.send_loadDeviceIdByWhere = function(where) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadDeviceIdByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where
  };
  var args = new IFaceLog_loadDeviceIdByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadDeviceIdByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadDeviceIdByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadDeviceIdByWhere failed: unknown result');
};
IFaceLogClient.prototype.loadFeatureMd5ByUpdate = function(timestamp, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadFeatureMd5ByUpdate(timestamp);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadFeatureMd5ByUpdate(timestamp);
  }
};

IFaceLogClient.prototype.send_loadFeatureMd5ByUpdate = function(timestamp) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadFeatureMd5ByUpdate', Thrift.MessageType.CALL, this.seqid());
  var params = {
    timestamp: timestamp
  };
  var args = new IFaceLog_loadFeatureMd5ByUpdate_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadFeatureMd5ByUpdate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadFeatureMd5ByUpdate_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadFeatureMd5ByUpdate failed: unknown result');
};
IFaceLogClient.prototype.loadLogByWhere = function(where, startRow, numRows, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadLogByWhere(where, startRow, numRows);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadLogByWhere(where, startRow, numRows);
  }
};

IFaceLogClient.prototype.send_loadLogByWhere = function(where, startRow, numRows) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadLogByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where,
    startRow: startRow,
    numRows: numRows
  };
  var args = new IFaceLog_loadLogByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadLogByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadLogByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadLogByWhere failed: unknown result');
};
IFaceLogClient.prototype.loadLogLightByVerifyTime = function(timestamp, startRow, numRows, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadLogLightByVerifyTime(timestamp, startRow, numRows);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadLogLightByVerifyTime(timestamp, startRow, numRows);
  }
};

IFaceLogClient.prototype.send_loadLogLightByVerifyTime = function(timestamp, startRow, numRows) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadLogLightByVerifyTime', Thrift.MessageType.CALL, this.seqid());
  var params = {
    timestamp: timestamp,
    startRow: startRow,
    numRows: numRows
  };
  var args = new IFaceLog_loadLogLightByVerifyTime_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadLogLightByVerifyTime = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadLogLightByVerifyTime_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadLogLightByVerifyTime failed: unknown result');
};
IFaceLogClient.prototype.loadLogLightByWhere = function(where, startRow, numRows, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadLogLightByWhere(where, startRow, numRows);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadLogLightByWhere(where, startRow, numRows);
  }
};

IFaceLogClient.prototype.send_loadLogLightByWhere = function(where, startRow, numRows) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadLogLightByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where,
    startRow: startRow,
    numRows: numRows
  };
  var args = new IFaceLog_loadLogLightByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadLogLightByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadLogLightByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadLogLightByWhere failed: unknown result');
};
IFaceLogClient.prototype.loadPermitByUpdate = function(timestamp, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadPermitByUpdate(timestamp);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadPermitByUpdate(timestamp);
  }
};

IFaceLogClient.prototype.send_loadPermitByUpdate = function(timestamp) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadPermitByUpdate', Thrift.MessageType.CALL, this.seqid());
  var params = {
    timestamp: timestamp
  };
  var args = new IFaceLog_loadPermitByUpdate_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadPermitByUpdate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadPermitByUpdate_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadPermitByUpdate failed: unknown result');
};
IFaceLogClient.prototype.loadPersonByWhere = function(where, startRow, numRows, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadPersonByWhere(where, startRow, numRows);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadPersonByWhere(where, startRow, numRows);
  }
};

IFaceLogClient.prototype.send_loadPersonByWhere = function(where, startRow, numRows) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadPersonByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where,
    startRow: startRow,
    numRows: numRows
  };
  var args = new IFaceLog_loadPersonByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadPersonByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadPersonByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadPersonByWhere failed: unknown result');
};
IFaceLogClient.prototype.loadPersonGroupByWhere = function(where, startRow, numRows, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadPersonGroupByWhere(where, startRow, numRows);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadPersonGroupByWhere(where, startRow, numRows);
  }
};

IFaceLogClient.prototype.send_loadPersonGroupByWhere = function(where, startRow, numRows) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadPersonGroupByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where,
    startRow: startRow,
    numRows: numRows
  };
  var args = new IFaceLog_loadPersonGroupByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadPersonGroupByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadPersonGroupByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadPersonGroupByWhere failed: unknown result');
};
IFaceLogClient.prototype.loadPersonGroupIdByWhere = function(where, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadPersonGroupIdByWhere(where);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadPersonGroupIdByWhere(where);
  }
};

IFaceLogClient.prototype.send_loadPersonGroupIdByWhere = function(where) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadPersonGroupIdByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where
  };
  var args = new IFaceLog_loadPersonGroupIdByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadPersonGroupIdByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadPersonGroupIdByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadPersonGroupIdByWhere failed: unknown result');
};
IFaceLogClient.prototype.loadPersonIdByUpdateTime = function(timestamp, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadPersonIdByUpdateTime(timestamp);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadPersonIdByUpdateTime(timestamp);
  }
};

IFaceLogClient.prototype.send_loadPersonIdByUpdateTime = function(timestamp) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadPersonIdByUpdateTime', Thrift.MessageType.CALL, this.seqid());
  var params = {
    timestamp: timestamp
  };
  var args = new IFaceLog_loadPersonIdByUpdateTime_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadPersonIdByUpdateTime = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadPersonIdByUpdateTime_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadPersonIdByUpdateTime failed: unknown result');
};
IFaceLogClient.prototype.loadPersonIdByWhere = function(where, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadPersonIdByWhere(where);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadPersonIdByWhere(where);
  }
};

IFaceLogClient.prototype.send_loadPersonIdByWhere = function(where) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadPersonIdByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where
  };
  var args = new IFaceLog_loadPersonIdByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadPersonIdByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadPersonIdByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadPersonIdByWhere failed: unknown result');
};
IFaceLogClient.prototype.loadUpdatedPersons = function(timestamp, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadUpdatedPersons(timestamp);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadUpdatedPersons(timestamp);
  }
};

IFaceLogClient.prototype.send_loadUpdatedPersons = function(timestamp) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadUpdatedPersons', Thrift.MessageType.CALL, this.seqid());
  var params = {
    timestamp: timestamp
  };
  var args = new IFaceLog_loadUpdatedPersons_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadUpdatedPersons = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadUpdatedPersons_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadUpdatedPersons failed: unknown result');
};
IFaceLogClient.prototype.offline = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_offline(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_offline(token);
  }
};

IFaceLogClient.prototype.send_offline = function(token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('offline', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token
  };
  var args = new IFaceLog_offline_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_offline = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_offline_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  callback(null);
};
IFaceLogClient.prototype.online = function(device, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_online(device);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_online(device);
  }
};

IFaceLogClient.prototype.send_online = function(device) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('online', Thrift.MessageType.CALL, this.seqid());
  var params = {
    device: device
  };
  var args = new IFaceLog_online_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_online = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_online_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('online failed: unknown result');
};
IFaceLogClient.prototype.registerDevice = function(newDevice, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_registerDevice(newDevice);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_registerDevice(newDevice);
  }
};

IFaceLogClient.prototype.send_registerDevice = function(newDevice) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('registerDevice', Thrift.MessageType.CALL, this.seqid());
  var params = {
    newDevice: newDevice
  };
  var args = new IFaceLog_registerDevice_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_registerDevice = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_registerDevice_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('registerDevice failed: unknown result');
};
IFaceLogClient.prototype.releasePersonToken = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_releasePersonToken(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_releasePersonToken(token);
  }
};

IFaceLogClient.prototype.send_releasePersonToken = function(token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('releasePersonToken', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token
  };
  var args = new IFaceLog_releasePersonToken_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_releasePersonToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_releasePersonToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  callback(null);
};
IFaceLogClient.prototype.releaseRootToken = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_releaseRootToken(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_releaseRootToken(token);
  }
};

IFaceLogClient.prototype.send_releaseRootToken = function(token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('releaseRootToken', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token
  };
  var args = new IFaceLog_releaseRootToken_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_releaseRootToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_releaseRootToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  callback(null);
};
IFaceLogClient.prototype.replaceFeature = function(personId, featureMd5, deleteOldFeatureImage, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_replaceFeature(personId, featureMd5, deleteOldFeatureImage, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_replaceFeature(personId, featureMd5, deleteOldFeatureImage, token);
  }
};

IFaceLogClient.prototype.send_replaceFeature = function(personId, featureMd5, deleteOldFeatureImage, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('replaceFeature', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId,
    featureMd5: featureMd5,
    deleteOldFeatureImage: deleteOldFeatureImage,
    token: token
  };
  var args = new IFaceLog_replaceFeature_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_replaceFeature = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_replaceFeature_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  callback(null);
};
IFaceLogClient.prototype.rootGroupOfDevice = function(deviceId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_rootGroupOfDevice(deviceId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_rootGroupOfDevice(deviceId);
  }
};

IFaceLogClient.prototype.send_rootGroupOfDevice = function(deviceId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('rootGroupOfDevice', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceId: deviceId
  };
  var args = new IFaceLog_rootGroupOfDevice_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_rootGroupOfDevice = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_rootGroupOfDevice_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('rootGroupOfDevice failed: unknown result');
};
IFaceLogClient.prototype.rootGroupOfPerson = function(personId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_rootGroupOfPerson(personId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_rootGroupOfPerson(personId);
  }
};

IFaceLogClient.prototype.send_rootGroupOfPerson = function(personId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('rootGroupOfPerson', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId
  };
  var args = new IFaceLog_rootGroupOfPerson_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_rootGroupOfPerson = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_rootGroupOfPerson_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('rootGroupOfPerson failed: unknown result');
};
IFaceLogClient.prototype.saveDevice = function(deviceBean, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_saveDevice(deviceBean, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_saveDevice(deviceBean, token);
  }
};

IFaceLogClient.prototype.send_saveDevice = function(deviceBean, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('saveDevice', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceBean: deviceBean,
    token: token
  };
  var args = new IFaceLog_saveDevice_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_saveDevice = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_saveDevice_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('saveDevice failed: unknown result');
};
IFaceLogClient.prototype.saveDeviceGroup = function(deviceGroupBean, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_saveDeviceGroup(deviceGroupBean, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_saveDeviceGroup(deviceGroupBean, token);
  }
};

IFaceLogClient.prototype.send_saveDeviceGroup = function(deviceGroupBean, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('saveDeviceGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceGroupBean: deviceGroupBean,
    token: token
  };
  var args = new IFaceLog_saveDeviceGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_saveDeviceGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_saveDeviceGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('saveDeviceGroup failed: unknown result');
};
IFaceLogClient.prototype.savePerson = function(bean, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_savePerson(bean, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_savePerson(bean, token);
  }
};

IFaceLogClient.prototype.send_savePerson = function(bean, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('savePerson', Thrift.MessageType.CALL, this.seqid());
  var params = {
    bean: bean,
    token: token
  };
  var args = new IFaceLog_savePerson_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_savePerson = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_savePerson_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('savePerson failed: unknown result');
};
IFaceLogClient.prototype.savePersonFull = function(bean, idPhoto, feature, featureImage, featureFaceBean, deviceId, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_savePersonFull(bean, idPhoto, feature, featureImage, featureFaceBean, deviceId, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_savePersonFull(bean, idPhoto, feature, featureImage, featureFaceBean, deviceId, token);
  }
};

IFaceLogClient.prototype.send_savePersonFull = function(bean, idPhoto, feature, featureImage, featureFaceBean, deviceId, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('savePersonFull', Thrift.MessageType.CALL, this.seqid());
  var params = {
    bean: bean,
    idPhoto: idPhoto,
    feature: feature,
    featureImage: featureImage,
    featureFaceBean: featureFaceBean,
    deviceId: deviceId,
    token: token
  };
  var args = new IFaceLog_savePersonFull_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_savePersonFull = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_savePersonFull_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('savePersonFull failed: unknown result');
};
IFaceLogClient.prototype.savePersonGroup = function(personGroupBean, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_savePersonGroup(personGroupBean, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_savePersonGroup(personGroupBean, token);
  }
};

IFaceLogClient.prototype.send_savePersonGroup = function(personGroupBean, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('savePersonGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personGroupBean: personGroupBean,
    token: token
  };
  var args = new IFaceLog_savePersonGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_savePersonGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_savePersonGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('savePersonGroup failed: unknown result');
};
IFaceLogClient.prototype.savePersonWithPhoto = function(bean, idPhoto, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_savePersonWithPhoto(bean, idPhoto, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_savePersonWithPhoto(bean, idPhoto, token);
  }
};

IFaceLogClient.prototype.send_savePersonWithPhoto = function(bean, idPhoto, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('savePersonWithPhoto', Thrift.MessageType.CALL, this.seqid());
  var params = {
    bean: bean,
    idPhoto: idPhoto,
    token: token
  };
  var args = new IFaceLog_savePersonWithPhoto_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_savePersonWithPhoto = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_savePersonWithPhoto_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('savePersonWithPhoto failed: unknown result');
};
IFaceLogClient.prototype.savePersonWithPhotoAndFeature = function(bean, idPhoto, featureBean, deviceId, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_savePersonWithPhotoAndFeature(bean, idPhoto, featureBean, deviceId, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_savePersonWithPhotoAndFeature(bean, idPhoto, featureBean, deviceId, token);
  }
};

IFaceLogClient.prototype.send_savePersonWithPhotoAndFeature = function(bean, idPhoto, featureBean, deviceId, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('savePersonWithPhotoAndFeature', Thrift.MessageType.CALL, this.seqid());
  var params = {
    bean: bean,
    idPhoto: idPhoto,
    featureBean: featureBean,
    deviceId: deviceId,
    token: token
  };
  var args = new IFaceLog_savePersonWithPhotoAndFeature_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_savePersonWithPhotoAndFeature = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_savePersonWithPhotoAndFeature_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('savePersonWithPhotoAndFeature failed: unknown result');
};
IFaceLogClient.prototype.savePersonWithPhotoAndFeatureMultiFaces = function(bean, idPhoto, feature, faceBeans, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_savePersonWithPhotoAndFeatureMultiFaces(bean, idPhoto, feature, faceBeans, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_savePersonWithPhotoAndFeatureMultiFaces(bean, idPhoto, feature, faceBeans, token);
  }
};

IFaceLogClient.prototype.send_savePersonWithPhotoAndFeatureMultiFaces = function(bean, idPhoto, feature, faceBeans, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('savePersonWithPhotoAndFeatureMultiFaces', Thrift.MessageType.CALL, this.seqid());
  var params = {
    bean: bean,
    idPhoto: idPhoto,
    feature: feature,
    faceBeans: faceBeans,
    token: token
  };
  var args = new IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_savePersonWithPhotoAndFeatureMultiFaces = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('savePersonWithPhotoAndFeatureMultiFaces failed: unknown result');
};
IFaceLogClient.prototype.savePersonWithPhotoAndFeatureMultiImage = function(bean, idPhoto, feature, faceInfo, deviceId, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_savePersonWithPhotoAndFeatureMultiImage(bean, idPhoto, feature, faceInfo, deviceId, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_savePersonWithPhotoAndFeatureMultiImage(bean, idPhoto, feature, faceInfo, deviceId, token);
  }
};

IFaceLogClient.prototype.send_savePersonWithPhotoAndFeatureMultiImage = function(bean, idPhoto, feature, faceInfo, deviceId, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('savePersonWithPhotoAndFeatureMultiImage', Thrift.MessageType.CALL, this.seqid());
  var params = {
    bean: bean,
    idPhoto: idPhoto,
    feature: feature,
    faceInfo: faceInfo,
    deviceId: deviceId,
    token: token
  };
  var args = new IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_savePersonWithPhotoAndFeatureMultiImage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('savePersonWithPhotoAndFeatureMultiImage failed: unknown result');
};
IFaceLogClient.prototype.savePersonWithPhotoAndFeatureSaved = function(bean, idPhotoMd5, featureMd5, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_savePersonWithPhotoAndFeatureSaved(bean, idPhotoMd5, featureMd5, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_savePersonWithPhotoAndFeatureSaved(bean, idPhotoMd5, featureMd5, token);
  }
};

IFaceLogClient.prototype.send_savePersonWithPhotoAndFeatureSaved = function(bean, idPhotoMd5, featureMd5, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('savePersonWithPhotoAndFeatureSaved', Thrift.MessageType.CALL, this.seqid());
  var params = {
    bean: bean,
    idPhotoMd5: idPhotoMd5,
    featureMd5: featureMd5,
    token: token
  };
  var args = new IFaceLog_savePersonWithPhotoAndFeatureSaved_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_savePersonWithPhotoAndFeatureSaved = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_savePersonWithPhotoAndFeatureSaved_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('savePersonWithPhotoAndFeatureSaved failed: unknown result');
};
IFaceLogClient.prototype.savePersons = function(beans, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_savePersons(beans, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_savePersons(beans, token);
  }
};

IFaceLogClient.prototype.send_savePersons = function(beans, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('savePersons', Thrift.MessageType.CALL, this.seqid());
  var params = {
    beans: beans,
    token: token
  };
  var args = new IFaceLog_savePersons_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_savePersons = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_savePersons_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  callback(null);
};
IFaceLogClient.prototype.savePersonsWithPhoto = function(persons, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_savePersonsWithPhoto(persons, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_savePersonsWithPhoto(persons, token);
  }
};

IFaceLogClient.prototype.send_savePersonsWithPhoto = function(persons, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('savePersonsWithPhoto', Thrift.MessageType.CALL, this.seqid());
  var params = {
    persons: persons,
    token: token
  };
  var args = new IFaceLog_savePersonsWithPhoto_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_savePersonsWithPhoto = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_savePersonsWithPhoto_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('savePersonsWithPhoto failed: unknown result');
};
IFaceLogClient.prototype.saveServiceConfig = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_saveServiceConfig(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_saveServiceConfig(token);
  }
};

IFaceLogClient.prototype.send_saveServiceConfig = function(token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('saveServiceConfig', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token
  };
  var args = new IFaceLog_saveServiceConfig_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_saveServiceConfig = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_saveServiceConfig_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  callback(null);
};
IFaceLogClient.prototype.setPersonExpiryDate = function(personId, expiryDate, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setPersonExpiryDate(personId, expiryDate, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setPersonExpiryDate(personId, expiryDate, token);
  }
};

IFaceLogClient.prototype.send_setPersonExpiryDate = function(personId, expiryDate, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setPersonExpiryDate', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId,
    expiryDate: expiryDate,
    token: token
  };
  var args = new IFaceLog_setPersonExpiryDate_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_setPersonExpiryDate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_setPersonExpiryDate_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  callback(null);
};
IFaceLogClient.prototype.setPersonExpiryDateList = function(personIdList, expiryDate, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setPersonExpiryDateList(personIdList, expiryDate, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setPersonExpiryDateList(personIdList, expiryDate, token);
  }
};

IFaceLogClient.prototype.send_setPersonExpiryDateList = function(personIdList, expiryDate, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setPersonExpiryDateList', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personIdList: personIdList,
    expiryDate: expiryDate,
    token: token
  };
  var args = new IFaceLog_setPersonExpiryDateList_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_setPersonExpiryDateList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_setPersonExpiryDateList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  callback(null);
};
IFaceLogClient.prototype.setProperties = function(config, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setProperties(config, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setProperties(config, token);
  }
};

IFaceLogClient.prototype.send_setProperties = function(config, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setProperties', Thrift.MessageType.CALL, this.seqid());
  var params = {
    config: config,
    token: token
  };
  var args = new IFaceLog_setProperties_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_setProperties = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_setProperties_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  callback(null);
};
IFaceLogClient.prototype.setProperty = function(key, value, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setProperty(key, value, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setProperty(key, value, token);
  }
};

IFaceLogClient.prototype.send_setProperty = function(key, value, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setProperty', Thrift.MessageType.CALL, this.seqid());
  var params = {
    key: key,
    value: value,
    token: token
  };
  var args = new IFaceLog_setProperty_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_setProperty = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_setProperty_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  callback(null);
};
IFaceLogClient.prototype.taskQueueOf = function(task, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_taskQueueOf(task, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_taskQueueOf(task, token);
  }
};

IFaceLogClient.prototype.send_taskQueueOf = function(task, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('taskQueueOf', Thrift.MessageType.CALL, this.seqid());
  var params = {
    task: task,
    token: token
  };
  var args = new IFaceLog_taskQueueOf_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_taskQueueOf = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_taskQueueOf_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('taskQueueOf failed: unknown result');
};
IFaceLogClient.prototype.taskRegister = function(task, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_taskRegister(task, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_taskRegister(task, token);
  }
};

IFaceLogClient.prototype.send_taskRegister = function(task, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('taskRegister', Thrift.MessageType.CALL, this.seqid());
  var params = {
    task: task,
    token: token
  };
  var args = new IFaceLog_taskRegister_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_taskRegister = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_taskRegister_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('taskRegister failed: unknown result');
};
IFaceLogClient.prototype.unbindBorder = function(personGroupId, deviceGroupId, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_unbindBorder(personGroupId, deviceGroupId, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_unbindBorder(personGroupId, deviceGroupId, token);
  }
};

IFaceLogClient.prototype.send_unbindBorder = function(personGroupId, deviceGroupId, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('unbindBorder', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personGroupId: personGroupId,
    deviceGroupId: deviceGroupId,
    token: token
  };
  var args = new IFaceLog_unbindBorder_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_unbindBorder = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_unbindBorder_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  callback(null);
};
IFaceLogClient.prototype.unregisterDevice = function(deviceId, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_unregisterDevice(deviceId, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_unregisterDevice(deviceId, token);
  }
};

IFaceLogClient.prototype.send_unregisterDevice = function(deviceId, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('unregisterDevice', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceId: deviceId,
    token: token
  };
  var args = new IFaceLog_unregisterDevice_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_unregisterDevice = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_unregisterDevice_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  callback(null);
};
IFaceLogClient.prototype.updateDevice = function(deviceBean, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateDevice(deviceBean, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateDevice(deviceBean, token);
  }
};

IFaceLogClient.prototype.send_updateDevice = function(deviceBean, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateDevice', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceBean: deviceBean,
    token: token
  };
  var args = new IFaceLog_updateDevice_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_updateDevice = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_updateDevice_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateDevice failed: unknown result');
};
IFaceLogClient.prototype.version = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_version();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_version();
  }
};

IFaceLogClient.prototype.send_version = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('version', Thrift.MessageType.CALL, this.seqid());
  var args = new IFaceLog_version_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_version = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_version_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('version failed: unknown result');
};
IFaceLogClient.prototype.versionInfo = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_versionInfo();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_versionInfo();
  }
};

IFaceLogClient.prototype.send_versionInfo = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('versionInfo', Thrift.MessageType.CALL, this.seqid());
  var args = new IFaceLog_versionInfo_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_versionInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_versionInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('versionInfo failed: unknown result');
};
var IFaceLogProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
IFaceLogProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
IFaceLogProcessor.prototype.process_addFeature = function(seqid, input, output) {
  var args = new IFaceLog_addFeature_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addFeature.length === 4) {
    Q.fcall(this._handler.addFeature.bind(this._handler), args.feature, args.personId, args.faecBeans, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_addFeature_result({success: result});
        output.writeMessageBegin("addFeature", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_addFeature_result(err);
          output.writeMessageBegin("addFeature", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addFeature", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addFeature(args.feature, args.personId, args.faecBeans, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_addFeature_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addFeature", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addFeature", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_addFeatureMulti = function(seqid, input, output) {
  var args = new IFaceLog_addFeatureMulti_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addFeatureMulti.length === 5) {
    Q.fcall(this._handler.addFeatureMulti.bind(this._handler), args.feature, args.personId, args.faceInfo, args.deviceId, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_addFeatureMulti_result({success: result});
        output.writeMessageBegin("addFeatureMulti", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_addFeatureMulti_result(err);
          output.writeMessageBegin("addFeatureMulti", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addFeatureMulti", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addFeatureMulti(args.feature, args.personId, args.faceInfo, args.deviceId, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_addFeatureMulti_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addFeatureMulti", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addFeatureMulti", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_addImage = function(seqid, input, output) {
  var args = new IFaceLog_addImage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addImage.length === 5) {
    Q.fcall(this._handler.addImage.bind(this._handler), args.imageData, args.deviceId, args.faceBean, args.personId, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_addImage_result({success: result});
        output.writeMessageBegin("addImage", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_addImage_result(err);
          output.writeMessageBegin("addImage", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addImage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addImage(args.imageData, args.deviceId, args.faceBean, args.personId, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_addImage_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addImage", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addImage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_addLog = function(seqid, input, output) {
  var args = new IFaceLog_addLog_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addLog.length === 2) {
    Q.fcall(this._handler.addLog.bind(this._handler), args.bean, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_addLog_result({success: result});
        output.writeMessageBegin("addLog", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_addLog_result(err);
          output.writeMessageBegin("addLog", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addLog", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addLog(args.bean, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_addLog_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addLog", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addLog", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_addLogs = function(seqid, input, output) {
  var args = new IFaceLog_addLogs_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addLogs.length === 2) {
    Q.fcall(this._handler.addLogs.bind(this._handler), args.beans, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_addLogs_result({success: result});
        output.writeMessageBegin("addLogs", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_addLogs_result(err);
          output.writeMessageBegin("addLogs", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addLogs", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addLogs(args.beans, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_addLogs_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addLogs", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addLogs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_addPermit = function(seqid, input, output) {
  var args = new IFaceLog_addPermit_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addPermit.length === 3) {
    Q.fcall(this._handler.addPermit.bind(this._handler), args.deviceGroup, args.personGroup, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_addPermit_result({success: result});
        output.writeMessageBegin("addPermit", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_addPermit_result(err);
          output.writeMessageBegin("addPermit", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addPermit", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addPermit(args.deviceGroup, args.personGroup, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_addPermit_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addPermit", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addPermit", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_addPermitById = function(seqid, input, output) {
  var args = new IFaceLog_addPermitById_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addPermitById.length === 3) {
    Q.fcall(this._handler.addPermitById.bind(this._handler), args.deviceGroupId, args.personGroupId, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_addPermitById_result({success: result});
        output.writeMessageBegin("addPermitById", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_addPermitById_result(err);
          output.writeMessageBegin("addPermitById", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addPermitById", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addPermitById(args.deviceGroupId, args.personGroupId, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_addPermitById_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addPermitById", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addPermitById", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_applyAckChannel = function(seqid, input, output) {
  var args = new IFaceLog_applyAckChannel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.applyAckChannel.length === 1) {
    Q.fcall(this._handler.applyAckChannel.bind(this._handler), args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_applyAckChannel_result({success: result});
        output.writeMessageBegin("applyAckChannel", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_applyAckChannel_result(err);
          output.writeMessageBegin("applyAckChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("applyAckChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.applyAckChannel(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_applyAckChannel_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("applyAckChannel", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("applyAckChannel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_applyAckChannelWithDuration = function(seqid, input, output) {
  var args = new IFaceLog_applyAckChannelWithDuration_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.applyAckChannelWithDuration.length === 2) {
    Q.fcall(this._handler.applyAckChannelWithDuration.bind(this._handler), args.token, args.duration)
      .then(function(result) {
        var result_obj = new IFaceLog_applyAckChannelWithDuration_result({success: result});
        output.writeMessageBegin("applyAckChannelWithDuration", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_applyAckChannelWithDuration_result(err);
          output.writeMessageBegin("applyAckChannelWithDuration", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("applyAckChannelWithDuration", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.applyAckChannelWithDuration(args.token, args.duration, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_applyAckChannelWithDuration_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("applyAckChannelWithDuration", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("applyAckChannelWithDuration", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_applyCmdSn = function(seqid, input, output) {
  var args = new IFaceLog_applyCmdSn_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.applyCmdSn.length === 1) {
    Q.fcall(this._handler.applyCmdSn.bind(this._handler), args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_applyCmdSn_result({success: result});
        output.writeMessageBegin("applyCmdSn", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_applyCmdSn_result(err);
          output.writeMessageBegin("applyCmdSn", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("applyCmdSn", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.applyCmdSn(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_applyCmdSn_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("applyCmdSn", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("applyCmdSn", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_applyPersonToken = function(seqid, input, output) {
  var args = new IFaceLog_applyPersonToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.applyPersonToken.length === 3) {
    Q.fcall(this._handler.applyPersonToken.bind(this._handler), args.personId, args.password, args.isMd5)
      .then(function(result) {
        var result_obj = new IFaceLog_applyPersonToken_result({success: result});
        output.writeMessageBegin("applyPersonToken", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_applyPersonToken_result(err);
          output.writeMessageBegin("applyPersonToken", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("applyPersonToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.applyPersonToken(args.personId, args.password, args.isMd5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_applyPersonToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("applyPersonToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("applyPersonToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_applyRootToken = function(seqid, input, output) {
  var args = new IFaceLog_applyRootToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.applyRootToken.length === 2) {
    Q.fcall(this._handler.applyRootToken.bind(this._handler), args.password, args.isMd5)
      .then(function(result) {
        var result_obj = new IFaceLog_applyRootToken_result({success: result});
        output.writeMessageBegin("applyRootToken", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_applyRootToken_result(err);
          output.writeMessageBegin("applyRootToken", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("applyRootToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.applyRootToken(args.password, args.isMd5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_applyRootToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("applyRootToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("applyRootToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_bindBorder = function(seqid, input, output) {
  var args = new IFaceLog_bindBorder_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.bindBorder.length === 3) {
    Q.fcall(this._handler.bindBorder.bind(this._handler), args.personGroupId, args.deviceGroupId, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_bindBorder_result({success: result});
        output.writeMessageBegin("bindBorder", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_bindBorder_result(err);
          output.writeMessageBegin("bindBorder", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("bindBorder", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.bindBorder(args.personGroupId, args.deviceGroupId, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_bindBorder_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("bindBorder", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("bindBorder", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_countDeviceByWhere = function(seqid, input, output) {
  var args = new IFaceLog_countDeviceByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.countDeviceByWhere.length === 1) {
    Q.fcall(this._handler.countDeviceByWhere.bind(this._handler), args.where)
      .then(function(result) {
        var result_obj = new IFaceLog_countDeviceByWhere_result({success: result});
        output.writeMessageBegin("countDeviceByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_countDeviceByWhere_result(err);
          output.writeMessageBegin("countDeviceByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countDeviceByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.countDeviceByWhere(args.where, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_countDeviceByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("countDeviceByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("countDeviceByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_countDeviceGroupByWhere = function(seqid, input, output) {
  var args = new IFaceLog_countDeviceGroupByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.countDeviceGroupByWhere.length === 1) {
    Q.fcall(this._handler.countDeviceGroupByWhere.bind(this._handler), args.where)
      .then(function(result) {
        var result_obj = new IFaceLog_countDeviceGroupByWhere_result({success: result});
        output.writeMessageBegin("countDeviceGroupByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_countDeviceGroupByWhere_result(err);
          output.writeMessageBegin("countDeviceGroupByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countDeviceGroupByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.countDeviceGroupByWhere(args.where, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_countDeviceGroupByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("countDeviceGroupByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("countDeviceGroupByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_countLogByWhere = function(seqid, input, output) {
  var args = new IFaceLog_countLogByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.countLogByWhere.length === 1) {
    Q.fcall(this._handler.countLogByWhere.bind(this._handler), args.where)
      .then(function(result) {
        var result_obj = new IFaceLog_countLogByWhere_result({success: result});
        output.writeMessageBegin("countLogByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_countLogByWhere_result(err);
          output.writeMessageBegin("countLogByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countLogByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.countLogByWhere(args.where, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_countLogByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("countLogByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("countLogByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_countLogLightByVerifyTime = function(seqid, input, output) {
  var args = new IFaceLog_countLogLightByVerifyTime_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.countLogLightByVerifyTime.length === 1) {
    Q.fcall(this._handler.countLogLightByVerifyTime.bind(this._handler), args.timestamp)
      .then(function(result) {
        var result_obj = new IFaceLog_countLogLightByVerifyTime_result({success: result});
        output.writeMessageBegin("countLogLightByVerifyTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_countLogLightByVerifyTime_result(err);
          output.writeMessageBegin("countLogLightByVerifyTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countLogLightByVerifyTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.countLogLightByVerifyTime(args.timestamp, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_countLogLightByVerifyTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("countLogLightByVerifyTime", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("countLogLightByVerifyTime", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_countLogLightByWhere = function(seqid, input, output) {
  var args = new IFaceLog_countLogLightByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.countLogLightByWhere.length === 1) {
    Q.fcall(this._handler.countLogLightByWhere.bind(this._handler), args.where)
      .then(function(result) {
        var result_obj = new IFaceLog_countLogLightByWhere_result({success: result});
        output.writeMessageBegin("countLogLightByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_countLogLightByWhere_result(err);
          output.writeMessageBegin("countLogLightByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countLogLightByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.countLogLightByWhere(args.where, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_countLogLightByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("countLogLightByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("countLogLightByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_countPersonByWhere = function(seqid, input, output) {
  var args = new IFaceLog_countPersonByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.countPersonByWhere.length === 1) {
    Q.fcall(this._handler.countPersonByWhere.bind(this._handler), args.where)
      .then(function(result) {
        var result_obj = new IFaceLog_countPersonByWhere_result({success: result});
        output.writeMessageBegin("countPersonByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_countPersonByWhere_result(err);
          output.writeMessageBegin("countPersonByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countPersonByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.countPersonByWhere(args.where, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_countPersonByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("countPersonByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("countPersonByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_countPersonGroupByWhere = function(seqid, input, output) {
  var args = new IFaceLog_countPersonGroupByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.countPersonGroupByWhere.length === 1) {
    Q.fcall(this._handler.countPersonGroupByWhere.bind(this._handler), args.where)
      .then(function(result) {
        var result_obj = new IFaceLog_countPersonGroupByWhere_result({success: result});
        output.writeMessageBegin("countPersonGroupByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_countPersonGroupByWhere_result(err);
          output.writeMessageBegin("countPersonGroupByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countPersonGroupByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.countPersonGroupByWhere(args.where, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_countPersonGroupByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("countPersonGroupByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("countPersonGroupByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_deleteAllFeaturesByPersonId = function(seqid, input, output) {
  var args = new IFaceLog_deleteAllFeaturesByPersonId_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteAllFeaturesByPersonId.length === 3) {
    Q.fcall(this._handler.deleteAllFeaturesByPersonId.bind(this._handler), args.personId, args.deleteImage, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_deleteAllFeaturesByPersonId_result({success: result});
        output.writeMessageBegin("deleteAllFeaturesByPersonId", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_deleteAllFeaturesByPersonId_result(err);
          output.writeMessageBegin("deleteAllFeaturesByPersonId", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deleteAllFeaturesByPersonId", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteAllFeaturesByPersonId(args.personId, args.deleteImage, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_deleteAllFeaturesByPersonId_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteAllFeaturesByPersonId", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteAllFeaturesByPersonId", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_deleteDeviceGroup = function(seqid, input, output) {
  var args = new IFaceLog_deleteDeviceGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteDeviceGroup.length === 2) {
    Q.fcall(this._handler.deleteDeviceGroup.bind(this._handler), args.deviceGroupId, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_deleteDeviceGroup_result({success: result});
        output.writeMessageBegin("deleteDeviceGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_deleteDeviceGroup_result(err);
          output.writeMessageBegin("deleteDeviceGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deleteDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteDeviceGroup(args.deviceGroupId, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_deleteDeviceGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteDeviceGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_deleteFeature = function(seqid, input, output) {
  var args = new IFaceLog_deleteFeature_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteFeature.length === 3) {
    Q.fcall(this._handler.deleteFeature.bind(this._handler), args.featureMd5, args.deleteImage, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_deleteFeature_result({success: result});
        output.writeMessageBegin("deleteFeature", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_deleteFeature_result(err);
          output.writeMessageBegin("deleteFeature", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deleteFeature", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteFeature(args.featureMd5, args.deleteImage, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_deleteFeature_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteFeature", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteFeature", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_deleteImage = function(seqid, input, output) {
  var args = new IFaceLog_deleteImage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteImage.length === 2) {
    Q.fcall(this._handler.deleteImage.bind(this._handler), args.imageMd5, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_deleteImage_result({success: result});
        output.writeMessageBegin("deleteImage", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_deleteImage_result(err);
          output.writeMessageBegin("deleteImage", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deleteImage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteImage(args.imageMd5, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_deleteImage_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteImage", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteImage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_deletePermit = function(seqid, input, output) {
  var args = new IFaceLog_deletePermit_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deletePermit.length === 3) {
    Q.fcall(this._handler.deletePermit.bind(this._handler), args.deviceGroup, args.personGroup, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_deletePermit_result({success: result});
        output.writeMessageBegin("deletePermit", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_deletePermit_result(err);
          output.writeMessageBegin("deletePermit", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deletePermit", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deletePermit(args.deviceGroup, args.personGroup, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_deletePermit_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deletePermit", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deletePermit", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_deletePerson = function(seqid, input, output) {
  var args = new IFaceLog_deletePerson_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deletePerson.length === 2) {
    Q.fcall(this._handler.deletePerson.bind(this._handler), args.personId, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_deletePerson_result({success: result});
        output.writeMessageBegin("deletePerson", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_deletePerson_result(err);
          output.writeMessageBegin("deletePerson", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deletePerson", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deletePerson(args.personId, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_deletePerson_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deletePerson", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deletePerson", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_deletePersonByPapersNum = function(seqid, input, output) {
  var args = new IFaceLog_deletePersonByPapersNum_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deletePersonByPapersNum.length === 2) {
    Q.fcall(this._handler.deletePersonByPapersNum.bind(this._handler), args.papersNum, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_deletePersonByPapersNum_result({success: result});
        output.writeMessageBegin("deletePersonByPapersNum", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_deletePersonByPapersNum_result(err);
          output.writeMessageBegin("deletePersonByPapersNum", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deletePersonByPapersNum", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deletePersonByPapersNum(args.papersNum, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_deletePersonByPapersNum_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deletePersonByPapersNum", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deletePersonByPapersNum", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_deletePersonGroup = function(seqid, input, output) {
  var args = new IFaceLog_deletePersonGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deletePersonGroup.length === 2) {
    Q.fcall(this._handler.deletePersonGroup.bind(this._handler), args.personGroupId, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_deletePersonGroup_result({success: result});
        output.writeMessageBegin("deletePersonGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_deletePersonGroup_result(err);
          output.writeMessageBegin("deletePersonGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deletePersonGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deletePersonGroup(args.personGroupId, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_deletePersonGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deletePersonGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deletePersonGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_deletePersons = function(seqid, input, output) {
  var args = new IFaceLog_deletePersons_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deletePersons.length === 2) {
    Q.fcall(this._handler.deletePersons.bind(this._handler), args.personIdList, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_deletePersons_result({success: result});
        output.writeMessageBegin("deletePersons", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_deletePersons_result(err);
          output.writeMessageBegin("deletePersons", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deletePersons", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deletePersons(args.personIdList, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_deletePersons_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deletePersons", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deletePersons", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_deletePersonsByPapersNum = function(seqid, input, output) {
  var args = new IFaceLog_deletePersonsByPapersNum_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deletePersonsByPapersNum.length === 2) {
    Q.fcall(this._handler.deletePersonsByPapersNum.bind(this._handler), args.papersNumlist, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_deletePersonsByPapersNum_result({success: result});
        output.writeMessageBegin("deletePersonsByPapersNum", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_deletePersonsByPapersNum_result(err);
          output.writeMessageBegin("deletePersonsByPapersNum", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deletePersonsByPapersNum", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deletePersonsByPapersNum(args.papersNumlist, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_deletePersonsByPapersNum_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deletePersonsByPapersNum", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deletePersonsByPapersNum", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_disablePerson = function(seqid, input, output) {
  var args = new IFaceLog_disablePerson_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.disablePerson.length === 2) {
    Q.fcall(this._handler.disablePerson.bind(this._handler), args.personId, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_disablePerson_result({success: result});
        output.writeMessageBegin("disablePerson", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_disablePerson_result(err);
          output.writeMessageBegin("disablePerson", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("disablePerson", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.disablePerson(args.personId, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_disablePerson_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("disablePerson", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("disablePerson", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_disablePersonList = function(seqid, input, output) {
  var args = new IFaceLog_disablePersonList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.disablePersonList.length === 2) {
    Q.fcall(this._handler.disablePersonList.bind(this._handler), args.personIdList, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_disablePersonList_result({success: result});
        output.writeMessageBegin("disablePersonList", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_disablePersonList_result(err);
          output.writeMessageBegin("disablePersonList", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("disablePersonList", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.disablePersonList(args.personIdList, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_disablePersonList_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("disablePersonList", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("disablePersonList", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_existsDevice = function(seqid, input, output) {
  var args = new IFaceLog_existsDevice_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.existsDevice.length === 1) {
    Q.fcall(this._handler.existsDevice.bind(this._handler), args.id)
      .then(function(result) {
        var result_obj = new IFaceLog_existsDevice_result({success: result});
        output.writeMessageBegin("existsDevice", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_existsDevice_result(err);
          output.writeMessageBegin("existsDevice", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("existsDevice", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.existsDevice(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_existsDevice_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("existsDevice", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("existsDevice", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_existsFeature = function(seqid, input, output) {
  var args = new IFaceLog_existsFeature_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.existsFeature.length === 1) {
    Q.fcall(this._handler.existsFeature.bind(this._handler), args.md5)
      .then(function(result) {
        var result_obj = new IFaceLog_existsFeature_result({success: result});
        output.writeMessageBegin("existsFeature", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_existsFeature_result(err);
          output.writeMessageBegin("existsFeature", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("existsFeature", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.existsFeature(args.md5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_existsFeature_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("existsFeature", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("existsFeature", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_existsImage = function(seqid, input, output) {
  var args = new IFaceLog_existsImage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.existsImage.length === 1) {
    Q.fcall(this._handler.existsImage.bind(this._handler), args.md5)
      .then(function(result) {
        var result_obj = new IFaceLog_existsImage_result({success: result});
        output.writeMessageBegin("existsImage", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_existsImage_result(err);
          output.writeMessageBegin("existsImage", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("existsImage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.existsImage(args.md5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_existsImage_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("existsImage", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("existsImage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_existsPerson = function(seqid, input, output) {
  var args = new IFaceLog_existsPerson_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.existsPerson.length === 1) {
    Q.fcall(this._handler.existsPerson.bind(this._handler), args.persionId)
      .then(function(result) {
        var result_obj = new IFaceLog_existsPerson_result({success: result});
        output.writeMessageBegin("existsPerson", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_existsPerson_result(err);
          output.writeMessageBegin("existsPerson", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("existsPerson", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.existsPerson(args.persionId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_existsPerson_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("existsPerson", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("existsPerson", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getDevice = function(seqid, input, output) {
  var args = new IFaceLog_getDevice_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDevice.length === 1) {
    Q.fcall(this._handler.getDevice.bind(this._handler), args.deviceId)
      .then(function(result) {
        var result_obj = new IFaceLog_getDevice_result({success: result});
        output.writeMessageBegin("getDevice", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getDevice_result(err);
          output.writeMessageBegin("getDevice", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDevice", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getDevice(args.deviceId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getDevice_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getDevice", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDevice", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getDeviceGroup = function(seqid, input, output) {
  var args = new IFaceLog_getDeviceGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDeviceGroup.length === 1) {
    Q.fcall(this._handler.getDeviceGroup.bind(this._handler), args.deviceGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_getDeviceGroup_result({success: result});
        output.writeMessageBegin("getDeviceGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getDeviceGroup_result(err);
          output.writeMessageBegin("getDeviceGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getDeviceGroup(args.deviceGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getDeviceGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getDeviceGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getDeviceGroups = function(seqid, input, output) {
  var args = new IFaceLog_getDeviceGroups_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDeviceGroups.length === 1) {
    Q.fcall(this._handler.getDeviceGroups.bind(this._handler), args.groupIdList)
      .then(function(result) {
        var result_obj = new IFaceLog_getDeviceGroups_result({success: result});
        output.writeMessageBegin("getDeviceGroups", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getDeviceGroups_result(err);
          output.writeMessageBegin("getDeviceGroups", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDeviceGroups", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getDeviceGroups(args.groupIdList, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getDeviceGroups_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getDeviceGroups", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDeviceGroups", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getDeviceGroupsBelongs = function(seqid, input, output) {
  var args = new IFaceLog_getDeviceGroupsBelongs_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDeviceGroupsBelongs.length === 1) {
    Q.fcall(this._handler.getDeviceGroupsBelongs.bind(this._handler), args.deviceId)
      .then(function(result) {
        var result_obj = new IFaceLog_getDeviceGroupsBelongs_result({success: result});
        output.writeMessageBegin("getDeviceGroupsBelongs", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getDeviceGroupsBelongs_result(err);
          output.writeMessageBegin("getDeviceGroupsBelongs", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDeviceGroupsBelongs", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getDeviceGroupsBelongs(args.deviceId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getDeviceGroupsBelongs_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getDeviceGroupsBelongs", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDeviceGroupsBelongs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getDeviceGroupsPermit = function(seqid, input, output) {
  var args = new IFaceLog_getDeviceGroupsPermit_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDeviceGroupsPermit.length === 1) {
    Q.fcall(this._handler.getDeviceGroupsPermit.bind(this._handler), args.personGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_getDeviceGroupsPermit_result({success: result});
        output.writeMessageBegin("getDeviceGroupsPermit", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getDeviceGroupsPermit_result(err);
          output.writeMessageBegin("getDeviceGroupsPermit", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDeviceGroupsPermit", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getDeviceGroupsPermit(args.personGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getDeviceGroupsPermit_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getDeviceGroupsPermit", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDeviceGroupsPermit", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getDeviceGroupsPermittedBy = function(seqid, input, output) {
  var args = new IFaceLog_getDeviceGroupsPermittedBy_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDeviceGroupsPermittedBy.length === 1) {
    Q.fcall(this._handler.getDeviceGroupsPermittedBy.bind(this._handler), args.personGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_getDeviceGroupsPermittedBy_result({success: result});
        output.writeMessageBegin("getDeviceGroupsPermittedBy", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getDeviceGroupsPermittedBy_result(err);
          output.writeMessageBegin("getDeviceGroupsPermittedBy", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDeviceGroupsPermittedBy", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getDeviceGroupsPermittedBy(args.personGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getDeviceGroupsPermittedBy_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getDeviceGroupsPermittedBy", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDeviceGroupsPermittedBy", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getDeviceIdOfFeature = function(seqid, input, output) {
  var args = new IFaceLog_getDeviceIdOfFeature_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDeviceIdOfFeature.length === 1) {
    Q.fcall(this._handler.getDeviceIdOfFeature.bind(this._handler), args.featureMd5)
      .then(function(result) {
        var result_obj = new IFaceLog_getDeviceIdOfFeature_result({success: result});
        output.writeMessageBegin("getDeviceIdOfFeature", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getDeviceIdOfFeature_result(err);
          output.writeMessageBegin("getDeviceIdOfFeature", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDeviceIdOfFeature", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getDeviceIdOfFeature(args.featureMd5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getDeviceIdOfFeature_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getDeviceIdOfFeature", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDeviceIdOfFeature", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getDevices = function(seqid, input, output) {
  var args = new IFaceLog_getDevices_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDevices.length === 1) {
    Q.fcall(this._handler.getDevices.bind(this._handler), args.idList)
      .then(function(result) {
        var result_obj = new IFaceLog_getDevices_result({success: result});
        output.writeMessageBegin("getDevices", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getDevices_result(err);
          output.writeMessageBegin("getDevices", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDevices", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getDevices(args.idList, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getDevices_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getDevices", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDevices", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getDevicesOfGroup = function(seqid, input, output) {
  var args = new IFaceLog_getDevicesOfGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDevicesOfGroup.length === 1) {
    Q.fcall(this._handler.getDevicesOfGroup.bind(this._handler), args.deviceGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_getDevicesOfGroup_result({success: result});
        output.writeMessageBegin("getDevicesOfGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getDevicesOfGroup_result(err);
          output.writeMessageBegin("getDevicesOfGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDevicesOfGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getDevicesOfGroup(args.deviceGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getDevicesOfGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getDevicesOfGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDevicesOfGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getFeature = function(seqid, input, output) {
  var args = new IFaceLog_getFeature_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getFeature.length === 1) {
    Q.fcall(this._handler.getFeature.bind(this._handler), args.md5)
      .then(function(result) {
        var result_obj = new IFaceLog_getFeature_result({success: result});
        output.writeMessageBegin("getFeature", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getFeature_result(err);
          output.writeMessageBegin("getFeature", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFeature", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getFeature(args.md5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getFeature_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getFeature", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getFeature", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getFeatureBeansByPersonId = function(seqid, input, output) {
  var args = new IFaceLog_getFeatureBeansByPersonId_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getFeatureBeansByPersonId.length === 1) {
    Q.fcall(this._handler.getFeatureBeansByPersonId.bind(this._handler), args.personId)
      .then(function(result) {
        var result_obj = new IFaceLog_getFeatureBeansByPersonId_result({success: result});
        output.writeMessageBegin("getFeatureBeansByPersonId", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getFeatureBeansByPersonId_result(err);
          output.writeMessageBegin("getFeatureBeansByPersonId", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFeatureBeansByPersonId", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getFeatureBeansByPersonId(args.personId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getFeatureBeansByPersonId_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getFeatureBeansByPersonId", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getFeatureBeansByPersonId", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getFeatureBytes = function(seqid, input, output) {
  var args = new IFaceLog_getFeatureBytes_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getFeatureBytes.length === 1) {
    Q.fcall(this._handler.getFeatureBytes.bind(this._handler), args.md5)
      .then(function(result) {
        var result_obj = new IFaceLog_getFeatureBytes_result({success: result});
        output.writeMessageBegin("getFeatureBytes", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getFeatureBytes_result(err);
          output.writeMessageBegin("getFeatureBytes", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFeatureBytes", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getFeatureBytes(args.md5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getFeatureBytes_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getFeatureBytes", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getFeatureBytes", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getFeatures = function(seqid, input, output) {
  var args = new IFaceLog_getFeatures_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getFeatures.length === 1) {
    Q.fcall(this._handler.getFeatures.bind(this._handler), args.md5)
      .then(function(result) {
        var result_obj = new IFaceLog_getFeatures_result({success: result});
        output.writeMessageBegin("getFeatures", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getFeatures_result(err);
          output.writeMessageBegin("getFeatures", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFeatures", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getFeatures(args.md5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getFeatures_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getFeatures", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getFeatures", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getFeaturesOfPerson = function(seqid, input, output) {
  var args = new IFaceLog_getFeaturesOfPerson_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getFeaturesOfPerson.length === 1) {
    Q.fcall(this._handler.getFeaturesOfPerson.bind(this._handler), args.personId)
      .then(function(result) {
        var result_obj = new IFaceLog_getFeaturesOfPerson_result({success: result});
        output.writeMessageBegin("getFeaturesOfPerson", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getFeaturesOfPerson_result(err);
          output.writeMessageBegin("getFeaturesOfPerson", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFeaturesOfPerson", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getFeaturesOfPerson(args.personId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getFeaturesOfPerson_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getFeaturesOfPerson", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getFeaturesOfPerson", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getGroupPermit = function(seqid, input, output) {
  var args = new IFaceLog_getGroupPermit_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getGroupPermit.length === 2) {
    Q.fcall(this._handler.getGroupPermit.bind(this._handler), args.deviceId, args.personGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_getGroupPermit_result({success: result});
        output.writeMessageBegin("getGroupPermit", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getGroupPermit_result(err);
          output.writeMessageBegin("getGroupPermit", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getGroupPermit", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getGroupPermit(args.deviceId, args.personGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getGroupPermit_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getGroupPermit", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getGroupPermit", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getGroupPermits = function(seqid, input, output) {
  var args = new IFaceLog_getGroupPermits_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getGroupPermits.length === 2) {
    Q.fcall(this._handler.getGroupPermits.bind(this._handler), args.deviceId, args.personGroupIdList)
      .then(function(result) {
        var result_obj = new IFaceLog_getGroupPermits_result({success: result});
        output.writeMessageBegin("getGroupPermits", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getGroupPermits_result(err);
          output.writeMessageBegin("getGroupPermits", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getGroupPermits", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getGroupPermits(args.deviceId, args.personGroupIdList, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getGroupPermits_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getGroupPermits", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getGroupPermits", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getImage = function(seqid, input, output) {
  var args = new IFaceLog_getImage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getImage.length === 1) {
    Q.fcall(this._handler.getImage.bind(this._handler), args.imageMD5)
      .then(function(result) {
        var result_obj = new IFaceLog_getImage_result({success: result});
        output.writeMessageBegin("getImage", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getImage_result(err);
          output.writeMessageBegin("getImage", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getImage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getImage(args.imageMD5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getImage_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getImage", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getImage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getImageBytes = function(seqid, input, output) {
  var args = new IFaceLog_getImageBytes_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getImageBytes.length === 1) {
    Q.fcall(this._handler.getImageBytes.bind(this._handler), args.imageMD5)
      .then(function(result) {
        var result_obj = new IFaceLog_getImageBytes_result({success: result});
        output.writeMessageBegin("getImageBytes", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getImageBytes_result(err);
          output.writeMessageBegin("getImageBytes", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getImageBytes", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getImageBytes(args.imageMD5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getImageBytes_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getImageBytes", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getImageBytes", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getImagesAssociatedByFeature = function(seqid, input, output) {
  var args = new IFaceLog_getImagesAssociatedByFeature_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getImagesAssociatedByFeature.length === 1) {
    Q.fcall(this._handler.getImagesAssociatedByFeature.bind(this._handler), args.featureMd5)
      .then(function(result) {
        var result_obj = new IFaceLog_getImagesAssociatedByFeature_result({success: result});
        output.writeMessageBegin("getImagesAssociatedByFeature", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getImagesAssociatedByFeature_result(err);
          output.writeMessageBegin("getImagesAssociatedByFeature", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getImagesAssociatedByFeature", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getImagesAssociatedByFeature(args.featureMd5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getImagesAssociatedByFeature_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getImagesAssociatedByFeature", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getImagesAssociatedByFeature", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getLogBeansByPersonId = function(seqid, input, output) {
  var args = new IFaceLog_getLogBeansByPersonId_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getLogBeansByPersonId.length === 1) {
    Q.fcall(this._handler.getLogBeansByPersonId.bind(this._handler), args.personId)
      .then(function(result) {
        var result_obj = new IFaceLog_getLogBeansByPersonId_result({success: result});
        output.writeMessageBegin("getLogBeansByPersonId", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getLogBeansByPersonId_result(err);
          output.writeMessageBegin("getLogBeansByPersonId", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getLogBeansByPersonId", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getLogBeansByPersonId(args.personId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getLogBeansByPersonId_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getLogBeansByPersonId", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getLogBeansByPersonId", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getPerson = function(seqid, input, output) {
  var args = new IFaceLog_getPerson_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPerson.length === 1) {
    Q.fcall(this._handler.getPerson.bind(this._handler), args.personId)
      .then(function(result) {
        var result_obj = new IFaceLog_getPerson_result({success: result});
        output.writeMessageBegin("getPerson", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getPerson_result(err);
          output.writeMessageBegin("getPerson", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPerson", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPerson(args.personId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getPerson_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getPerson", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPerson", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getPersonByPapersNum = function(seqid, input, output) {
  var args = new IFaceLog_getPersonByPapersNum_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPersonByPapersNum.length === 1) {
    Q.fcall(this._handler.getPersonByPapersNum.bind(this._handler), args.papersNum)
      .then(function(result) {
        var result_obj = new IFaceLog_getPersonByPapersNum_result({success: result});
        output.writeMessageBegin("getPersonByPapersNum", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getPersonByPapersNum_result(err);
          output.writeMessageBegin("getPersonByPapersNum", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPersonByPapersNum", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPersonByPapersNum(args.papersNum, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getPersonByPapersNum_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getPersonByPapersNum", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPersonByPapersNum", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getPersonGroup = function(seqid, input, output) {
  var args = new IFaceLog_getPersonGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPersonGroup.length === 1) {
    Q.fcall(this._handler.getPersonGroup.bind(this._handler), args.personGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_getPersonGroup_result({success: result});
        output.writeMessageBegin("getPersonGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getPersonGroup_result(err);
          output.writeMessageBegin("getPersonGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPersonGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPersonGroup(args.personGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getPersonGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getPersonGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPersonGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getPersonGroups = function(seqid, input, output) {
  var args = new IFaceLog_getPersonGroups_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPersonGroups.length === 1) {
    Q.fcall(this._handler.getPersonGroups.bind(this._handler), args.groupIdList)
      .then(function(result) {
        var result_obj = new IFaceLog_getPersonGroups_result({success: result});
        output.writeMessageBegin("getPersonGroups", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getPersonGroups_result(err);
          output.writeMessageBegin("getPersonGroups", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPersonGroups", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPersonGroups(args.groupIdList, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getPersonGroups_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getPersonGroups", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPersonGroups", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getPersonGroupsBelongs = function(seqid, input, output) {
  var args = new IFaceLog_getPersonGroupsBelongs_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPersonGroupsBelongs.length === 1) {
    Q.fcall(this._handler.getPersonGroupsBelongs.bind(this._handler), args.personId)
      .then(function(result) {
        var result_obj = new IFaceLog_getPersonGroupsBelongs_result({success: result});
        output.writeMessageBegin("getPersonGroupsBelongs", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getPersonGroupsBelongs_result(err);
          output.writeMessageBegin("getPersonGroupsBelongs", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPersonGroupsBelongs", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPersonGroupsBelongs(args.personId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getPersonGroupsBelongs_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getPersonGroupsBelongs", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPersonGroupsBelongs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getPersonGroupsPermittedBy = function(seqid, input, output) {
  var args = new IFaceLog_getPersonGroupsPermittedBy_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPersonGroupsPermittedBy.length === 1) {
    Q.fcall(this._handler.getPersonGroupsPermittedBy.bind(this._handler), args.deviceGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_getPersonGroupsPermittedBy_result({success: result});
        output.writeMessageBegin("getPersonGroupsPermittedBy", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getPersonGroupsPermittedBy_result(err);
          output.writeMessageBegin("getPersonGroupsPermittedBy", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPersonGroupsPermittedBy", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPersonGroupsPermittedBy(args.deviceGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getPersonGroupsPermittedBy_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getPersonGroupsPermittedBy", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPersonGroupsPermittedBy", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getPersonPermit = function(seqid, input, output) {
  var args = new IFaceLog_getPersonPermit_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPersonPermit.length === 2) {
    Q.fcall(this._handler.getPersonPermit.bind(this._handler), args.deviceId, args.personId)
      .then(function(result) {
        var result_obj = new IFaceLog_getPersonPermit_result({success: result});
        output.writeMessageBegin("getPersonPermit", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getPersonPermit_result(err);
          output.writeMessageBegin("getPersonPermit", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPersonPermit", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPersonPermit(args.deviceId, args.personId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getPersonPermit_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getPersonPermit", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPersonPermit", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getPersonPermits = function(seqid, input, output) {
  var args = new IFaceLog_getPersonPermits_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPersonPermits.length === 2) {
    Q.fcall(this._handler.getPersonPermits.bind(this._handler), args.deviceId, args.personIdList)
      .then(function(result) {
        var result_obj = new IFaceLog_getPersonPermits_result({success: result});
        output.writeMessageBegin("getPersonPermits", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getPersonPermits_result(err);
          output.writeMessageBegin("getPersonPermits", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPersonPermits", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPersonPermits(args.deviceId, args.personIdList, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getPersonPermits_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getPersonPermits", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPersonPermits", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getPersons = function(seqid, input, output) {
  var args = new IFaceLog_getPersons_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPersons.length === 1) {
    Q.fcall(this._handler.getPersons.bind(this._handler), args.idList)
      .then(function(result) {
        var result_obj = new IFaceLog_getPersons_result({success: result});
        output.writeMessageBegin("getPersons", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getPersons_result(err);
          output.writeMessageBegin("getPersons", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPersons", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPersons(args.idList, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getPersons_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getPersons", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPersons", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getPersonsOfGroup = function(seqid, input, output) {
  var args = new IFaceLog_getPersonsOfGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPersonsOfGroup.length === 1) {
    Q.fcall(this._handler.getPersonsOfGroup.bind(this._handler), args.personGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_getPersonsOfGroup_result({success: result});
        output.writeMessageBegin("getPersonsOfGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getPersonsOfGroup_result(err);
          output.writeMessageBegin("getPersonsOfGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPersonsOfGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPersonsOfGroup(args.personGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getPersonsOfGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getPersonsOfGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPersonsOfGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getProperty = function(seqid, input, output) {
  var args = new IFaceLog_getProperty_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getProperty.length === 2) {
    Q.fcall(this._handler.getProperty.bind(this._handler), args.key, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_getProperty_result({success: result});
        output.writeMessageBegin("getProperty", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getProperty_result(err);
          output.writeMessageBegin("getProperty", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getProperty", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getProperty(args.key, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getProperty_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getProperty", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getProperty", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getRedisParameters = function(seqid, input, output) {
  var args = new IFaceLog_getRedisParameters_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRedisParameters.length === 1) {
    Q.fcall(this._handler.getRedisParameters.bind(this._handler), args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_getRedisParameters_result({success: result});
        output.writeMessageBegin("getRedisParameters", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getRedisParameters_result(err);
          output.writeMessageBegin("getRedisParameters", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getRedisParameters", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getRedisParameters(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getRedisParameters_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getRedisParameters", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRedisParameters", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getServiceConfig = function(seqid, input, output) {
  var args = new IFaceLog_getServiceConfig_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getServiceConfig.length === 1) {
    Q.fcall(this._handler.getServiceConfig.bind(this._handler), args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_getServiceConfig_result({success: result});
        output.writeMessageBegin("getServiceConfig", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getServiceConfig_result(err);
          output.writeMessageBegin("getServiceConfig", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getServiceConfig", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getServiceConfig(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getServiceConfig_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getServiceConfig", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getServiceConfig", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getSubDeviceGroup = function(seqid, input, output) {
  var args = new IFaceLog_getSubDeviceGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSubDeviceGroup.length === 1) {
    Q.fcall(this._handler.getSubDeviceGroup.bind(this._handler), args.deviceGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_getSubDeviceGroup_result({success: result});
        output.writeMessageBegin("getSubDeviceGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getSubDeviceGroup_result(err);
          output.writeMessageBegin("getSubDeviceGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getSubDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getSubDeviceGroup(args.deviceGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getSubDeviceGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getSubDeviceGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getSubDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getSubPersonGroup = function(seqid, input, output) {
  var args = new IFaceLog_getSubPersonGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSubPersonGroup.length === 1) {
    Q.fcall(this._handler.getSubPersonGroup.bind(this._handler), args.personGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_getSubPersonGroup_result({success: result});
        output.writeMessageBegin("getSubPersonGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getSubPersonGroup_result(err);
          output.writeMessageBegin("getSubPersonGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getSubPersonGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getSubPersonGroup(args.personGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getSubPersonGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getSubPersonGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getSubPersonGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_isDisable = function(seqid, input, output) {
  var args = new IFaceLog_isDisable_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isDisable.length === 1) {
    Q.fcall(this._handler.isDisable.bind(this._handler), args.personId)
      .then(function(result) {
        var result_obj = new IFaceLog_isDisable_result({success: result});
        output.writeMessageBegin("isDisable", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_isDisable_result(err);
          output.writeMessageBegin("isDisable", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isDisable", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isDisable(args.personId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_isDisable_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isDisable", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isDisable", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_isLocal = function(seqid, input, output) {
  var args = new IFaceLog_isLocal_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isLocal.length === 0) {
    Q.fcall(this._handler.isLocal.bind(this._handler))
      .then(function(result) {
        var result_obj = new IFaceLog_isLocal_result({success: result});
        output.writeMessageBegin("isLocal", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_isLocal_result(err);
          output.writeMessageBegin("isLocal", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isLocal", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isLocal(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_isLocal_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isLocal", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isLocal", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_isValidAckChannel = function(seqid, input, output) {
  var args = new IFaceLog_isValidAckChannel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isValidAckChannel.length === 1) {
    Q.fcall(this._handler.isValidAckChannel.bind(this._handler), args.ackChannel)
      .then(function(result) {
        var result_obj = new IFaceLog_isValidAckChannel_result({success: result});
        output.writeMessageBegin("isValidAckChannel", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_isValidAckChannel_result(err);
          output.writeMessageBegin("isValidAckChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isValidAckChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isValidAckChannel(args.ackChannel, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_isValidAckChannel_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isValidAckChannel", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isValidAckChannel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_isValidCmdSn = function(seqid, input, output) {
  var args = new IFaceLog_isValidCmdSn_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isValidCmdSn.length === 1) {
    Q.fcall(this._handler.isValidCmdSn.bind(this._handler), args.cmdSn)
      .then(function(result) {
        var result_obj = new IFaceLog_isValidCmdSn_result({success: result});
        output.writeMessageBegin("isValidCmdSn", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_isValidCmdSn_result(err);
          output.writeMessageBegin("isValidCmdSn", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isValidCmdSn", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isValidCmdSn(args.cmdSn, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_isValidCmdSn_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isValidCmdSn", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isValidCmdSn", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_isValidDeviceToken = function(seqid, input, output) {
  var args = new IFaceLog_isValidDeviceToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isValidDeviceToken.length === 1) {
    Q.fcall(this._handler.isValidDeviceToken.bind(this._handler), args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_isValidDeviceToken_result({success: result});
        output.writeMessageBegin("isValidDeviceToken", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_isValidDeviceToken_result(err);
          output.writeMessageBegin("isValidDeviceToken", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isValidDeviceToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isValidDeviceToken(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_isValidDeviceToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isValidDeviceToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isValidDeviceToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_isValidPassword = function(seqid, input, output) {
  var args = new IFaceLog_isValidPassword_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isValidPassword.length === 3) {
    Q.fcall(this._handler.isValidPassword.bind(this._handler), args.userId, args.password, args.isMd5)
      .then(function(result) {
        var result_obj = new IFaceLog_isValidPassword_result({success: result});
        output.writeMessageBegin("isValidPassword", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_isValidPassword_result(err);
          output.writeMessageBegin("isValidPassword", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isValidPassword", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isValidPassword(args.userId, args.password, args.isMd5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_isValidPassword_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isValidPassword", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isValidPassword", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_isValidPersonToken = function(seqid, input, output) {
  var args = new IFaceLog_isValidPersonToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isValidPersonToken.length === 1) {
    Q.fcall(this._handler.isValidPersonToken.bind(this._handler), args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_isValidPersonToken_result({success: result});
        output.writeMessageBegin("isValidPersonToken", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_isValidPersonToken_result(err);
          output.writeMessageBegin("isValidPersonToken", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isValidPersonToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isValidPersonToken(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_isValidPersonToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isValidPersonToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isValidPersonToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_isValidRootToken = function(seqid, input, output) {
  var args = new IFaceLog_isValidRootToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isValidRootToken.length === 1) {
    Q.fcall(this._handler.isValidRootToken.bind(this._handler), args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_isValidRootToken_result({success: result});
        output.writeMessageBegin("isValidRootToken", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_isValidRootToken_result(err);
          output.writeMessageBegin("isValidRootToken", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isValidRootToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isValidRootToken(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_isValidRootToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isValidRootToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isValidRootToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_listOfParentForDeviceGroup = function(seqid, input, output) {
  var args = new IFaceLog_listOfParentForDeviceGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.listOfParentForDeviceGroup.length === 1) {
    Q.fcall(this._handler.listOfParentForDeviceGroup.bind(this._handler), args.deviceGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_listOfParentForDeviceGroup_result({success: result});
        output.writeMessageBegin("listOfParentForDeviceGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_listOfParentForDeviceGroup_result(err);
          output.writeMessageBegin("listOfParentForDeviceGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("listOfParentForDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.listOfParentForDeviceGroup(args.deviceGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_listOfParentForDeviceGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("listOfParentForDeviceGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("listOfParentForDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_listOfParentForPersonGroup = function(seqid, input, output) {
  var args = new IFaceLog_listOfParentForPersonGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.listOfParentForPersonGroup.length === 1) {
    Q.fcall(this._handler.listOfParentForPersonGroup.bind(this._handler), args.personGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_listOfParentForPersonGroup_result({success: result});
        output.writeMessageBegin("listOfParentForPersonGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_listOfParentForPersonGroup_result(err);
          output.writeMessageBegin("listOfParentForPersonGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("listOfParentForPersonGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.listOfParentForPersonGroup(args.personGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_listOfParentForPersonGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("listOfParentForPersonGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("listOfParentForPersonGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadAllPerson = function(seqid, input, output) {
  var args = new IFaceLog_loadAllPerson_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadAllPerson.length === 0) {
    Q.fcall(this._handler.loadAllPerson.bind(this._handler))
      .then(function(result) {
        var result_obj = new IFaceLog_loadAllPerson_result({success: result});
        output.writeMessageBegin("loadAllPerson", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadAllPerson_result(err);
          output.writeMessageBegin("loadAllPerson", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadAllPerson", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadAllPerson(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadAllPerson_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadAllPerson", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadAllPerson", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadDeviceByWhere = function(seqid, input, output) {
  var args = new IFaceLog_loadDeviceByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadDeviceByWhere.length === 3) {
    Q.fcall(this._handler.loadDeviceByWhere.bind(this._handler), args.where, args.startRow, args.numRows)
      .then(function(result) {
        var result_obj = new IFaceLog_loadDeviceByWhere_result({success: result});
        output.writeMessageBegin("loadDeviceByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadDeviceByWhere_result(err);
          output.writeMessageBegin("loadDeviceByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadDeviceByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadDeviceByWhere(args.where, args.startRow, args.numRows, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadDeviceByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadDeviceByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadDeviceByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadDeviceGroupByWhere = function(seqid, input, output) {
  var args = new IFaceLog_loadDeviceGroupByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadDeviceGroupByWhere.length === 3) {
    Q.fcall(this._handler.loadDeviceGroupByWhere.bind(this._handler), args.where, args.startRow, args.numRows)
      .then(function(result) {
        var result_obj = new IFaceLog_loadDeviceGroupByWhere_result({success: result});
        output.writeMessageBegin("loadDeviceGroupByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadDeviceGroupByWhere_result(err);
          output.writeMessageBegin("loadDeviceGroupByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadDeviceGroupByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadDeviceGroupByWhere(args.where, args.startRow, args.numRows, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadDeviceGroupByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadDeviceGroupByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadDeviceGroupByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadDeviceGroupIdByWhere = function(seqid, input, output) {
  var args = new IFaceLog_loadDeviceGroupIdByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadDeviceGroupIdByWhere.length === 1) {
    Q.fcall(this._handler.loadDeviceGroupIdByWhere.bind(this._handler), args.where)
      .then(function(result) {
        var result_obj = new IFaceLog_loadDeviceGroupIdByWhere_result({success: result});
        output.writeMessageBegin("loadDeviceGroupIdByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadDeviceGroupIdByWhere_result(err);
          output.writeMessageBegin("loadDeviceGroupIdByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadDeviceGroupIdByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadDeviceGroupIdByWhere(args.where, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadDeviceGroupIdByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadDeviceGroupIdByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadDeviceGroupIdByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadDeviceIdByWhere = function(seqid, input, output) {
  var args = new IFaceLog_loadDeviceIdByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadDeviceIdByWhere.length === 1) {
    Q.fcall(this._handler.loadDeviceIdByWhere.bind(this._handler), args.where)
      .then(function(result) {
        var result_obj = new IFaceLog_loadDeviceIdByWhere_result({success: result});
        output.writeMessageBegin("loadDeviceIdByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadDeviceIdByWhere_result(err);
          output.writeMessageBegin("loadDeviceIdByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadDeviceIdByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadDeviceIdByWhere(args.where, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadDeviceIdByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadDeviceIdByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadDeviceIdByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadFeatureMd5ByUpdate = function(seqid, input, output) {
  var args = new IFaceLog_loadFeatureMd5ByUpdate_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadFeatureMd5ByUpdate.length === 1) {
    Q.fcall(this._handler.loadFeatureMd5ByUpdate.bind(this._handler), args.timestamp)
      .then(function(result) {
        var result_obj = new IFaceLog_loadFeatureMd5ByUpdate_result({success: result});
        output.writeMessageBegin("loadFeatureMd5ByUpdate", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadFeatureMd5ByUpdate_result(err);
          output.writeMessageBegin("loadFeatureMd5ByUpdate", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadFeatureMd5ByUpdate", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadFeatureMd5ByUpdate(args.timestamp, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadFeatureMd5ByUpdate_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadFeatureMd5ByUpdate", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadFeatureMd5ByUpdate", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadLogByWhere = function(seqid, input, output) {
  var args = new IFaceLog_loadLogByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadLogByWhere.length === 3) {
    Q.fcall(this._handler.loadLogByWhere.bind(this._handler), args.where, args.startRow, args.numRows)
      .then(function(result) {
        var result_obj = new IFaceLog_loadLogByWhere_result({success: result});
        output.writeMessageBegin("loadLogByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadLogByWhere_result(err);
          output.writeMessageBegin("loadLogByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadLogByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadLogByWhere(args.where, args.startRow, args.numRows, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadLogByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadLogByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadLogByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadLogLightByVerifyTime = function(seqid, input, output) {
  var args = new IFaceLog_loadLogLightByVerifyTime_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadLogLightByVerifyTime.length === 3) {
    Q.fcall(this._handler.loadLogLightByVerifyTime.bind(this._handler), args.timestamp, args.startRow, args.numRows)
      .then(function(result) {
        var result_obj = new IFaceLog_loadLogLightByVerifyTime_result({success: result});
        output.writeMessageBegin("loadLogLightByVerifyTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadLogLightByVerifyTime_result(err);
          output.writeMessageBegin("loadLogLightByVerifyTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadLogLightByVerifyTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadLogLightByVerifyTime(args.timestamp, args.startRow, args.numRows, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadLogLightByVerifyTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadLogLightByVerifyTime", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadLogLightByVerifyTime", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadLogLightByWhere = function(seqid, input, output) {
  var args = new IFaceLog_loadLogLightByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadLogLightByWhere.length === 3) {
    Q.fcall(this._handler.loadLogLightByWhere.bind(this._handler), args.where, args.startRow, args.numRows)
      .then(function(result) {
        var result_obj = new IFaceLog_loadLogLightByWhere_result({success: result});
        output.writeMessageBegin("loadLogLightByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadLogLightByWhere_result(err);
          output.writeMessageBegin("loadLogLightByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadLogLightByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadLogLightByWhere(args.where, args.startRow, args.numRows, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadLogLightByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadLogLightByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadLogLightByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadPermitByUpdate = function(seqid, input, output) {
  var args = new IFaceLog_loadPermitByUpdate_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadPermitByUpdate.length === 1) {
    Q.fcall(this._handler.loadPermitByUpdate.bind(this._handler), args.timestamp)
      .then(function(result) {
        var result_obj = new IFaceLog_loadPermitByUpdate_result({success: result});
        output.writeMessageBegin("loadPermitByUpdate", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadPermitByUpdate_result(err);
          output.writeMessageBegin("loadPermitByUpdate", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadPermitByUpdate", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadPermitByUpdate(args.timestamp, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadPermitByUpdate_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadPermitByUpdate", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadPermitByUpdate", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadPersonByWhere = function(seqid, input, output) {
  var args = new IFaceLog_loadPersonByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadPersonByWhere.length === 3) {
    Q.fcall(this._handler.loadPersonByWhere.bind(this._handler), args.where, args.startRow, args.numRows)
      .then(function(result) {
        var result_obj = new IFaceLog_loadPersonByWhere_result({success: result});
        output.writeMessageBegin("loadPersonByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadPersonByWhere_result(err);
          output.writeMessageBegin("loadPersonByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadPersonByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadPersonByWhere(args.where, args.startRow, args.numRows, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadPersonByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadPersonByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadPersonByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadPersonGroupByWhere = function(seqid, input, output) {
  var args = new IFaceLog_loadPersonGroupByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadPersonGroupByWhere.length === 3) {
    Q.fcall(this._handler.loadPersonGroupByWhere.bind(this._handler), args.where, args.startRow, args.numRows)
      .then(function(result) {
        var result_obj = new IFaceLog_loadPersonGroupByWhere_result({success: result});
        output.writeMessageBegin("loadPersonGroupByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadPersonGroupByWhere_result(err);
          output.writeMessageBegin("loadPersonGroupByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadPersonGroupByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadPersonGroupByWhere(args.where, args.startRow, args.numRows, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadPersonGroupByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadPersonGroupByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadPersonGroupByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadPersonGroupIdByWhere = function(seqid, input, output) {
  var args = new IFaceLog_loadPersonGroupIdByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadPersonGroupIdByWhere.length === 1) {
    Q.fcall(this._handler.loadPersonGroupIdByWhere.bind(this._handler), args.where)
      .then(function(result) {
        var result_obj = new IFaceLog_loadPersonGroupIdByWhere_result({success: result});
        output.writeMessageBegin("loadPersonGroupIdByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadPersonGroupIdByWhere_result(err);
          output.writeMessageBegin("loadPersonGroupIdByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadPersonGroupIdByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadPersonGroupIdByWhere(args.where, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadPersonGroupIdByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadPersonGroupIdByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadPersonGroupIdByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadPersonIdByUpdateTime = function(seqid, input, output) {
  var args = new IFaceLog_loadPersonIdByUpdateTime_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadPersonIdByUpdateTime.length === 1) {
    Q.fcall(this._handler.loadPersonIdByUpdateTime.bind(this._handler), args.timestamp)
      .then(function(result) {
        var result_obj = new IFaceLog_loadPersonIdByUpdateTime_result({success: result});
        output.writeMessageBegin("loadPersonIdByUpdateTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadPersonIdByUpdateTime_result(err);
          output.writeMessageBegin("loadPersonIdByUpdateTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadPersonIdByUpdateTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadPersonIdByUpdateTime(args.timestamp, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadPersonIdByUpdateTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadPersonIdByUpdateTime", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadPersonIdByUpdateTime", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadPersonIdByWhere = function(seqid, input, output) {
  var args = new IFaceLog_loadPersonIdByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadPersonIdByWhere.length === 1) {
    Q.fcall(this._handler.loadPersonIdByWhere.bind(this._handler), args.where)
      .then(function(result) {
        var result_obj = new IFaceLog_loadPersonIdByWhere_result({success: result});
        output.writeMessageBegin("loadPersonIdByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadPersonIdByWhere_result(err);
          output.writeMessageBegin("loadPersonIdByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadPersonIdByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadPersonIdByWhere(args.where, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadPersonIdByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadPersonIdByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadPersonIdByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadUpdatedPersons = function(seqid, input, output) {
  var args = new IFaceLog_loadUpdatedPersons_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadUpdatedPersons.length === 1) {
    Q.fcall(this._handler.loadUpdatedPersons.bind(this._handler), args.timestamp)
      .then(function(result) {
        var result_obj = new IFaceLog_loadUpdatedPersons_result({success: result});
        output.writeMessageBegin("loadUpdatedPersons", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadUpdatedPersons_result(err);
          output.writeMessageBegin("loadUpdatedPersons", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadUpdatedPersons", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadUpdatedPersons(args.timestamp, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadUpdatedPersons_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadUpdatedPersons", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadUpdatedPersons", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_offline = function(seqid, input, output) {
  var args = new IFaceLog_offline_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.offline.length === 1) {
    Q.fcall(this._handler.offline.bind(this._handler), args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_offline_result({success: result});
        output.writeMessageBegin("offline", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_offline_result(err);
          output.writeMessageBegin("offline", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("offline", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.offline(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_offline_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("offline", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("offline", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_online = function(seqid, input, output) {
  var args = new IFaceLog_online_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.online.length === 1) {
    Q.fcall(this._handler.online.bind(this._handler), args.device)
      .then(function(result) {
        var result_obj = new IFaceLog_online_result({success: result});
        output.writeMessageBegin("online", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_online_result(err);
          output.writeMessageBegin("online", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("online", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.online(args.device, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_online_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("online", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("online", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_registerDevice = function(seqid, input, output) {
  var args = new IFaceLog_registerDevice_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.registerDevice.length === 1) {
    Q.fcall(this._handler.registerDevice.bind(this._handler), args.newDevice)
      .then(function(result) {
        var result_obj = new IFaceLog_registerDevice_result({success: result});
        output.writeMessageBegin("registerDevice", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_registerDevice_result(err);
          output.writeMessageBegin("registerDevice", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("registerDevice", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.registerDevice(args.newDevice, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_registerDevice_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("registerDevice", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("registerDevice", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_releasePersonToken = function(seqid, input, output) {
  var args = new IFaceLog_releasePersonToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.releasePersonToken.length === 1) {
    Q.fcall(this._handler.releasePersonToken.bind(this._handler), args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_releasePersonToken_result({success: result});
        output.writeMessageBegin("releasePersonToken", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_releasePersonToken_result(err);
          output.writeMessageBegin("releasePersonToken", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("releasePersonToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.releasePersonToken(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_releasePersonToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("releasePersonToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("releasePersonToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_releaseRootToken = function(seqid, input, output) {
  var args = new IFaceLog_releaseRootToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.releaseRootToken.length === 1) {
    Q.fcall(this._handler.releaseRootToken.bind(this._handler), args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_releaseRootToken_result({success: result});
        output.writeMessageBegin("releaseRootToken", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_releaseRootToken_result(err);
          output.writeMessageBegin("releaseRootToken", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("releaseRootToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.releaseRootToken(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_releaseRootToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("releaseRootToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("releaseRootToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_replaceFeature = function(seqid, input, output) {
  var args = new IFaceLog_replaceFeature_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.replaceFeature.length === 4) {
    Q.fcall(this._handler.replaceFeature.bind(this._handler), args.personId, args.featureMd5, args.deleteOldFeatureImage, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_replaceFeature_result({success: result});
        output.writeMessageBegin("replaceFeature", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_replaceFeature_result(err);
          output.writeMessageBegin("replaceFeature", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("replaceFeature", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.replaceFeature(args.personId, args.featureMd5, args.deleteOldFeatureImage, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_replaceFeature_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("replaceFeature", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("replaceFeature", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_rootGroupOfDevice = function(seqid, input, output) {
  var args = new IFaceLog_rootGroupOfDevice_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.rootGroupOfDevice.length === 1) {
    Q.fcall(this._handler.rootGroupOfDevice.bind(this._handler), args.deviceId)
      .then(function(result) {
        var result_obj = new IFaceLog_rootGroupOfDevice_result({success: result});
        output.writeMessageBegin("rootGroupOfDevice", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_rootGroupOfDevice_result(err);
          output.writeMessageBegin("rootGroupOfDevice", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("rootGroupOfDevice", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.rootGroupOfDevice(args.deviceId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_rootGroupOfDevice_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("rootGroupOfDevice", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("rootGroupOfDevice", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_rootGroupOfPerson = function(seqid, input, output) {
  var args = new IFaceLog_rootGroupOfPerson_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.rootGroupOfPerson.length === 1) {
    Q.fcall(this._handler.rootGroupOfPerson.bind(this._handler), args.personId)
      .then(function(result) {
        var result_obj = new IFaceLog_rootGroupOfPerson_result({success: result});
        output.writeMessageBegin("rootGroupOfPerson", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_rootGroupOfPerson_result(err);
          output.writeMessageBegin("rootGroupOfPerson", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("rootGroupOfPerson", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.rootGroupOfPerson(args.personId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_rootGroupOfPerson_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("rootGroupOfPerson", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("rootGroupOfPerson", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_saveDevice = function(seqid, input, output) {
  var args = new IFaceLog_saveDevice_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.saveDevice.length === 2) {
    Q.fcall(this._handler.saveDevice.bind(this._handler), args.deviceBean, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_saveDevice_result({success: result});
        output.writeMessageBegin("saveDevice", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_saveDevice_result(err);
          output.writeMessageBegin("saveDevice", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("saveDevice", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.saveDevice(args.deviceBean, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_saveDevice_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("saveDevice", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("saveDevice", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_saveDeviceGroup = function(seqid, input, output) {
  var args = new IFaceLog_saveDeviceGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.saveDeviceGroup.length === 2) {
    Q.fcall(this._handler.saveDeviceGroup.bind(this._handler), args.deviceGroupBean, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_saveDeviceGroup_result({success: result});
        output.writeMessageBegin("saveDeviceGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_saveDeviceGroup_result(err);
          output.writeMessageBegin("saveDeviceGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("saveDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.saveDeviceGroup(args.deviceGroupBean, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_saveDeviceGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("saveDeviceGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("saveDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_savePerson = function(seqid, input, output) {
  var args = new IFaceLog_savePerson_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.savePerson.length === 2) {
    Q.fcall(this._handler.savePerson.bind(this._handler), args.bean, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_savePerson_result({success: result});
        output.writeMessageBegin("savePerson", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_savePerson_result(err);
          output.writeMessageBegin("savePerson", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("savePerson", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.savePerson(args.bean, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_savePerson_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("savePerson", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("savePerson", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_savePersonFull = function(seqid, input, output) {
  var args = new IFaceLog_savePersonFull_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.savePersonFull.length === 7) {
    Q.fcall(this._handler.savePersonFull.bind(this._handler), args.bean, args.idPhoto, args.feature, args.featureImage, args.featureFaceBean, args.deviceId, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_savePersonFull_result({success: result});
        output.writeMessageBegin("savePersonFull", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_savePersonFull_result(err);
          output.writeMessageBegin("savePersonFull", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("savePersonFull", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.savePersonFull(args.bean, args.idPhoto, args.feature, args.featureImage, args.featureFaceBean, args.deviceId, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_savePersonFull_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("savePersonFull", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("savePersonFull", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_savePersonGroup = function(seqid, input, output) {
  var args = new IFaceLog_savePersonGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.savePersonGroup.length === 2) {
    Q.fcall(this._handler.savePersonGroup.bind(this._handler), args.personGroupBean, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_savePersonGroup_result({success: result});
        output.writeMessageBegin("savePersonGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_savePersonGroup_result(err);
          output.writeMessageBegin("savePersonGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("savePersonGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.savePersonGroup(args.personGroupBean, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_savePersonGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("savePersonGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("savePersonGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_savePersonWithPhoto = function(seqid, input, output) {
  var args = new IFaceLog_savePersonWithPhoto_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.savePersonWithPhoto.length === 3) {
    Q.fcall(this._handler.savePersonWithPhoto.bind(this._handler), args.bean, args.idPhoto, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_savePersonWithPhoto_result({success: result});
        output.writeMessageBegin("savePersonWithPhoto", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_savePersonWithPhoto_result(err);
          output.writeMessageBegin("savePersonWithPhoto", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("savePersonWithPhoto", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.savePersonWithPhoto(args.bean, args.idPhoto, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_savePersonWithPhoto_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("savePersonWithPhoto", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("savePersonWithPhoto", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_savePersonWithPhotoAndFeature = function(seqid, input, output) {
  var args = new IFaceLog_savePersonWithPhotoAndFeature_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.savePersonWithPhotoAndFeature.length === 5) {
    Q.fcall(this._handler.savePersonWithPhotoAndFeature.bind(this._handler), args.bean, args.idPhoto, args.featureBean, args.deviceId, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_savePersonWithPhotoAndFeature_result({success: result});
        output.writeMessageBegin("savePersonWithPhotoAndFeature", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_savePersonWithPhotoAndFeature_result(err);
          output.writeMessageBegin("savePersonWithPhotoAndFeature", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("savePersonWithPhotoAndFeature", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.savePersonWithPhotoAndFeature(args.bean, args.idPhoto, args.featureBean, args.deviceId, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_savePersonWithPhotoAndFeature_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("savePersonWithPhotoAndFeature", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("savePersonWithPhotoAndFeature", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_savePersonWithPhotoAndFeatureMultiFaces = function(seqid, input, output) {
  var args = new IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.savePersonWithPhotoAndFeatureMultiFaces.length === 5) {
    Q.fcall(this._handler.savePersonWithPhotoAndFeatureMultiFaces.bind(this._handler), args.bean, args.idPhoto, args.feature, args.faceBeans, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result({success: result});
        output.writeMessageBegin("savePersonWithPhotoAndFeatureMultiFaces", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result(err);
          output.writeMessageBegin("savePersonWithPhotoAndFeatureMultiFaces", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("savePersonWithPhotoAndFeatureMultiFaces", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.savePersonWithPhotoAndFeatureMultiFaces(args.bean, args.idPhoto, args.feature, args.faceBeans, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("savePersonWithPhotoAndFeatureMultiFaces", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("savePersonWithPhotoAndFeatureMultiFaces", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_savePersonWithPhotoAndFeatureMultiImage = function(seqid, input, output) {
  var args = new IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.savePersonWithPhotoAndFeatureMultiImage.length === 6) {
    Q.fcall(this._handler.savePersonWithPhotoAndFeatureMultiImage.bind(this._handler), args.bean, args.idPhoto, args.feature, args.faceInfo, args.deviceId, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result({success: result});
        output.writeMessageBegin("savePersonWithPhotoAndFeatureMultiImage", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result(err);
          output.writeMessageBegin("savePersonWithPhotoAndFeatureMultiImage", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("savePersonWithPhotoAndFeatureMultiImage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.savePersonWithPhotoAndFeatureMultiImage(args.bean, args.idPhoto, args.feature, args.faceInfo, args.deviceId, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("savePersonWithPhotoAndFeatureMultiImage", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("savePersonWithPhotoAndFeatureMultiImage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_savePersonWithPhotoAndFeatureSaved = function(seqid, input, output) {
  var args = new IFaceLog_savePersonWithPhotoAndFeatureSaved_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.savePersonWithPhotoAndFeatureSaved.length === 4) {
    Q.fcall(this._handler.savePersonWithPhotoAndFeatureSaved.bind(this._handler), args.bean, args.idPhotoMd5, args.featureMd5, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_savePersonWithPhotoAndFeatureSaved_result({success: result});
        output.writeMessageBegin("savePersonWithPhotoAndFeatureSaved", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_savePersonWithPhotoAndFeatureSaved_result(err);
          output.writeMessageBegin("savePersonWithPhotoAndFeatureSaved", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("savePersonWithPhotoAndFeatureSaved", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.savePersonWithPhotoAndFeatureSaved(args.bean, args.idPhotoMd5, args.featureMd5, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_savePersonWithPhotoAndFeatureSaved_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("savePersonWithPhotoAndFeatureSaved", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("savePersonWithPhotoAndFeatureSaved", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_savePersons = function(seqid, input, output) {
  var args = new IFaceLog_savePersons_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.savePersons.length === 2) {
    Q.fcall(this._handler.savePersons.bind(this._handler), args.beans, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_savePersons_result({success: result});
        output.writeMessageBegin("savePersons", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_savePersons_result(err);
          output.writeMessageBegin("savePersons", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("savePersons", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.savePersons(args.beans, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_savePersons_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("savePersons", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("savePersons", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_savePersonsWithPhoto = function(seqid, input, output) {
  var args = new IFaceLog_savePersonsWithPhoto_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.savePersonsWithPhoto.length === 2) {
    Q.fcall(this._handler.savePersonsWithPhoto.bind(this._handler), args.persons, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_savePersonsWithPhoto_result({success: result});
        output.writeMessageBegin("savePersonsWithPhoto", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_savePersonsWithPhoto_result(err);
          output.writeMessageBegin("savePersonsWithPhoto", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("savePersonsWithPhoto", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.savePersonsWithPhoto(args.persons, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_savePersonsWithPhoto_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("savePersonsWithPhoto", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("savePersonsWithPhoto", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_saveServiceConfig = function(seqid, input, output) {
  var args = new IFaceLog_saveServiceConfig_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.saveServiceConfig.length === 1) {
    Q.fcall(this._handler.saveServiceConfig.bind(this._handler), args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_saveServiceConfig_result({success: result});
        output.writeMessageBegin("saveServiceConfig", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_saveServiceConfig_result(err);
          output.writeMessageBegin("saveServiceConfig", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("saveServiceConfig", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.saveServiceConfig(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_saveServiceConfig_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("saveServiceConfig", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("saveServiceConfig", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_setPersonExpiryDate = function(seqid, input, output) {
  var args = new IFaceLog_setPersonExpiryDate_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setPersonExpiryDate.length === 3) {
    Q.fcall(this._handler.setPersonExpiryDate.bind(this._handler), args.personId, args.expiryDate, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_setPersonExpiryDate_result({success: result});
        output.writeMessageBegin("setPersonExpiryDate", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_setPersonExpiryDate_result(err);
          output.writeMessageBegin("setPersonExpiryDate", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("setPersonExpiryDate", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setPersonExpiryDate(args.personId, args.expiryDate, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_setPersonExpiryDate_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setPersonExpiryDate", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setPersonExpiryDate", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_setPersonExpiryDateList = function(seqid, input, output) {
  var args = new IFaceLog_setPersonExpiryDateList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setPersonExpiryDateList.length === 3) {
    Q.fcall(this._handler.setPersonExpiryDateList.bind(this._handler), args.personIdList, args.expiryDate, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_setPersonExpiryDateList_result({success: result});
        output.writeMessageBegin("setPersonExpiryDateList", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_setPersonExpiryDateList_result(err);
          output.writeMessageBegin("setPersonExpiryDateList", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("setPersonExpiryDateList", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setPersonExpiryDateList(args.personIdList, args.expiryDate, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_setPersonExpiryDateList_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setPersonExpiryDateList", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setPersonExpiryDateList", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_setProperties = function(seqid, input, output) {
  var args = new IFaceLog_setProperties_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setProperties.length === 2) {
    Q.fcall(this._handler.setProperties.bind(this._handler), args.config, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_setProperties_result({success: result});
        output.writeMessageBegin("setProperties", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_setProperties_result(err);
          output.writeMessageBegin("setProperties", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("setProperties", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setProperties(args.config, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_setProperties_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setProperties", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setProperties", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_setProperty = function(seqid, input, output) {
  var args = new IFaceLog_setProperty_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setProperty.length === 3) {
    Q.fcall(this._handler.setProperty.bind(this._handler), args.key, args.value, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_setProperty_result({success: result});
        output.writeMessageBegin("setProperty", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_setProperty_result(err);
          output.writeMessageBegin("setProperty", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("setProperty", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setProperty(args.key, args.value, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_setProperty_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setProperty", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setProperty", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_taskQueueOf = function(seqid, input, output) {
  var args = new IFaceLog_taskQueueOf_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.taskQueueOf.length === 2) {
    Q.fcall(this._handler.taskQueueOf.bind(this._handler), args.task, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_taskQueueOf_result({success: result});
        output.writeMessageBegin("taskQueueOf", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_taskQueueOf_result(err);
          output.writeMessageBegin("taskQueueOf", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("taskQueueOf", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.taskQueueOf(args.task, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_taskQueueOf_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("taskQueueOf", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("taskQueueOf", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_taskRegister = function(seqid, input, output) {
  var args = new IFaceLog_taskRegister_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.taskRegister.length === 2) {
    Q.fcall(this._handler.taskRegister.bind(this._handler), args.task, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_taskRegister_result({success: result});
        output.writeMessageBegin("taskRegister", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_taskRegister_result(err);
          output.writeMessageBegin("taskRegister", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("taskRegister", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.taskRegister(args.task, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_taskRegister_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("taskRegister", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("taskRegister", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_unbindBorder = function(seqid, input, output) {
  var args = new IFaceLog_unbindBorder_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.unbindBorder.length === 3) {
    Q.fcall(this._handler.unbindBorder.bind(this._handler), args.personGroupId, args.deviceGroupId, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_unbindBorder_result({success: result});
        output.writeMessageBegin("unbindBorder", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_unbindBorder_result(err);
          output.writeMessageBegin("unbindBorder", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("unbindBorder", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.unbindBorder(args.personGroupId, args.deviceGroupId, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_unbindBorder_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("unbindBorder", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("unbindBorder", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_unregisterDevice = function(seqid, input, output) {
  var args = new IFaceLog_unregisterDevice_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.unregisterDevice.length === 2) {
    Q.fcall(this._handler.unregisterDevice.bind(this._handler), args.deviceId, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_unregisterDevice_result({success: result});
        output.writeMessageBegin("unregisterDevice", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_unregisterDevice_result(err);
          output.writeMessageBegin("unregisterDevice", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("unregisterDevice", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.unregisterDevice(args.deviceId, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_unregisterDevice_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("unregisterDevice", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("unregisterDevice", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_updateDevice = function(seqid, input, output) {
  var args = new IFaceLog_updateDevice_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateDevice.length === 2) {
    Q.fcall(this._handler.updateDevice.bind(this._handler), args.deviceBean, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_updateDevice_result({success: result});
        output.writeMessageBegin("updateDevice", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_updateDevice_result(err);
          output.writeMessageBegin("updateDevice", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateDevice", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateDevice(args.deviceBean, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_updateDevice_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateDevice", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateDevice", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_version = function(seqid, input, output) {
  var args = new IFaceLog_version_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.version.length === 0) {
    Q.fcall(this._handler.version.bind(this._handler))
      .then(function(result) {
        var result_obj = new IFaceLog_version_result({success: result});
        output.writeMessageBegin("version", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_version_result(err);
          output.writeMessageBegin("version", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("version", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.version(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_version_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("version", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("version", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_versionInfo = function(seqid, input, output) {
  var args = new IFaceLog_versionInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.versionInfo.length === 0) {
    Q.fcall(this._handler.versionInfo.bind(this._handler))
      .then(function(result) {
        var result_obj = new IFaceLog_versionInfo_result({success: result});
        output.writeMessageBegin("versionInfo", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_versionInfo_result(err);
          output.writeMessageBegin("versionInfo", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("versionInfo", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.versionInfo(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_versionInfo_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("versionInfo", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("versionInfo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
