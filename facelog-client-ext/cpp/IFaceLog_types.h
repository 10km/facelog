/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef IFaceLog_TYPES_H
#define IFaceLog_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace gdface {

struct TokenType {
  enum type {
    UNINITIALIZED = 0,
    DEVICE = 1,
    PERSON = 2,
    ROOT = 3
  };
};

extern const std::map<int, const char*> _TokenType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TokenType::type& val);

struct SecurityExceptionType {
  enum type {
    UNCLASSIFIED = 0,
    INVALID_MAC = 1,
    INVALID_SN = 2,
    OCCUPIED_SN = 3,
    INVALID_TOKEN = 4,
    INVALID_DEVICE_ID = 5,
    INVALID_PERSON_ID = 6,
    INVALID_PASSWORD = 7,
    REJECT_APPLY = 8,
    ACCESS_DENIED = 9,
    TABLE_INSERT_DENIED = 10,
    TABLE_UPDATE_DENIED = 11,
    TABLE_DELETE_DENIED = 12
  };
};

extern const std::map<int, const char*> _SecurityExceptionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SecurityExceptionType::type& val);

struct MQParam {
  enum type {
    REDIS_URI = 0,
    WEBREDIS_URL = 1,
    CMD_CHANNEL = 2,
    LOG_MONITOR_CHANNEL = 3,
    HB_MONITOR_CHANNEL = 4,
    HB_INTERVAL = 5,
    HB_EXPIRE = 6
  };
};

extern const std::map<int, const char*> _MQParam_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const MQParam::type& val);

class FaceBean;

class DuplicateRecordException;

class ServiceRuntimeException;

class FeatureBean;

class ImageBean;

class LogBean;

class DeviceBean;

class DeviceGroupBean;

class PermitBean;

class PersonBean;

class PersonGroupBean;

class LogLightBean;

class Token;

class ServiceSecurityException;

typedef struct _FaceBean__isset {
  _FaceBean__isset() : id(false), imageMd5(false), faceLeft(false), faceTop(false), faceWidth(false), faceHeight(false), eyeLeftx(false), eyeLefty(false), eyeRightx(false), eyeRighty(false), mouthX(false), mouthY(false), noseX(false), noseY(false), angleYaw(false), anglePitch(false), angleRoll(false), extInfo(false), featureMd5(false) {}
  bool id :1;
  bool imageMd5 :1;
  bool faceLeft :1;
  bool faceTop :1;
  bool faceWidth :1;
  bool faceHeight :1;
  bool eyeLeftx :1;
  bool eyeLefty :1;
  bool eyeRightx :1;
  bool eyeRighty :1;
  bool mouthX :1;
  bool mouthY :1;
  bool noseX :1;
  bool noseY :1;
  bool angleYaw :1;
  bool anglePitch :1;
  bool angleRoll :1;
  bool extInfo :1;
  bool featureMd5 :1;
} _FaceBean__isset;

class FaceBean {
 public:

  FaceBean(const FaceBean&);
  FaceBean(FaceBean&&);
  FaceBean& operator=(const FaceBean&);
  FaceBean& operator=(FaceBean&&);
  FaceBean() : _new(0), modified(0), initialized(0), id(0), imageMd5(), faceLeft(0), faceTop(0), faceWidth(0), faceHeight(0), eyeLeftx(0), eyeLefty(0), eyeRightx(0), eyeRighty(0), mouthX(0), mouthY(0), noseX(0), noseY(0), angleYaw(0), anglePitch(0), angleRoll(0), extInfo(), featureMd5() {
  }

  virtual ~FaceBean() throw();
  bool _new;
  int32_t modified;
  int32_t initialized;
  int32_t id;
  std::string imageMd5;
  int32_t faceLeft;
  int32_t faceTop;
  int32_t faceWidth;
  int32_t faceHeight;
  int32_t eyeLeftx;
  int32_t eyeLefty;
  int32_t eyeRightx;
  int32_t eyeRighty;
  int32_t mouthX;
  int32_t mouthY;
  int32_t noseX;
  int32_t noseY;
  int32_t angleYaw;
  int32_t anglePitch;
  int32_t angleRoll;
  std::string extInfo;
  std::string featureMd5;

  _FaceBean__isset __isset;

  void __set__new(const bool val);

  void __set_modified(const int32_t val);

  void __set_initialized(const int32_t val);

  void __set_id(const int32_t val);

  void __set_imageMd5(const std::string& val);

  void __set_faceLeft(const int32_t val);

  void __set_faceTop(const int32_t val);

  void __set_faceWidth(const int32_t val);

  void __set_faceHeight(const int32_t val);

  void __set_eyeLeftx(const int32_t val);

  void __set_eyeLefty(const int32_t val);

  void __set_eyeRightx(const int32_t val);

  void __set_eyeRighty(const int32_t val);

  void __set_mouthX(const int32_t val);

  void __set_mouthY(const int32_t val);

  void __set_noseX(const int32_t val);

  void __set_noseY(const int32_t val);

  void __set_angleYaw(const int32_t val);

  void __set_anglePitch(const int32_t val);

  void __set_angleRoll(const int32_t val);

  void __set_extInfo(const std::string& val);

  void __set_featureMd5(const std::string& val);

  bool operator == (const FaceBean & rhs) const
  {
    if (!(_new == rhs._new))
      return false;
    if (!(modified == rhs.modified))
      return false;
    if (!(initialized == rhs.initialized))
      return false;
    if (__isset.id != rhs.__isset.id)
      return false;
    else if (__isset.id && !(id == rhs.id))
      return false;
    if (__isset.imageMd5 != rhs.__isset.imageMd5)
      return false;
    else if (__isset.imageMd5 && !(imageMd5 == rhs.imageMd5))
      return false;
    if (__isset.faceLeft != rhs.__isset.faceLeft)
      return false;
    else if (__isset.faceLeft && !(faceLeft == rhs.faceLeft))
      return false;
    if (__isset.faceTop != rhs.__isset.faceTop)
      return false;
    else if (__isset.faceTop && !(faceTop == rhs.faceTop))
      return false;
    if (__isset.faceWidth != rhs.__isset.faceWidth)
      return false;
    else if (__isset.faceWidth && !(faceWidth == rhs.faceWidth))
      return false;
    if (__isset.faceHeight != rhs.__isset.faceHeight)
      return false;
    else if (__isset.faceHeight && !(faceHeight == rhs.faceHeight))
      return false;
    if (__isset.eyeLeftx != rhs.__isset.eyeLeftx)
      return false;
    else if (__isset.eyeLeftx && !(eyeLeftx == rhs.eyeLeftx))
      return false;
    if (__isset.eyeLefty != rhs.__isset.eyeLefty)
      return false;
    else if (__isset.eyeLefty && !(eyeLefty == rhs.eyeLefty))
      return false;
    if (__isset.eyeRightx != rhs.__isset.eyeRightx)
      return false;
    else if (__isset.eyeRightx && !(eyeRightx == rhs.eyeRightx))
      return false;
    if (__isset.eyeRighty != rhs.__isset.eyeRighty)
      return false;
    else if (__isset.eyeRighty && !(eyeRighty == rhs.eyeRighty))
      return false;
    if (__isset.mouthX != rhs.__isset.mouthX)
      return false;
    else if (__isset.mouthX && !(mouthX == rhs.mouthX))
      return false;
    if (__isset.mouthY != rhs.__isset.mouthY)
      return false;
    else if (__isset.mouthY && !(mouthY == rhs.mouthY))
      return false;
    if (__isset.noseX != rhs.__isset.noseX)
      return false;
    else if (__isset.noseX && !(noseX == rhs.noseX))
      return false;
    if (__isset.noseY != rhs.__isset.noseY)
      return false;
    else if (__isset.noseY && !(noseY == rhs.noseY))
      return false;
    if (__isset.angleYaw != rhs.__isset.angleYaw)
      return false;
    else if (__isset.angleYaw && !(angleYaw == rhs.angleYaw))
      return false;
    if (__isset.anglePitch != rhs.__isset.anglePitch)
      return false;
    else if (__isset.anglePitch && !(anglePitch == rhs.anglePitch))
      return false;
    if (__isset.angleRoll != rhs.__isset.angleRoll)
      return false;
    else if (__isset.angleRoll && !(angleRoll == rhs.angleRoll))
      return false;
    if (__isset.extInfo != rhs.__isset.extInfo)
      return false;
    else if (__isset.extInfo && !(extInfo == rhs.extInfo))
      return false;
    if (__isset.featureMd5 != rhs.__isset.featureMd5)
      return false;
    else if (__isset.featureMd5 && !(featureMd5 == rhs.featureMd5))
      return false;
    return true;
  }
  bool operator != (const FaceBean &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceBean & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FaceBean &a, FaceBean &b);

std::ostream& operator<<(std::ostream& out, const FaceBean& obj);

typedef struct _DuplicateRecordException__isset {
  _DuplicateRecordException__isset() : message(false), causeClass(false), serviceStackTraceMessage(false), causeFields(false) {}
  bool message :1;
  bool causeClass :1;
  bool serviceStackTraceMessage :1;
  bool causeFields :1;
} _DuplicateRecordException__isset;

class DuplicateRecordException : public ::apache::thrift::TException {
 public:

  DuplicateRecordException(const DuplicateRecordException&);
  DuplicateRecordException(DuplicateRecordException&&);
  DuplicateRecordException& operator=(const DuplicateRecordException&);
  DuplicateRecordException& operator=(DuplicateRecordException&&);
  DuplicateRecordException() : message(), causeClass(), serviceStackTraceMessage(), causeFields() {
  }

  virtual ~DuplicateRecordException() throw();
  std::string message;
  std::string causeClass;
  std::string serviceStackTraceMessage;
  std::string causeFields;

  _DuplicateRecordException__isset __isset;

  void __set_message(const std::string& val);

  void __set_causeClass(const std::string& val);

  void __set_serviceStackTraceMessage(const std::string& val);

  void __set_causeFields(const std::string& val);

  bool operator == (const DuplicateRecordException & rhs) const
  {
    if (__isset.message != rhs.__isset.message)
      return false;
    else if (__isset.message && !(message == rhs.message))
      return false;
    if (__isset.causeClass != rhs.__isset.causeClass)
      return false;
    else if (__isset.causeClass && !(causeClass == rhs.causeClass))
      return false;
    if (__isset.serviceStackTraceMessage != rhs.__isset.serviceStackTraceMessage)
      return false;
    else if (__isset.serviceStackTraceMessage && !(serviceStackTraceMessage == rhs.serviceStackTraceMessage))
      return false;
    if (__isset.causeFields != rhs.__isset.causeFields)
      return false;
    else if (__isset.causeFields && !(causeFields == rhs.causeFields))
      return false;
    return true;
  }
  bool operator != (const DuplicateRecordException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DuplicateRecordException & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(DuplicateRecordException &a, DuplicateRecordException &b);

std::ostream& operator<<(std::ostream& out, const DuplicateRecordException& obj);

typedef struct _ServiceRuntimeException__isset {
  _ServiceRuntimeException__isset() : message(false), causeClass(false), serviceStackTraceMessage(false), causeFields(false) {}
  bool message :1;
  bool causeClass :1;
  bool serviceStackTraceMessage :1;
  bool causeFields :1;
} _ServiceRuntimeException__isset;

class ServiceRuntimeException : public ::apache::thrift::TException {
 public:

  ServiceRuntimeException(const ServiceRuntimeException&);
  ServiceRuntimeException(ServiceRuntimeException&&);
  ServiceRuntimeException& operator=(const ServiceRuntimeException&);
  ServiceRuntimeException& operator=(ServiceRuntimeException&&);
  ServiceRuntimeException() : message(), causeClass(), serviceStackTraceMessage(), causeFields(), type(0) {
  }

  virtual ~ServiceRuntimeException() throw();
  std::string message;
  std::string causeClass;
  std::string serviceStackTraceMessage;
  std::string causeFields;
  int32_t type;

  _ServiceRuntimeException__isset __isset;

  void __set_message(const std::string& val);

  void __set_causeClass(const std::string& val);

  void __set_serviceStackTraceMessage(const std::string& val);

  void __set_causeFields(const std::string& val);

  void __set_type(const int32_t val);

  bool operator == (const ServiceRuntimeException & rhs) const
  {
    if (__isset.message != rhs.__isset.message)
      return false;
    else if (__isset.message && !(message == rhs.message))
      return false;
    if (__isset.causeClass != rhs.__isset.causeClass)
      return false;
    else if (__isset.causeClass && !(causeClass == rhs.causeClass))
      return false;
    if (__isset.serviceStackTraceMessage != rhs.__isset.serviceStackTraceMessage)
      return false;
    else if (__isset.serviceStackTraceMessage && !(serviceStackTraceMessage == rhs.serviceStackTraceMessage))
      return false;
    if (__isset.causeFields != rhs.__isset.causeFields)
      return false;
    else if (__isset.causeFields && !(causeFields == rhs.causeFields))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const ServiceRuntimeException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceRuntimeException & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(ServiceRuntimeException &a, ServiceRuntimeException &b);

std::ostream& operator<<(std::ostream& out, const ServiceRuntimeException& obj);

typedef struct _FeatureBean__isset {
  _FeatureBean__isset() : md5(false), version(false), personId(false), feature(false), updateTime(false) {}
  bool md5 :1;
  bool version :1;
  bool personId :1;
  bool feature :1;
  bool updateTime :1;
} _FeatureBean__isset;

class FeatureBean {
 public:

  FeatureBean(const FeatureBean&);
  FeatureBean(FeatureBean&&);
  FeatureBean& operator=(const FeatureBean&);
  FeatureBean& operator=(FeatureBean&&);
  FeatureBean() : _new(0), modified(0), initialized(0), md5(), version(), personId(0), feature(), updateTime(0) {
  }

  virtual ~FeatureBean() throw();
  bool _new;
  int32_t modified;
  int32_t initialized;
  std::string md5;
  std::string version;
  int32_t personId;
  std::string feature;
  int64_t updateTime;

  _FeatureBean__isset __isset;

  void __set__new(const bool val);

  void __set_modified(const int32_t val);

  void __set_initialized(const int32_t val);

  void __set_md5(const std::string& val);

  void __set_version(const std::string& val);

  void __set_personId(const int32_t val);

  void __set_feature(const std::string& val);

  void __set_updateTime(const int64_t val);

  bool operator == (const FeatureBean & rhs) const
  {
    if (!(_new == rhs._new))
      return false;
    if (!(modified == rhs.modified))
      return false;
    if (!(initialized == rhs.initialized))
      return false;
    if (__isset.md5 != rhs.__isset.md5)
      return false;
    else if (__isset.md5 && !(md5 == rhs.md5))
      return false;
    if (__isset.version != rhs.__isset.version)
      return false;
    else if (__isset.version && !(version == rhs.version))
      return false;
    if (__isset.personId != rhs.__isset.personId)
      return false;
    else if (__isset.personId && !(personId == rhs.personId))
      return false;
    if (__isset.feature != rhs.__isset.feature)
      return false;
    else if (__isset.feature && !(feature == rhs.feature))
      return false;
    if (__isset.updateTime != rhs.__isset.updateTime)
      return false;
    else if (__isset.updateTime && !(updateTime == rhs.updateTime))
      return false;
    return true;
  }
  bool operator != (const FeatureBean &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FeatureBean & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FeatureBean &a, FeatureBean &b);

std::ostream& operator<<(std::ostream& out, const FeatureBean& obj);

typedef struct _ImageBean__isset {
  _ImageBean__isset() : md5(false), format(false), width(false), height(false), depth(false), faceNum(false), thumbMd5(false), deviceId(false) {}
  bool md5 :1;
  bool format :1;
  bool width :1;
  bool height :1;
  bool depth :1;
  bool faceNum :1;
  bool thumbMd5 :1;
  bool deviceId :1;
} _ImageBean__isset;

class ImageBean {
 public:

  ImageBean(const ImageBean&);
  ImageBean(ImageBean&&);
  ImageBean& operator=(const ImageBean&);
  ImageBean& operator=(ImageBean&&);
  ImageBean() : _new(0), modified(0), initialized(0), md5(), format(), width(0), height(0), depth(0), faceNum(0), thumbMd5(), deviceId(0) {
  }

  virtual ~ImageBean() throw();
  bool _new;
  int32_t modified;
  int32_t initialized;
  std::string md5;
  std::string format;
  int32_t width;
  int32_t height;
  int32_t depth;
  int32_t faceNum;
  std::string thumbMd5;
  int32_t deviceId;

  _ImageBean__isset __isset;

  void __set__new(const bool val);

  void __set_modified(const int32_t val);

  void __set_initialized(const int32_t val);

  void __set_md5(const std::string& val);

  void __set_format(const std::string& val);

  void __set_width(const int32_t val);

  void __set_height(const int32_t val);

  void __set_depth(const int32_t val);

  void __set_faceNum(const int32_t val);

  void __set_thumbMd5(const std::string& val);

  void __set_deviceId(const int32_t val);

  bool operator == (const ImageBean & rhs) const
  {
    if (!(_new == rhs._new))
      return false;
    if (!(modified == rhs.modified))
      return false;
    if (!(initialized == rhs.initialized))
      return false;
    if (__isset.md5 != rhs.__isset.md5)
      return false;
    else if (__isset.md5 && !(md5 == rhs.md5))
      return false;
    if (__isset.format != rhs.__isset.format)
      return false;
    else if (__isset.format && !(format == rhs.format))
      return false;
    if (__isset.width != rhs.__isset.width)
      return false;
    else if (__isset.width && !(width == rhs.width))
      return false;
    if (__isset.height != rhs.__isset.height)
      return false;
    else if (__isset.height && !(height == rhs.height))
      return false;
    if (__isset.depth != rhs.__isset.depth)
      return false;
    else if (__isset.depth && !(depth == rhs.depth))
      return false;
    if (__isset.faceNum != rhs.__isset.faceNum)
      return false;
    else if (__isset.faceNum && !(faceNum == rhs.faceNum))
      return false;
    if (__isset.thumbMd5 != rhs.__isset.thumbMd5)
      return false;
    else if (__isset.thumbMd5 && !(thumbMd5 == rhs.thumbMd5))
      return false;
    if (__isset.deviceId != rhs.__isset.deviceId)
      return false;
    else if (__isset.deviceId && !(deviceId == rhs.deviceId))
      return false;
    return true;
  }
  bool operator != (const ImageBean &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImageBean & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ImageBean &a, ImageBean &b);

std::ostream& operator<<(std::ostream& out, const ImageBean& obj);

typedef struct _LogBean__isset {
  _LogBean__isset() : id(false), personId(false), deviceId(false), verifyFeature(false), compareFace(false), verifyStatus(false), similarty(false), verifyTime(false), createTime(false) {}
  bool id :1;
  bool personId :1;
  bool deviceId :1;
  bool verifyFeature :1;
  bool compareFace :1;
  bool verifyStatus :1;
  bool similarty :1;
  bool verifyTime :1;
  bool createTime :1;
} _LogBean__isset;

class LogBean {
 public:

  LogBean(const LogBean&);
  LogBean(LogBean&&);
  LogBean& operator=(const LogBean&);
  LogBean& operator=(LogBean&&);
  LogBean() : _new(0), modified(0), initialized(0), id(0), personId(0), deviceId(0), verifyFeature(), compareFace(0), verifyStatus(0), similarty(0), verifyTime(0), createTime(0) {
  }

  virtual ~LogBean() throw();
  bool _new;
  int32_t modified;
  int32_t initialized;
  int32_t id;
  int32_t personId;
  int32_t deviceId;
  std::string verifyFeature;
  int32_t compareFace;
  int32_t verifyStatus;
  double similarty;
  int64_t verifyTime;
  int64_t createTime;

  _LogBean__isset __isset;

  void __set__new(const bool val);

  void __set_modified(const int32_t val);

  void __set_initialized(const int32_t val);

  void __set_id(const int32_t val);

  void __set_personId(const int32_t val);

  void __set_deviceId(const int32_t val);

  void __set_verifyFeature(const std::string& val);

  void __set_compareFace(const int32_t val);

  void __set_verifyStatus(const int32_t val);

  void __set_similarty(const double val);

  void __set_verifyTime(const int64_t val);

  void __set_createTime(const int64_t val);

  bool operator == (const LogBean & rhs) const
  {
    if (!(_new == rhs._new))
      return false;
    if (!(modified == rhs.modified))
      return false;
    if (!(initialized == rhs.initialized))
      return false;
    if (__isset.id != rhs.__isset.id)
      return false;
    else if (__isset.id && !(id == rhs.id))
      return false;
    if (__isset.personId != rhs.__isset.personId)
      return false;
    else if (__isset.personId && !(personId == rhs.personId))
      return false;
    if (__isset.deviceId != rhs.__isset.deviceId)
      return false;
    else if (__isset.deviceId && !(deviceId == rhs.deviceId))
      return false;
    if (__isset.verifyFeature != rhs.__isset.verifyFeature)
      return false;
    else if (__isset.verifyFeature && !(verifyFeature == rhs.verifyFeature))
      return false;
    if (__isset.compareFace != rhs.__isset.compareFace)
      return false;
    else if (__isset.compareFace && !(compareFace == rhs.compareFace))
      return false;
    if (__isset.verifyStatus != rhs.__isset.verifyStatus)
      return false;
    else if (__isset.verifyStatus && !(verifyStatus == rhs.verifyStatus))
      return false;
    if (__isset.similarty != rhs.__isset.similarty)
      return false;
    else if (__isset.similarty && !(similarty == rhs.similarty))
      return false;
    if (__isset.verifyTime != rhs.__isset.verifyTime)
      return false;
    else if (__isset.verifyTime && !(verifyTime == rhs.verifyTime))
      return false;
    if (__isset.createTime != rhs.__isset.createTime)
      return false;
    else if (__isset.createTime && !(createTime == rhs.createTime))
      return false;
    return true;
  }
  bool operator != (const LogBean &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogBean & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LogBean &a, LogBean &b);

std::ostream& operator<<(std::ostream& out, const LogBean& obj);

typedef struct _DeviceBean__isset {
  _DeviceBean__isset() : id(false), groupId(false), name(false), productName(false), model(false), vendor(false), manufacturer(false), madeDate(false), version(false), usedSdks(false), serialNo(false), mac(false), remark(false), extBin(false), extTxt(false), createTime(false), updateTime(false) {}
  bool id :1;
  bool groupId :1;
  bool name :1;
  bool productName :1;
  bool model :1;
  bool vendor :1;
  bool manufacturer :1;
  bool madeDate :1;
  bool version :1;
  bool usedSdks :1;
  bool serialNo :1;
  bool mac :1;
  bool remark :1;
  bool extBin :1;
  bool extTxt :1;
  bool createTime :1;
  bool updateTime :1;
} _DeviceBean__isset;

class DeviceBean {
 public:

  DeviceBean(const DeviceBean&);
  DeviceBean(DeviceBean&&);
  DeviceBean& operator=(const DeviceBean&);
  DeviceBean& operator=(DeviceBean&&);
  DeviceBean() : _new(0), modified(0), initialized(0), id(0), groupId(0), name(), productName(), model(), vendor(), manufacturer(), madeDate(0), version(), usedSdks(), serialNo(), mac(), remark(), extBin(), extTxt(), createTime(0), updateTime(0) {
  }

  virtual ~DeviceBean() throw();
  bool _new;
  int32_t modified;
  int32_t initialized;
  int32_t id;
  int32_t groupId;
  std::string name;
  std::string productName;
  std::string model;
  std::string vendor;
  std::string manufacturer;
  int64_t madeDate;
  std::string version;
  std::string usedSdks;
  std::string serialNo;
  std::string mac;
  std::string remark;
  std::string extBin;
  std::string extTxt;
  int64_t createTime;
  int64_t updateTime;

  _DeviceBean__isset __isset;

  void __set__new(const bool val);

  void __set_modified(const int32_t val);

  void __set_initialized(const int32_t val);

  void __set_id(const int32_t val);

  void __set_groupId(const int32_t val);

  void __set_name(const std::string& val);

  void __set_productName(const std::string& val);

  void __set_model(const std::string& val);

  void __set_vendor(const std::string& val);

  void __set_manufacturer(const std::string& val);

  void __set_madeDate(const int64_t val);

  void __set_version(const std::string& val);

  void __set_usedSdks(const std::string& val);

  void __set_serialNo(const std::string& val);

  void __set_mac(const std::string& val);

  void __set_remark(const std::string& val);

  void __set_extBin(const std::string& val);

  void __set_extTxt(const std::string& val);

  void __set_createTime(const int64_t val);

  void __set_updateTime(const int64_t val);

  bool operator == (const DeviceBean & rhs) const
  {
    if (!(_new == rhs._new))
      return false;
    if (!(modified == rhs.modified))
      return false;
    if (!(initialized == rhs.initialized))
      return false;
    if (__isset.id != rhs.__isset.id)
      return false;
    else if (__isset.id && !(id == rhs.id))
      return false;
    if (__isset.groupId != rhs.__isset.groupId)
      return false;
    else if (__isset.groupId && !(groupId == rhs.groupId))
      return false;
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    if (__isset.productName != rhs.__isset.productName)
      return false;
    else if (__isset.productName && !(productName == rhs.productName))
      return false;
    if (__isset.model != rhs.__isset.model)
      return false;
    else if (__isset.model && !(model == rhs.model))
      return false;
    if (__isset.vendor != rhs.__isset.vendor)
      return false;
    else if (__isset.vendor && !(vendor == rhs.vendor))
      return false;
    if (__isset.manufacturer != rhs.__isset.manufacturer)
      return false;
    else if (__isset.manufacturer && !(manufacturer == rhs.manufacturer))
      return false;
    if (__isset.madeDate != rhs.__isset.madeDate)
      return false;
    else if (__isset.madeDate && !(madeDate == rhs.madeDate))
      return false;
    if (__isset.version != rhs.__isset.version)
      return false;
    else if (__isset.version && !(version == rhs.version))
      return false;
    if (__isset.usedSdks != rhs.__isset.usedSdks)
      return false;
    else if (__isset.usedSdks && !(usedSdks == rhs.usedSdks))
      return false;
    if (__isset.serialNo != rhs.__isset.serialNo)
      return false;
    else if (__isset.serialNo && !(serialNo == rhs.serialNo))
      return false;
    if (__isset.mac != rhs.__isset.mac)
      return false;
    else if (__isset.mac && !(mac == rhs.mac))
      return false;
    if (__isset.remark != rhs.__isset.remark)
      return false;
    else if (__isset.remark && !(remark == rhs.remark))
      return false;
    if (__isset.extBin != rhs.__isset.extBin)
      return false;
    else if (__isset.extBin && !(extBin == rhs.extBin))
      return false;
    if (__isset.extTxt != rhs.__isset.extTxt)
      return false;
    else if (__isset.extTxt && !(extTxt == rhs.extTxt))
      return false;
    if (__isset.createTime != rhs.__isset.createTime)
      return false;
    else if (__isset.createTime && !(createTime == rhs.createTime))
      return false;
    if (__isset.updateTime != rhs.__isset.updateTime)
      return false;
    else if (__isset.updateTime && !(updateTime == rhs.updateTime))
      return false;
    return true;
  }
  bool operator != (const DeviceBean &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceBean & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DeviceBean &a, DeviceBean &b);

std::ostream& operator<<(std::ostream& out, const DeviceBean& obj);

typedef struct _DeviceGroupBean__isset {
  _DeviceGroupBean__isset() : id(false), name(false), leaf(false), parent(false), rootGroup(false), schedule(false), remark(false), extBin(false), extTxt(false), createTime(false), updateTime(false) {}
  bool id :1;
  bool name :1;
  bool leaf :1;
  bool parent :1;
  bool rootGroup :1;
  bool schedule :1;
  bool remark :1;
  bool extBin :1;
  bool extTxt :1;
  bool createTime :1;
  bool updateTime :1;
} _DeviceGroupBean__isset;

class DeviceGroupBean {
 public:

  DeviceGroupBean(const DeviceGroupBean&);
  DeviceGroupBean(DeviceGroupBean&&);
  DeviceGroupBean& operator=(const DeviceGroupBean&);
  DeviceGroupBean& operator=(DeviceGroupBean&&);
  DeviceGroupBean() : _new(0), modified(0), initialized(0), id(0), name(), leaf(0), parent(0), rootGroup(0), schedule(), remark(), extBin(), extTxt(), createTime(0), updateTime(0) {
  }

  virtual ~DeviceGroupBean() throw();
  bool _new;
  int32_t modified;
  int32_t initialized;
  int32_t id;
  std::string name;
  int32_t leaf;
  int32_t parent;
  int32_t rootGroup;
  std::string schedule;
  std::string remark;
  std::string extBin;
  std::string extTxt;
  int64_t createTime;
  int64_t updateTime;

  _DeviceGroupBean__isset __isset;

  void __set__new(const bool val);

  void __set_modified(const int32_t val);

  void __set_initialized(const int32_t val);

  void __set_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_leaf(const int32_t val);

  void __set_parent(const int32_t val);

  void __set_rootGroup(const int32_t val);

  void __set_schedule(const std::string& val);

  void __set_remark(const std::string& val);

  void __set_extBin(const std::string& val);

  void __set_extTxt(const std::string& val);

  void __set_createTime(const int64_t val);

  void __set_updateTime(const int64_t val);

  bool operator == (const DeviceGroupBean & rhs) const
  {
    if (!(_new == rhs._new))
      return false;
    if (!(modified == rhs.modified))
      return false;
    if (!(initialized == rhs.initialized))
      return false;
    if (__isset.id != rhs.__isset.id)
      return false;
    else if (__isset.id && !(id == rhs.id))
      return false;
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    if (__isset.leaf != rhs.__isset.leaf)
      return false;
    else if (__isset.leaf && !(leaf == rhs.leaf))
      return false;
    if (__isset.parent != rhs.__isset.parent)
      return false;
    else if (__isset.parent && !(parent == rhs.parent))
      return false;
    if (__isset.rootGroup != rhs.__isset.rootGroup)
      return false;
    else if (__isset.rootGroup && !(rootGroup == rhs.rootGroup))
      return false;
    if (__isset.schedule != rhs.__isset.schedule)
      return false;
    else if (__isset.schedule && !(schedule == rhs.schedule))
      return false;
    if (__isset.remark != rhs.__isset.remark)
      return false;
    else if (__isset.remark && !(remark == rhs.remark))
      return false;
    if (__isset.extBin != rhs.__isset.extBin)
      return false;
    else if (__isset.extBin && !(extBin == rhs.extBin))
      return false;
    if (__isset.extTxt != rhs.__isset.extTxt)
      return false;
    else if (__isset.extTxt && !(extTxt == rhs.extTxt))
      return false;
    if (__isset.createTime != rhs.__isset.createTime)
      return false;
    else if (__isset.createTime && !(createTime == rhs.createTime))
      return false;
    if (__isset.updateTime != rhs.__isset.updateTime)
      return false;
    else if (__isset.updateTime && !(updateTime == rhs.updateTime))
      return false;
    return true;
  }
  bool operator != (const DeviceGroupBean &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceGroupBean & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DeviceGroupBean &a, DeviceGroupBean &b);

std::ostream& operator<<(std::ostream& out, const DeviceGroupBean& obj);

typedef struct _PermitBean__isset {
  _PermitBean__isset() : deviceGroupId(false), personGroupId(false), schedule(false), remark(false), extBin(false), extTxt(false), createTime(false) {}
  bool deviceGroupId :1;
  bool personGroupId :1;
  bool schedule :1;
  bool remark :1;
  bool extBin :1;
  bool extTxt :1;
  bool createTime :1;
} _PermitBean__isset;

class PermitBean {
 public:

  PermitBean(const PermitBean&);
  PermitBean(PermitBean&&);
  PermitBean& operator=(const PermitBean&);
  PermitBean& operator=(PermitBean&&);
  PermitBean() : _new(0), modified(0), initialized(0), deviceGroupId(0), personGroupId(0), schedule(), remark(), extBin(), extTxt(), createTime(0) {
  }

  virtual ~PermitBean() throw();
  bool _new;
  int32_t modified;
  int32_t initialized;
  int32_t deviceGroupId;
  int32_t personGroupId;
  std::string schedule;
  std::string remark;
  std::string extBin;
  std::string extTxt;
  int64_t createTime;

  _PermitBean__isset __isset;

  void __set__new(const bool val);

  void __set_modified(const int32_t val);

  void __set_initialized(const int32_t val);

  void __set_deviceGroupId(const int32_t val);

  void __set_personGroupId(const int32_t val);

  void __set_schedule(const std::string& val);

  void __set_remark(const std::string& val);

  void __set_extBin(const std::string& val);

  void __set_extTxt(const std::string& val);

  void __set_createTime(const int64_t val);

  bool operator == (const PermitBean & rhs) const
  {
    if (!(_new == rhs._new))
      return false;
    if (!(modified == rhs.modified))
      return false;
    if (!(initialized == rhs.initialized))
      return false;
    if (__isset.deviceGroupId != rhs.__isset.deviceGroupId)
      return false;
    else if (__isset.deviceGroupId && !(deviceGroupId == rhs.deviceGroupId))
      return false;
    if (__isset.personGroupId != rhs.__isset.personGroupId)
      return false;
    else if (__isset.personGroupId && !(personGroupId == rhs.personGroupId))
      return false;
    if (__isset.schedule != rhs.__isset.schedule)
      return false;
    else if (__isset.schedule && !(schedule == rhs.schedule))
      return false;
    if (__isset.remark != rhs.__isset.remark)
      return false;
    else if (__isset.remark && !(remark == rhs.remark))
      return false;
    if (__isset.extBin != rhs.__isset.extBin)
      return false;
    else if (__isset.extBin && !(extBin == rhs.extBin))
      return false;
    if (__isset.extTxt != rhs.__isset.extTxt)
      return false;
    else if (__isset.extTxt && !(extTxt == rhs.extTxt))
      return false;
    if (__isset.createTime != rhs.__isset.createTime)
      return false;
    else if (__isset.createTime && !(createTime == rhs.createTime))
      return false;
    return true;
  }
  bool operator != (const PermitBean &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PermitBean & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PermitBean &a, PermitBean &b);

std::ostream& operator<<(std::ostream& out, const PermitBean& obj);

typedef struct _PersonBean__isset {
  _PersonBean__isset() : id(false), groupId(false), name(false), sex(false), rank(false), password(false), birthdate(false), mobilePhone(false), papersType(false), papersNum(false), imageMd5(false), expiryDate(false), remark(false), extBin(false), extTxt(false), createTime(false), updateTime(false) {}
  bool id :1;
  bool groupId :1;
  bool name :1;
  bool sex :1;
  bool rank :1;
  bool password :1;
  bool birthdate :1;
  bool mobilePhone :1;
  bool papersType :1;
  bool papersNum :1;
  bool imageMd5 :1;
  bool expiryDate :1;
  bool remark :1;
  bool extBin :1;
  bool extTxt :1;
  bool createTime :1;
  bool updateTime :1;
} _PersonBean__isset;

class PersonBean {
 public:

  PersonBean(const PersonBean&);
  PersonBean(PersonBean&&);
  PersonBean& operator=(const PersonBean&);
  PersonBean& operator=(PersonBean&&);
  PersonBean() : _new(0), modified(0), initialized(0), id(0), groupId(0), name(), sex(0), rank(0), password(), birthdate(0), mobilePhone(), papersType(0), papersNum(), imageMd5(), expiryDate(0), remark(), extBin(), extTxt(), createTime(0), updateTime(0) {
  }

  virtual ~PersonBean() throw();
  bool _new;
  int32_t modified;
  int32_t initialized;
  int32_t id;
  int32_t groupId;
  std::string name;
  int32_t sex;
  int32_t rank;
  std::string password;
  int64_t birthdate;
  std::string mobilePhone;
  int32_t papersType;
  std::string papersNum;
  std::string imageMd5;
  int64_t expiryDate;
  std::string remark;
  std::string extBin;
  std::string extTxt;
  int64_t createTime;
  int64_t updateTime;

  _PersonBean__isset __isset;

  void __set__new(const bool val);

  void __set_modified(const int32_t val);

  void __set_initialized(const int32_t val);

  void __set_id(const int32_t val);

  void __set_groupId(const int32_t val);

  void __set_name(const std::string& val);

  void __set_sex(const int32_t val);

  void __set_rank(const int32_t val);

  void __set_password(const std::string& val);

  void __set_birthdate(const int64_t val);

  void __set_mobilePhone(const std::string& val);

  void __set_papersType(const int32_t val);

  void __set_papersNum(const std::string& val);

  void __set_imageMd5(const std::string& val);

  void __set_expiryDate(const int64_t val);

  void __set_remark(const std::string& val);

  void __set_extBin(const std::string& val);

  void __set_extTxt(const std::string& val);

  void __set_createTime(const int64_t val);

  void __set_updateTime(const int64_t val);

  bool operator == (const PersonBean & rhs) const
  {
    if (!(_new == rhs._new))
      return false;
    if (!(modified == rhs.modified))
      return false;
    if (!(initialized == rhs.initialized))
      return false;
    if (__isset.id != rhs.__isset.id)
      return false;
    else if (__isset.id && !(id == rhs.id))
      return false;
    if (__isset.groupId != rhs.__isset.groupId)
      return false;
    else if (__isset.groupId && !(groupId == rhs.groupId))
      return false;
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    if (__isset.sex != rhs.__isset.sex)
      return false;
    else if (__isset.sex && !(sex == rhs.sex))
      return false;
    if (__isset.rank != rhs.__isset.rank)
      return false;
    else if (__isset.rank && !(rank == rhs.rank))
      return false;
    if (__isset.password != rhs.__isset.password)
      return false;
    else if (__isset.password && !(password == rhs.password))
      return false;
    if (__isset.birthdate != rhs.__isset.birthdate)
      return false;
    else if (__isset.birthdate && !(birthdate == rhs.birthdate))
      return false;
    if (__isset.mobilePhone != rhs.__isset.mobilePhone)
      return false;
    else if (__isset.mobilePhone && !(mobilePhone == rhs.mobilePhone))
      return false;
    if (__isset.papersType != rhs.__isset.papersType)
      return false;
    else if (__isset.papersType && !(papersType == rhs.papersType))
      return false;
    if (__isset.papersNum != rhs.__isset.papersNum)
      return false;
    else if (__isset.papersNum && !(papersNum == rhs.papersNum))
      return false;
    if (__isset.imageMd5 != rhs.__isset.imageMd5)
      return false;
    else if (__isset.imageMd5 && !(imageMd5 == rhs.imageMd5))
      return false;
    if (__isset.expiryDate != rhs.__isset.expiryDate)
      return false;
    else if (__isset.expiryDate && !(expiryDate == rhs.expiryDate))
      return false;
    if (__isset.remark != rhs.__isset.remark)
      return false;
    else if (__isset.remark && !(remark == rhs.remark))
      return false;
    if (__isset.extBin != rhs.__isset.extBin)
      return false;
    else if (__isset.extBin && !(extBin == rhs.extBin))
      return false;
    if (__isset.extTxt != rhs.__isset.extTxt)
      return false;
    else if (__isset.extTxt && !(extTxt == rhs.extTxt))
      return false;
    if (__isset.createTime != rhs.__isset.createTime)
      return false;
    else if (__isset.createTime && !(createTime == rhs.createTime))
      return false;
    if (__isset.updateTime != rhs.__isset.updateTime)
      return false;
    else if (__isset.updateTime && !(updateTime == rhs.updateTime))
      return false;
    return true;
  }
  bool operator != (const PersonBean &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PersonBean & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PersonBean &a, PersonBean &b);

std::ostream& operator<<(std::ostream& out, const PersonBean& obj);

typedef struct _PersonGroupBean__isset {
  _PersonGroupBean__isset() : id(false), name(false), leaf(false), parent(false), rootGroup(false), remark(false), extBin(false), extTxt(false), createTime(false), updateTime(false) {}
  bool id :1;
  bool name :1;
  bool leaf :1;
  bool parent :1;
  bool rootGroup :1;
  bool remark :1;
  bool extBin :1;
  bool extTxt :1;
  bool createTime :1;
  bool updateTime :1;
} _PersonGroupBean__isset;

class PersonGroupBean {
 public:

  PersonGroupBean(const PersonGroupBean&);
  PersonGroupBean(PersonGroupBean&&);
  PersonGroupBean& operator=(const PersonGroupBean&);
  PersonGroupBean& operator=(PersonGroupBean&&);
  PersonGroupBean() : _new(0), modified(0), initialized(0), id(0), name(), leaf(0), parent(0), rootGroup(0), remark(), extBin(), extTxt(), createTime(0), updateTime(0) {
  }

  virtual ~PersonGroupBean() throw();
  bool _new;
  int32_t modified;
  int32_t initialized;
  int32_t id;
  std::string name;
  int32_t leaf;
  int32_t parent;
  int32_t rootGroup;
  std::string remark;
  std::string extBin;
  std::string extTxt;
  int64_t createTime;
  int64_t updateTime;

  _PersonGroupBean__isset __isset;

  void __set__new(const bool val);

  void __set_modified(const int32_t val);

  void __set_initialized(const int32_t val);

  void __set_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_leaf(const int32_t val);

  void __set_parent(const int32_t val);

  void __set_rootGroup(const int32_t val);

  void __set_remark(const std::string& val);

  void __set_extBin(const std::string& val);

  void __set_extTxt(const std::string& val);

  void __set_createTime(const int64_t val);

  void __set_updateTime(const int64_t val);

  bool operator == (const PersonGroupBean & rhs) const
  {
    if (!(_new == rhs._new))
      return false;
    if (!(modified == rhs.modified))
      return false;
    if (!(initialized == rhs.initialized))
      return false;
    if (__isset.id != rhs.__isset.id)
      return false;
    else if (__isset.id && !(id == rhs.id))
      return false;
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    if (__isset.leaf != rhs.__isset.leaf)
      return false;
    else if (__isset.leaf && !(leaf == rhs.leaf))
      return false;
    if (__isset.parent != rhs.__isset.parent)
      return false;
    else if (__isset.parent && !(parent == rhs.parent))
      return false;
    if (__isset.rootGroup != rhs.__isset.rootGroup)
      return false;
    else if (__isset.rootGroup && !(rootGroup == rhs.rootGroup))
      return false;
    if (__isset.remark != rhs.__isset.remark)
      return false;
    else if (__isset.remark && !(remark == rhs.remark))
      return false;
    if (__isset.extBin != rhs.__isset.extBin)
      return false;
    else if (__isset.extBin && !(extBin == rhs.extBin))
      return false;
    if (__isset.extTxt != rhs.__isset.extTxt)
      return false;
    else if (__isset.extTxt && !(extTxt == rhs.extTxt))
      return false;
    if (__isset.createTime != rhs.__isset.createTime)
      return false;
    else if (__isset.createTime && !(createTime == rhs.createTime))
      return false;
    if (__isset.updateTime != rhs.__isset.updateTime)
      return false;
    else if (__isset.updateTime && !(updateTime == rhs.updateTime))
      return false;
    return true;
  }
  bool operator != (const PersonGroupBean &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PersonGroupBean & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PersonGroupBean &a, PersonGroupBean &b);

std::ostream& operator<<(std::ostream& out, const PersonGroupBean& obj);

typedef struct _LogLightBean__isset {
  _LogLightBean__isset() : id(false), personId(false), name(false), papersType(false), papersNum(false), verifyTime(false) {}
  bool id :1;
  bool personId :1;
  bool name :1;
  bool papersType :1;
  bool papersNum :1;
  bool verifyTime :1;
} _LogLightBean__isset;

class LogLightBean {
 public:

  LogLightBean(const LogLightBean&);
  LogLightBean(LogLightBean&&);
  LogLightBean& operator=(const LogLightBean&);
  LogLightBean& operator=(LogLightBean&&);
  LogLightBean() : _new(0), modified(0), initialized(0), id(0), personId(0), name(), papersType(0), papersNum(), verifyTime(0) {
  }

  virtual ~LogLightBean() throw();
  bool _new;
  int32_t modified;
  int32_t initialized;
  int32_t id;
  int32_t personId;
  std::string name;
  int32_t papersType;
  std::string papersNum;
  int64_t verifyTime;

  _LogLightBean__isset __isset;

  void __set__new(const bool val);

  void __set_modified(const int32_t val);

  void __set_initialized(const int32_t val);

  void __set_id(const int32_t val);

  void __set_personId(const int32_t val);

  void __set_name(const std::string& val);

  void __set_papersType(const int32_t val);

  void __set_papersNum(const std::string& val);

  void __set_verifyTime(const int64_t val);

  bool operator == (const LogLightBean & rhs) const
  {
    if (!(_new == rhs._new))
      return false;
    if (!(modified == rhs.modified))
      return false;
    if (!(initialized == rhs.initialized))
      return false;
    if (__isset.id != rhs.__isset.id)
      return false;
    else if (__isset.id && !(id == rhs.id))
      return false;
    if (__isset.personId != rhs.__isset.personId)
      return false;
    else if (__isset.personId && !(personId == rhs.personId))
      return false;
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    if (__isset.papersType != rhs.__isset.papersType)
      return false;
    else if (__isset.papersType && !(papersType == rhs.papersType))
      return false;
    if (__isset.papersNum != rhs.__isset.papersNum)
      return false;
    else if (__isset.papersNum && !(papersNum == rhs.papersNum))
      return false;
    if (__isset.verifyTime != rhs.__isset.verifyTime)
      return false;
    else if (__isset.verifyTime && !(verifyTime == rhs.verifyTime))
      return false;
    return true;
  }
  bool operator != (const LogLightBean &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogLightBean & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LogLightBean &a, LogLightBean &b);

std::ostream& operator<<(std::ostream& out, const LogLightBean& obj);

typedef struct _Token__isset {
  _Token__isset() : type(false) {}
  bool type :1;
} _Token__isset;

class Token {
 public:

  Token(const Token&);
  Token(Token&&);
  Token& operator=(const Token&);
  Token& operator=(Token&&);
  Token() : id(0), t1(0), t2(0), t3(0), t4(0), type((TokenType::type)0) {
  }

  virtual ~Token() throw();
  int32_t id;
  int32_t t1;
  int32_t t2;
  int32_t t3;
  int32_t t4;
  TokenType::type type;

  _Token__isset __isset;

  void __set_id(const int32_t val);

  void __set_t1(const int32_t val);

  void __set_t2(const int32_t val);

  void __set_t3(const int32_t val);

  void __set_t4(const int32_t val);

  void __set_type(const TokenType::type val);

  bool operator == (const Token & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(t1 == rhs.t1))
      return false;
    if (!(t2 == rhs.t2))
      return false;
    if (!(t3 == rhs.t3))
      return false;
    if (!(t4 == rhs.t4))
      return false;
    if (__isset.type != rhs.__isset.type)
      return false;
    else if (__isset.type && !(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const Token &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Token & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Token &a, Token &b);

std::ostream& operator<<(std::ostream& out, const Token& obj);

typedef struct _ServiceSecurityException__isset {
  _ServiceSecurityException__isset() : message(false), causeClass(false), serviceStackTraceMessage(false), causeFields(false), deviceID(false), type(false) {}
  bool message :1;
  bool causeClass :1;
  bool serviceStackTraceMessage :1;
  bool causeFields :1;
  bool deviceID :1;
  bool type :1;
} _ServiceSecurityException__isset;

class ServiceSecurityException : public ::apache::thrift::TException {
 public:

  ServiceSecurityException(const ServiceSecurityException&);
  ServiceSecurityException(ServiceSecurityException&&);
  ServiceSecurityException& operator=(const ServiceSecurityException&);
  ServiceSecurityException& operator=(ServiceSecurityException&&);
  ServiceSecurityException() : message(), causeClass(), serviceStackTraceMessage(), causeFields(), deviceID(0), type((SecurityExceptionType::type)0) {
  }

  virtual ~ServiceSecurityException() throw();
  std::string message;
  std::string causeClass;
  std::string serviceStackTraceMessage;
  std::string causeFields;
  int32_t deviceID;
  SecurityExceptionType::type type;

  _ServiceSecurityException__isset __isset;

  void __set_message(const std::string& val);

  void __set_causeClass(const std::string& val);

  void __set_serviceStackTraceMessage(const std::string& val);

  void __set_causeFields(const std::string& val);

  void __set_deviceID(const int32_t val);

  void __set_type(const SecurityExceptionType::type val);

  bool operator == (const ServiceSecurityException & rhs) const
  {
    if (__isset.message != rhs.__isset.message)
      return false;
    else if (__isset.message && !(message == rhs.message))
      return false;
    if (__isset.causeClass != rhs.__isset.causeClass)
      return false;
    else if (__isset.causeClass && !(causeClass == rhs.causeClass))
      return false;
    if (__isset.serviceStackTraceMessage != rhs.__isset.serviceStackTraceMessage)
      return false;
    else if (__isset.serviceStackTraceMessage && !(serviceStackTraceMessage == rhs.serviceStackTraceMessage))
      return false;
    if (__isset.causeFields != rhs.__isset.causeFields)
      return false;
    else if (__isset.causeFields && !(causeFields == rhs.causeFields))
      return false;
    if (__isset.deviceID != rhs.__isset.deviceID)
      return false;
    else if (__isset.deviceID && !(deviceID == rhs.deviceID))
      return false;
    if (__isset.type != rhs.__isset.type)
      return false;
    else if (__isset.type && !(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const ServiceSecurityException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceSecurityException & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(ServiceSecurityException &a, ServiceSecurityException &b);

std::ostream& operator<<(std::ostream& out, const ServiceSecurityException& obj);

} // namespace

#include "IFaceLog_types.tcc"

#endif
