/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef IFaceLog_TYPES_TCC
#define IFaceLog_TYPES_TCC

#include "IFaceLog_types.h"

namespace gdface {

template <class Protocol_>
uint32_t FaceBean::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__new = false;
  bool isset_modified = false;
  bool isset_initialized = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_new);
          isset__new = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->modified);
          isset_modified = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->initialized);
          isset_initialized = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->imageMd5);
          this->__isset.imageMd5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->faceLeft);
          this->__isset.faceLeft = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->faceTop);
          this->__isset.faceTop = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->faceWidth);
          this->__isset.faceWidth = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->faceHeight);
          this->__isset.faceHeight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eyeLeftx);
          this->__isset.eyeLeftx = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eyeLefty);
          this->__isset.eyeLefty = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eyeRightx);
          this->__isset.eyeRightx = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eyeRighty);
          this->__isset.eyeRighty = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mouthX);
          this->__isset.mouthX = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mouthY);
          this->__isset.mouthY = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->noseX);
          this->__isset.noseX = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->noseY);
          this->__isset.noseY = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->angleYaw);
          this->__isset.angleYaw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->anglePitch);
          this->__isset.anglePitch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->angleRoll);
          this->__isset.angleRoll = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->extInfo);
          this->__isset.extInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->featureMd5);
          this->__isset.featureMd5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__new)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_modified)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_initialized)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

template <class Protocol_>
uint32_t FaceBean::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FaceBean");

  xfer += oprot->writeFieldBegin("_new", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->_new);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("modified", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->modified);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("initialized", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->initialized);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.imageMd5) {
    xfer += oprot->writeFieldBegin("imageMd5", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->imageMd5);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.faceLeft) {
    xfer += oprot->writeFieldBegin("faceLeft", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->faceLeft);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.faceTop) {
    xfer += oprot->writeFieldBegin("faceTop", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->faceTop);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.faceWidth) {
    xfer += oprot->writeFieldBegin("faceWidth", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32(this->faceWidth);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.faceHeight) {
    xfer += oprot->writeFieldBegin("faceHeight", ::apache::thrift::protocol::T_I32, 9);
    xfer += oprot->writeI32(this->faceHeight);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eyeLeftx) {
    xfer += oprot->writeFieldBegin("eyeLeftx", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32(this->eyeLeftx);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eyeLefty) {
    xfer += oprot->writeFieldBegin("eyeLefty", ::apache::thrift::protocol::T_I32, 11);
    xfer += oprot->writeI32(this->eyeLefty);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eyeRightx) {
    xfer += oprot->writeFieldBegin("eyeRightx", ::apache::thrift::protocol::T_I32, 12);
    xfer += oprot->writeI32(this->eyeRightx);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eyeRighty) {
    xfer += oprot->writeFieldBegin("eyeRighty", ::apache::thrift::protocol::T_I32, 13);
    xfer += oprot->writeI32(this->eyeRighty);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.mouthX) {
    xfer += oprot->writeFieldBegin("mouthX", ::apache::thrift::protocol::T_I32, 14);
    xfer += oprot->writeI32(this->mouthX);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.mouthY) {
    xfer += oprot->writeFieldBegin("mouthY", ::apache::thrift::protocol::T_I32, 15);
    xfer += oprot->writeI32(this->mouthY);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noseX) {
    xfer += oprot->writeFieldBegin("noseX", ::apache::thrift::protocol::T_I32, 16);
    xfer += oprot->writeI32(this->noseX);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noseY) {
    xfer += oprot->writeFieldBegin("noseY", ::apache::thrift::protocol::T_I32, 17);
    xfer += oprot->writeI32(this->noseY);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.angleYaw) {
    xfer += oprot->writeFieldBegin("angleYaw", ::apache::thrift::protocol::T_I32, 18);
    xfer += oprot->writeI32(this->angleYaw);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.anglePitch) {
    xfer += oprot->writeFieldBegin("anglePitch", ::apache::thrift::protocol::T_I32, 19);
    xfer += oprot->writeI32(this->anglePitch);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.angleRoll) {
    xfer += oprot->writeFieldBegin("angleRoll", ::apache::thrift::protocol::T_I32, 20);
    xfer += oprot->writeI32(this->angleRoll);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.extInfo) {
    xfer += oprot->writeFieldBegin("extInfo", ::apache::thrift::protocol::T_STRING, 21);
    xfer += oprot->writeBinary(this->extInfo);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.featureMd5) {
    xfer += oprot->writeFieldBegin("featureMd5", ::apache::thrift::protocol::T_STRING, 22);
    xfer += oprot->writeString(this->featureMd5);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t DuplicateRecordException::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->causeClass);
          this->__isset.causeClass = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serviceStackTraceMessage);
          this->__isset.serviceStackTraceMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->causeFields);
          this->__isset.causeFields = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t DuplicateRecordException::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DuplicateRecordException");

  if (this->__isset.message) {
    xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->message);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.causeClass) {
    xfer += oprot->writeFieldBegin("causeClass", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->causeClass);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.serviceStackTraceMessage) {
    xfer += oprot->writeFieldBegin("serviceStackTraceMessage", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->serviceStackTraceMessage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.causeFields) {
    xfer += oprot->writeFieldBegin("causeFields", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->causeFields);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t ServiceRuntimeException::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->causeClass);
          this->__isset.causeClass = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serviceStackTraceMessage);
          this->__isset.serviceStackTraceMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->causeFields);
          this->__isset.causeFields = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

template <class Protocol_>
uint32_t ServiceRuntimeException::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ServiceRuntimeException");

  if (this->__isset.message) {
    xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->message);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.causeClass) {
    xfer += oprot->writeFieldBegin("causeClass", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->causeClass);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.serviceStackTraceMessage) {
    xfer += oprot->writeFieldBegin("serviceStackTraceMessage", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->serviceStackTraceMessage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.causeFields) {
    xfer += oprot->writeFieldBegin("causeFields", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->causeFields);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t FeatureBean::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__new = false;
  bool isset_modified = false;
  bool isset_initialized = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_new);
          isset__new = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->modified);
          isset_modified = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->initialized);
          isset_initialized = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->md5);
          this->__isset.md5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->personId);
          this->__isset.personId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->feature);
          this->__isset.feature = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->updateTime);
          this->__isset.updateTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__new)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_modified)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_initialized)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

template <class Protocol_>
uint32_t FeatureBean::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FeatureBean");

  xfer += oprot->writeFieldBegin("_new", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->_new);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("modified", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->modified);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("initialized", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->initialized);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.md5) {
    xfer += oprot->writeFieldBegin("md5", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->md5);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.version) {
    xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->version);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.personId) {
    xfer += oprot->writeFieldBegin("personId", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->personId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.feature) {
    xfer += oprot->writeFieldBegin("feature", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeBinary(this->feature);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.updateTime) {
    xfer += oprot->writeFieldBegin("updateTime", ::apache::thrift::protocol::T_I64, 8);
    xfer += oprot->writeI64(this->updateTime);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t ImageBean::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__new = false;
  bool isset_modified = false;
  bool isset_initialized = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_new);
          isset__new = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->modified);
          isset_modified = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->initialized);
          isset_initialized = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->md5);
          this->__isset.md5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->format);
          this->__isset.format = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->width);
          this->__isset.width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->height);
          this->__isset.height = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->depth);
          this->__isset.depth = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->faceNum);
          this->__isset.faceNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->thumbMd5);
          this->__isset.thumbMd5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->deviceId);
          this->__isset.deviceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__new)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_modified)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_initialized)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

template <class Protocol_>
uint32_t ImageBean::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ImageBean");

  xfer += oprot->writeFieldBegin("_new", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->_new);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("modified", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->modified);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("initialized", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->initialized);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.md5) {
    xfer += oprot->writeFieldBegin("md5", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->md5);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.format) {
    xfer += oprot->writeFieldBegin("format", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->format);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.width) {
    xfer += oprot->writeFieldBegin("width", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->width);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.height) {
    xfer += oprot->writeFieldBegin("height", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->height);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.depth) {
    xfer += oprot->writeFieldBegin("depth", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32(this->depth);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.faceNum) {
    xfer += oprot->writeFieldBegin("faceNum", ::apache::thrift::protocol::T_I32, 9);
    xfer += oprot->writeI32(this->faceNum);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.thumbMd5) {
    xfer += oprot->writeFieldBegin("thumbMd5", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->thumbMd5);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.deviceId) {
    xfer += oprot->writeFieldBegin("deviceId", ::apache::thrift::protocol::T_I32, 11);
    xfer += oprot->writeI32(this->deviceId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t LogBean::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__new = false;
  bool isset_modified = false;
  bool isset_initialized = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_new);
          isset__new = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->modified);
          isset_modified = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->initialized);
          isset_initialized = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->personId);
          this->__isset.personId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->deviceId);
          this->__isset.deviceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->verifyFeature);
          this->__isset.verifyFeature = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->compareFace);
          this->__isset.compareFace = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->verifyStatus);
          this->__isset.verifyStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->similarty);
          this->__isset.similarty = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->verifyTime);
          this->__isset.verifyTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createTime);
          this->__isset.createTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__new)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_modified)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_initialized)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

template <class Protocol_>
uint32_t LogBean::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LogBean");

  xfer += oprot->writeFieldBegin("_new", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->_new);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("modified", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->modified);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("initialized", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->initialized);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.personId) {
    xfer += oprot->writeFieldBegin("personId", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->personId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.deviceId) {
    xfer += oprot->writeFieldBegin("deviceId", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->deviceId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.verifyFeature) {
    xfer += oprot->writeFieldBegin("verifyFeature", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->verifyFeature);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.compareFace) {
    xfer += oprot->writeFieldBegin("compareFace", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32(this->compareFace);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.verifyStatus) {
    xfer += oprot->writeFieldBegin("verifyStatus", ::apache::thrift::protocol::T_I32, 9);
    xfer += oprot->writeI32(this->verifyStatus);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.similarty) {
    xfer += oprot->writeFieldBegin("similarty", ::apache::thrift::protocol::T_DOUBLE, 10);
    xfer += oprot->writeDouble(this->similarty);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.verifyTime) {
    xfer += oprot->writeFieldBegin("verifyTime", ::apache::thrift::protocol::T_I64, 11);
    xfer += oprot->writeI64(this->verifyTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.createTime) {
    xfer += oprot->writeFieldBegin("createTime", ::apache::thrift::protocol::T_I64, 12);
    xfer += oprot->writeI64(this->createTime);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t DeviceBean::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__new = false;
  bool isset_modified = false;
  bool isset_initialized = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_new);
          isset__new = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->modified);
          isset_modified = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->initialized);
          isset_initialized = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->groupId);
          this->__isset.groupId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->productName);
          this->__isset.productName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->model);
          this->__isset.model = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->vendor);
          this->__isset.vendor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->manufacturer);
          this->__isset.manufacturer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->madeDate);
          this->__isset.madeDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->usedSdks);
          this->__isset.usedSdks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serialNo);
          this->__isset.serialNo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mac);
          this->__isset.mac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->remark);
          this->__isset.remark = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->extBin);
          this->__isset.extBin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->extTxt);
          this->__isset.extTxt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createTime);
          this->__isset.createTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->updateTime);
          this->__isset.updateTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__new)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_modified)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_initialized)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

template <class Protocol_>
uint32_t DeviceBean::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DeviceBean");

  xfer += oprot->writeFieldBegin("_new", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->_new);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("modified", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->modified);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("initialized", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->initialized);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.groupId) {
    xfer += oprot->writeFieldBegin("groupId", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->groupId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.productName) {
    xfer += oprot->writeFieldBegin("productName", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->productName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.model) {
    xfer += oprot->writeFieldBegin("model", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->model);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vendor) {
    xfer += oprot->writeFieldBegin("vendor", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->vendor);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.manufacturer) {
    xfer += oprot->writeFieldBegin("manufacturer", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->manufacturer);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.madeDate) {
    xfer += oprot->writeFieldBegin("madeDate", ::apache::thrift::protocol::T_I64, 11);
    xfer += oprot->writeI64(this->madeDate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.version) {
    xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_STRING, 12);
    xfer += oprot->writeString(this->version);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.usedSdks) {
    xfer += oprot->writeFieldBegin("usedSdks", ::apache::thrift::protocol::T_STRING, 13);
    xfer += oprot->writeString(this->usedSdks);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.serialNo) {
    xfer += oprot->writeFieldBegin("serialNo", ::apache::thrift::protocol::T_STRING, 14);
    xfer += oprot->writeString(this->serialNo);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.mac) {
    xfer += oprot->writeFieldBegin("mac", ::apache::thrift::protocol::T_STRING, 15);
    xfer += oprot->writeString(this->mac);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.remark) {
    xfer += oprot->writeFieldBegin("remark", ::apache::thrift::protocol::T_STRING, 16);
    xfer += oprot->writeString(this->remark);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.extBin) {
    xfer += oprot->writeFieldBegin("extBin", ::apache::thrift::protocol::T_STRING, 17);
    xfer += oprot->writeBinary(this->extBin);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.extTxt) {
    xfer += oprot->writeFieldBegin("extTxt", ::apache::thrift::protocol::T_STRING, 18);
    xfer += oprot->writeString(this->extTxt);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.createTime) {
    xfer += oprot->writeFieldBegin("createTime", ::apache::thrift::protocol::T_I64, 19);
    xfer += oprot->writeI64(this->createTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.updateTime) {
    xfer += oprot->writeFieldBegin("updateTime", ::apache::thrift::protocol::T_I64, 20);
    xfer += oprot->writeI64(this->updateTime);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t DeviceGroupBean::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__new = false;
  bool isset_modified = false;
  bool isset_initialized = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_new);
          isset__new = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->modified);
          isset_modified = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->initialized);
          isset_initialized = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->leaf);
          this->__isset.leaf = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->parent);
          this->__isset.parent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rootGroup);
          this->__isset.rootGroup = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->schedule);
          this->__isset.schedule = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->remark);
          this->__isset.remark = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->extBin);
          this->__isset.extBin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->extTxt);
          this->__isset.extTxt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createTime);
          this->__isset.createTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->updateTime);
          this->__isset.updateTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__new)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_modified)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_initialized)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

template <class Protocol_>
uint32_t DeviceGroupBean::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DeviceGroupBean");

  xfer += oprot->writeFieldBegin("_new", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->_new);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("modified", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->modified);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("initialized", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->initialized);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.leaf) {
    xfer += oprot->writeFieldBegin("leaf", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->leaf);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.parent) {
    xfer += oprot->writeFieldBegin("parent", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->parent);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rootGroup) {
    xfer += oprot->writeFieldBegin("rootGroup", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32(this->rootGroup);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.schedule) {
    xfer += oprot->writeFieldBegin("schedule", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->schedule);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.remark) {
    xfer += oprot->writeFieldBegin("remark", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->remark);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.extBin) {
    xfer += oprot->writeFieldBegin("extBin", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeBinary(this->extBin);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.extTxt) {
    xfer += oprot->writeFieldBegin("extTxt", ::apache::thrift::protocol::T_STRING, 12);
    xfer += oprot->writeString(this->extTxt);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.createTime) {
    xfer += oprot->writeFieldBegin("createTime", ::apache::thrift::protocol::T_I64, 13);
    xfer += oprot->writeI64(this->createTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.updateTime) {
    xfer += oprot->writeFieldBegin("updateTime", ::apache::thrift::protocol::T_I64, 14);
    xfer += oprot->writeI64(this->updateTime);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t PermitBean::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__new = false;
  bool isset_modified = false;
  bool isset_initialized = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_new);
          isset__new = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->modified);
          isset_modified = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->initialized);
          isset_initialized = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->deviceGroupId);
          this->__isset.deviceGroupId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->personGroupId);
          this->__isset.personGroupId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->schedule);
          this->__isset.schedule = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->remark);
          this->__isset.remark = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->extBin);
          this->__isset.extBin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->extTxt);
          this->__isset.extTxt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createTime);
          this->__isset.createTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__new)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_modified)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_initialized)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

template <class Protocol_>
uint32_t PermitBean::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PermitBean");

  xfer += oprot->writeFieldBegin("_new", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->_new);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("modified", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->modified);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("initialized", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->initialized);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.deviceGroupId) {
    xfer += oprot->writeFieldBegin("deviceGroupId", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->deviceGroupId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.personGroupId) {
    xfer += oprot->writeFieldBegin("personGroupId", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->personGroupId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.schedule) {
    xfer += oprot->writeFieldBegin("schedule", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->schedule);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.remark) {
    xfer += oprot->writeFieldBegin("remark", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->remark);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.extBin) {
    xfer += oprot->writeFieldBegin("extBin", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeBinary(this->extBin);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.extTxt) {
    xfer += oprot->writeFieldBegin("extTxt", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->extTxt);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.createTime) {
    xfer += oprot->writeFieldBegin("createTime", ::apache::thrift::protocol::T_I64, 10);
    xfer += oprot->writeI64(this->createTime);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t PersonBean::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__new = false;
  bool isset_modified = false;
  bool isset_initialized = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_new);
          isset__new = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->modified);
          isset_modified = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->initialized);
          isset_initialized = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->groupId);
          this->__isset.groupId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sex);
          this->__isset.sex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rank);
          this->__isset.rank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->password);
          this->__isset.password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->birthdate);
          this->__isset.birthdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mobilePhone);
          this->__isset.mobilePhone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->papersType);
          this->__isset.papersType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->papersNum);
          this->__isset.papersNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->imageMd5);
          this->__isset.imageMd5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->expiryDate);
          this->__isset.expiryDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->remark);
          this->__isset.remark = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->extBin);
          this->__isset.extBin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->extTxt);
          this->__isset.extTxt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createTime);
          this->__isset.createTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->updateTime);
          this->__isset.updateTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__new)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_modified)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_initialized)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

template <class Protocol_>
uint32_t PersonBean::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PersonBean");

  xfer += oprot->writeFieldBegin("_new", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->_new);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("modified", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->modified);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("initialized", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->initialized);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.groupId) {
    xfer += oprot->writeFieldBegin("groupId", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->groupId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sex) {
    xfer += oprot->writeFieldBegin("sex", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->sex);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rank) {
    xfer += oprot->writeFieldBegin("rank", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32(this->rank);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.password) {
    xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->password);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.birthdate) {
    xfer += oprot->writeFieldBegin("birthdate", ::apache::thrift::protocol::T_I64, 10);
    xfer += oprot->writeI64(this->birthdate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.mobilePhone) {
    xfer += oprot->writeFieldBegin("mobilePhone", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->mobilePhone);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.papersType) {
    xfer += oprot->writeFieldBegin("papersType", ::apache::thrift::protocol::T_I32, 12);
    xfer += oprot->writeI32(this->papersType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.papersNum) {
    xfer += oprot->writeFieldBegin("papersNum", ::apache::thrift::protocol::T_STRING, 13);
    xfer += oprot->writeString(this->papersNum);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.imageMd5) {
    xfer += oprot->writeFieldBegin("imageMd5", ::apache::thrift::protocol::T_STRING, 14);
    xfer += oprot->writeString(this->imageMd5);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.expiryDate) {
    xfer += oprot->writeFieldBegin("expiryDate", ::apache::thrift::protocol::T_I64, 15);
    xfer += oprot->writeI64(this->expiryDate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.remark) {
    xfer += oprot->writeFieldBegin("remark", ::apache::thrift::protocol::T_STRING, 16);
    xfer += oprot->writeString(this->remark);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.extBin) {
    xfer += oprot->writeFieldBegin("extBin", ::apache::thrift::protocol::T_STRING, 17);
    xfer += oprot->writeBinary(this->extBin);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.extTxt) {
    xfer += oprot->writeFieldBegin("extTxt", ::apache::thrift::protocol::T_STRING, 18);
    xfer += oprot->writeString(this->extTxt);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.createTime) {
    xfer += oprot->writeFieldBegin("createTime", ::apache::thrift::protocol::T_I64, 19);
    xfer += oprot->writeI64(this->createTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.updateTime) {
    xfer += oprot->writeFieldBegin("updateTime", ::apache::thrift::protocol::T_I64, 20);
    xfer += oprot->writeI64(this->updateTime);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t PersonGroupBean::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__new = false;
  bool isset_modified = false;
  bool isset_initialized = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_new);
          isset__new = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->modified);
          isset_modified = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->initialized);
          isset_initialized = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->leaf);
          this->__isset.leaf = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->parent);
          this->__isset.parent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rootGroup);
          this->__isset.rootGroup = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->remark);
          this->__isset.remark = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->extBin);
          this->__isset.extBin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->extTxt);
          this->__isset.extTxt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createTime);
          this->__isset.createTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->updateTime);
          this->__isset.updateTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__new)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_modified)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_initialized)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

template <class Protocol_>
uint32_t PersonGroupBean::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PersonGroupBean");

  xfer += oprot->writeFieldBegin("_new", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->_new);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("modified", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->modified);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("initialized", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->initialized);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.leaf) {
    xfer += oprot->writeFieldBegin("leaf", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->leaf);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.parent) {
    xfer += oprot->writeFieldBegin("parent", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->parent);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rootGroup) {
    xfer += oprot->writeFieldBegin("rootGroup", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32(this->rootGroup);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.remark) {
    xfer += oprot->writeFieldBegin("remark", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->remark);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.extBin) {
    xfer += oprot->writeFieldBegin("extBin", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeBinary(this->extBin);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.extTxt) {
    xfer += oprot->writeFieldBegin("extTxt", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->extTxt);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.createTime) {
    xfer += oprot->writeFieldBegin("createTime", ::apache::thrift::protocol::T_I64, 12);
    xfer += oprot->writeI64(this->createTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.updateTime) {
    xfer += oprot->writeFieldBegin("updateTime", ::apache::thrift::protocol::T_I64, 13);
    xfer += oprot->writeI64(this->updateTime);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t LogLightBean::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__new = false;
  bool isset_modified = false;
  bool isset_initialized = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_new);
          isset__new = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->modified);
          isset_modified = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->initialized);
          isset_initialized = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->personId);
          this->__isset.personId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->papersType);
          this->__isset.papersType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->papersNum);
          this->__isset.papersNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->verifyTime);
          this->__isset.verifyTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__new)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_modified)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_initialized)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

template <class Protocol_>
uint32_t LogLightBean::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LogLightBean");

  xfer += oprot->writeFieldBegin("_new", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->_new);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("modified", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->modified);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("initialized", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->initialized);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.personId) {
    xfer += oprot->writeFieldBegin("personId", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->personId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.papersType) {
    xfer += oprot->writeFieldBegin("papersType", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->papersType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.papersNum) {
    xfer += oprot->writeFieldBegin("papersNum", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->papersNum);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.verifyTime) {
    xfer += oprot->writeFieldBegin("verifyTime", ::apache::thrift::protocol::T_I64, 9);
    xfer += oprot->writeI64(this->verifyTime);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t Token::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id = false;
  bool isset_t1 = false;
  bool isset_t2 = false;
  bool isset_t3 = false;
  bool isset_t4 = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          isset_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->t1);
          isset_t1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->t2);
          isset_t2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->t3);
          isset_t3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->t4);
          isset_t4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast48;
          xfer += iprot->readI32(ecast48);
          this->type = (TokenType::type)ecast48;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_t1)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_t2)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_t3)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_t4)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

template <class Protocol_>
uint32_t Token::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Token");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("t1", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->t1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("t2", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->t2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("t3", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->t3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("t4", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->t4);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.type) {
    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32((int32_t)this->type);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t ServiceSecurityException::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->causeClass);
          this->__isset.causeClass = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serviceStackTraceMessage);
          this->__isset.serviceStackTraceMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->causeFields);
          this->__isset.causeFields = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->deviceID);
          this->__isset.deviceID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast53;
          xfer += iprot->readI32(ecast53);
          this->type = (SecurityExceptionType::type)ecast53;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t ServiceSecurityException::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ServiceSecurityException");

  if (this->__isset.message) {
    xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->message);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.causeClass) {
    xfer += oprot->writeFieldBegin("causeClass", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->causeClass);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.serviceStackTraceMessage) {
    xfer += oprot->writeFieldBegin("serviceStackTraceMessage", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->serviceStackTraceMessage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.causeFields) {
    xfer += oprot->writeFieldBegin("causeFields", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->causeFields);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.deviceID) {
    xfer += oprot->writeFieldBegin("deviceID", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->deviceID);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.type) {
    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32((int32_t)this->type);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

} // namespace

#endif
