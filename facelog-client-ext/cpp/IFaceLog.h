/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef IFaceLog_H
#define IFaceLog_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "IFaceLog_types.h"

namespace gdface {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class IFaceLogIf {
 public:
  virtual ~IFaceLogIf() {}
  virtual void addFeature(FeatureBean& _return, const std::string& feature, const std::string& featureVersion, const int32_t personId, const std::vector<FaceBean> & faecBeans, const std::string& removed, const Token& token) = 0;
  virtual void addFeatureMulti(FeatureBean& _return, const std::string& feature, const std::string& featureVersion, const int32_t personId, const std::vector<std::string> & photos, const std::vector<FaceBean> & faces, const std::string& removed, const Token& token) = 0;
  virtual void addFeatureWithImage(FeatureBean& _return, const std::string& feature, const std::string& featureVersion, const int32_t personId, const bool asIdPhotoIfAbsent, const std::string& featurePhoto, const FaceBean& faceBean, const std::string& removed, const Token& token) = 0;
  virtual void addImage(ImageBean& _return, const std::string& imageData, const int32_t deviceId, const FaceBean& faceBean, const int32_t personId, const Token& token) = 0;
  virtual void addLog(const LogBean& logBean, const Token& token) = 0;
  virtual void addLogFull(const LogBean& logBean, const FaceBean& faceBean, const std::string& featureImage, const Token& token) = 0;
  virtual void addLogs(const std::vector<LogBean> & beans, const Token& token) = 0;
  virtual void addLogsFull(const std::vector<LogBean> & logBeans, const std::vector<FaceBean> & faceBeans, const std::vector<std::string> & featureImages, const Token& token) = 0;
  virtual void applyAckChannel(std::string& _return, const Token& token) = 0;
  virtual void applyAckChannelWithDuration(std::string& _return, const int32_t duration, const Token& token) = 0;
  virtual int32_t applyCmdSn(const Token& token) = 0;
  virtual void applyPersonToken(Token& _return, const int32_t personId, const std::string& password, const bool isMd5) = 0;
  virtual void applyRootToken(Token& _return, const std::string& password, const bool isMd5) = 0;
  virtual void applyUserToken(Token& _return, const int32_t userid, const std::string& password, const bool isMd5) = 0;
  virtual void bindBorder(const int32_t personGroupId, const int32_t deviceGroupId, const Token& token) = 0;
  virtual void childListForDeviceGroup(std::vector<int32_t> & _return, const int32_t deviceGroupId) = 0;
  virtual void childListForPersonGroup(std::vector<int32_t> & _return, const int32_t personGroupId) = 0;
  virtual int32_t countDeviceByWhere(const std::string& where) = 0;
  virtual int32_t countDeviceGroupByWhere(const std::string& where) = 0;
  virtual int32_t countLogByWhere(const std::string& where) = 0;
  virtual int32_t countLogLightByVerifyTime(const int64_t timestamp) = 0;
  virtual int32_t countLogLightByVerifyTimeTimestr(const std::string& timestamp) = 0;
  virtual int32_t countLogLightByWhere(const std::string& where) = 0;
  virtual int32_t countPersonByWhere(const std::string& where) = 0;
  virtual int32_t countPersonGroupByWhere(const std::string& where) = 0;
  virtual void countPersonLog(std::map<std::string, int32_t> & _return, const int32_t personId, const int64_t startDate, const int64_t endDate) = 0;
  virtual void countPersonLogTimeStr(std::map<std::string, int32_t> & _return, const int32_t personId, const std::string& startDate, const std::string& endDate) = 0;
  virtual int32_t deleteAllFeaturesByPersonId(const int32_t personId, const bool deleteImage, const Token& token) = 0;
  virtual bool deleteDevice(const int32_t id, const Token& token) = 0;
  virtual bool deleteDeviceByMac(const std::string& mac, const Token& token) = 0;
  virtual int32_t deleteDeviceGroup(const int32_t deviceGroupId, const Token& token) = 0;
  virtual void deleteFeature(std::vector<std::string> & _return, const std::string& featureMd5, const bool deleteImage, const Token& token) = 0;
  virtual int32_t deleteGroupPermitOnDeviceGroup(const int32_t deviceGroupId, const Token& token) = 0;
  virtual int32_t deleteImage(const std::string& imageMd5, const Token& token) = 0;
  virtual int32_t deletePermitById(const int32_t deviceGroupId, const int32_t personGroupId, const Token& token) = 0;
  virtual int32_t deletePerson(const int32_t personId, const Token& token) = 0;
  virtual int32_t deletePersonByPapersNum(const std::string& papersNum, const Token& token) = 0;
  virtual int32_t deletePersonGroup(const int32_t personGroupId, const Token& token) = 0;
  virtual int32_t deletePersonGroupPermit(const int32_t personGroupId, const Token& token) = 0;
  virtual int32_t deletePersons(const std::vector<int32_t> & personIdList, const Token& token) = 0;
  virtual int32_t deletePersonsByPapersNum(const std::vector<std::string> & papersNumlist, const Token& token) = 0;
  virtual void disablePerson(const int32_t personId, const int32_t moveToGroupId, const bool deletePhoto, const bool deleteFeature, const bool deleteLog, const Token& token) = 0;
  virtual void disablePersonList(const std::vector<int32_t> & personIdList, const Token& token) = 0;
  virtual bool existsDevice(const int32_t id) = 0;
  virtual bool existsFeature(const std::string& md5) = 0;
  virtual bool existsImage(const std::string& md5) = 0;
  virtual bool existsPerson(const int32_t persionId) = 0;
  virtual void getDevice(DeviceBean& _return, const int32_t deviceId) = 0;
  virtual void getDeviceByMac(DeviceBean& _return, const std::string& mac) = 0;
  virtual void getDeviceGroup(DeviceGroupBean& _return, const int32_t deviceGroupId) = 0;
  virtual void getDeviceGroups(std::vector<DeviceGroupBean> & _return, const std::vector<int32_t> & groupIdList) = 0;
  virtual void getDeviceGroupsBelongs(std::vector<int32_t> & _return, const int32_t deviceId) = 0;
  virtual void getDeviceGroupsPermit(std::vector<int32_t> & _return, const int32_t personGroupId) = 0;
  virtual void getDeviceGroupsPermittedBy(std::vector<int32_t> & _return, const int32_t personGroupId) = 0;
  virtual int32_t getDeviceIdOfFeature(const std::string& featureMd5) = 0;
  virtual void getDevices(std::vector<DeviceBean> & _return, const std::vector<int32_t> & idList) = 0;
  virtual void getDevicesOfGroup(std::vector<int32_t> & _return, const int32_t deviceGroupId) = 0;
  virtual void getFace(FaceBean& _return, const int32_t faceId) = 0;
  virtual void getFacesOfFeature(std::vector<FaceBean> & _return, const std::string& featureMd5) = 0;
  virtual void getFacesOfImage(std::vector<FaceBean> & _return, const std::string& imageMd5) = 0;
  virtual void getFeature(FeatureBean& _return, const std::string& md5) = 0;
  virtual void getFeatureBytes(std::string& _return, const std::string& md5) = 0;
  virtual void getFeatures(std::vector<FeatureBean> & _return, const std::vector<std::string> & md5List) = 0;
  virtual void getFeaturesByPersonIdAndSdkVersion(std::vector<std::string> & _return, const int32_t personId, const std::string& sdkVersion) = 0;
  virtual void getFeaturesOfImage(std::vector<std::string> & _return, const std::string& imageMd5) = 0;
  virtual void getFeaturesOfPerson(std::vector<std::string> & _return, const int32_t personId) = 0;
  virtual void getFeaturesPermittedOnDevice(std::vector<std::string> & _return, const int32_t deviceId, const bool ignoreSchedule, const std::string& sdkVersion, const std::vector<std::string> & excludeFeatureIds, const int64_t timestamp) = 0;
  virtual void getGroupPermit(PermitBean& _return, const int32_t deviceId, const int32_t personGroupId) = 0;
  virtual void getGroupPermitOnDeviceGroup(PermitBean& _return, const int32_t deviceGroupId, const int32_t personGroupId) = 0;
  virtual void getGroupPermits(std::vector<PermitBean> & _return, const int32_t deviceId, const std::vector<int32_t> & personGroupIdList) = 0;
  virtual void getImage(ImageBean& _return, const std::string& imageMD5) = 0;
  virtual void getImageBytes(std::string& _return, const std::string& imageMD5) = 0;
  virtual void getImageBytesRef(std::string& _return, const std::string& primaryKey, const std::string& refType) = 0;
  virtual void getImagesAssociatedByFeature(std::vector<std::string> & _return, const std::string& featureMd5) = 0;
  virtual void getLogBeansByPersonId(std::vector<LogBean> & _return, const int32_t personId) = 0;
  virtual void getPerson(PersonBean& _return, const int32_t personId) = 0;
  virtual void getPersonByMobilePhone(PersonBean& _return, const std::string& mobilePhone) = 0;
  virtual void getPersonByPapersNum(PersonBean& _return, const std::string& papersNum) = 0;
  virtual void getPersonGroup(PersonGroupBean& _return, const int32_t personGroupId) = 0;
  virtual void getPersonGroups(std::vector<PersonGroupBean> & _return, const std::vector<int32_t> & groupIdList) = 0;
  virtual void getPersonGroupsBelongs(std::vector<int32_t> & _return, const int32_t personId) = 0;
  virtual void getPersonGroupsPermittedBy(std::vector<int32_t> & _return, const int32_t deviceGroupId) = 0;
  virtual void getPersonPermit(PermitBean& _return, const int32_t deviceId, const int32_t personId) = 0;
  virtual void getPersonPermits(std::vector<PermitBean> & _return, const int32_t deviceId, const std::vector<int32_t> & personIdList) = 0;
  virtual void getPersons(std::vector<PersonBean> & _return, const std::vector<int32_t> & idList) = 0;
  virtual void getPersonsOfGroup(std::vector<int32_t> & _return, const int32_t personGroupId) = 0;
  virtual void getPersonsPermittedOnDevice(std::vector<int32_t> & _return, const int32_t deviceId, const bool ignoreSchedule, const std::vector<int32_t> & excludePersonIds, const int64_t timestamp) = 0;
  virtual void getProperties(std::map<std::string, std::string> & _return, const std::string& prefix, const Token& token) = 0;
  virtual void getProperty(std::string& _return, const std::string& key, const Token& token) = 0;
  virtual void getRedisParameters(std::map<MQParam::type, std::string> & _return, const Token& token) = 0;
  virtual void getServiceConfig(std::map<std::string, std::string> & _return, const Token& token) = 0;
  virtual void getSubDeviceGroup(std::vector<int32_t> & _return, const int32_t deviceGroupId) = 0;
  virtual void getSubPersonGroup(std::vector<int32_t> & _return, const int32_t personGroupId) = 0;
  virtual bool isDisable(const int32_t personId) = 0;
  virtual bool isLocal() = 0;
  virtual bool isValidAckChannel(const std::string& ackChannel) = 0;
  virtual bool isValidCmdSn(const int32_t cmdSn) = 0;
  virtual bool isValidDeviceToken(const Token& token) = 0;
  virtual bool isValidPassword(const std::string& userId, const std::string& password, const bool isMd5) = 0;
  virtual bool isValidPersonToken(const Token& token) = 0;
  virtual bool isValidRootToken(const Token& token) = 0;
  virtual bool isValidToken(const Token& token) = 0;
  virtual bool isValidUserToken(const Token& token) = 0;
  virtual void listOfParentForDeviceGroup(std::vector<int32_t> & _return, const int32_t deviceGroupId) = 0;
  virtual void listOfParentForPersonGroup(std::vector<int32_t> & _return, const int32_t personGroupId) = 0;
  virtual void loadAllPerson(std::vector<int32_t> & _return) = 0;
  virtual void loadDeviceByWhere(std::vector<DeviceBean> & _return, const std::string& where, const int32_t startRow, const int32_t numRows) = 0;
  virtual void loadDeviceGroupByWhere(std::vector<int32_t> & _return, const std::string& where, const int32_t startRow, const int32_t numRows) = 0;
  virtual void loadDeviceGroupIdByWhere(std::vector<int32_t> & _return, const std::string& where) = 0;
  virtual void loadDeviceIdByWhere(std::vector<int32_t> & _return, const std::string& where) = 0;
  virtual void loadDistinctIntegerColumn(std::vector<int32_t> & _return, const std::string& table, const std::string& column, const std::string& where) = 0;
  virtual void loadDistinctStringColumn(std::vector<std::string> & _return, const std::string& table, const std::string& column, const std::string& where) = 0;
  virtual void loadFeatureMd5ByUpdate(std::vector<std::string> & _return, const int64_t timestamp) = 0;
  virtual void loadFeatureMd5ByUpdateTimeStr(std::vector<std::string> & _return, const std::string& timestamp) = 0;
  virtual void loadLogByWhere(std::vector<LogBean> & _return, const std::string& where, const int32_t startRow, const int32_t numRows) = 0;
  virtual void loadLogLightByVerifyTime(std::vector<LogLightBean> & _return, const int64_t timestamp, const int32_t startRow, const int32_t numRows) = 0;
  virtual void loadLogLightByVerifyTimeTimestr(std::vector<LogLightBean> & _return, const std::string& timestamp, const int32_t startRow, const int32_t numRows) = 0;
  virtual void loadLogLightByWhere(std::vector<LogLightBean> & _return, const std::string& where, const int32_t startRow, const int32_t numRows) = 0;
  virtual void loadPermitByUpdate(std::vector<PermitBean> & _return, const int64_t timestamp) = 0;
  virtual void loadPermitByUpdateTimestr(std::vector<PermitBean> & _return, const std::string& timestamp) = 0;
  virtual void loadPersonByWhere(std::vector<PersonBean> & _return, const std::string& where, const int32_t startRow, const int32_t numRows) = 0;
  virtual void loadPersonGroupByWhere(std::vector<int32_t> & _return, const std::string& where, const int32_t startRow, const int32_t numRows) = 0;
  virtual void loadPersonGroupIdByWhere(std::vector<int32_t> & _return, const std::string& where) = 0;
  virtual void loadPersonIdByUpdateTime(std::vector<int32_t> & _return, const int64_t timestamp) = 0;
  virtual void loadPersonIdByUpdateTimeTimeStr(std::vector<int32_t> & _return, const std::string& timestamp) = 0;
  virtual void loadPersonIdByWhere(std::vector<int32_t> & _return, const std::string& where) = 0;
  virtual void loadUpdatedPersons(std::vector<int32_t> & _return, const int64_t timestamp) = 0;
  virtual void loadUpdatedPersonsTimestr(std::vector<int32_t> & _return, const std::string& timestamp) = 0;
  virtual void offline(const Token& token) = 0;
  virtual void online(Token& _return, const DeviceBean& device) = 0;
  virtual void registerDevice(DeviceBean& _return, const DeviceBean& newDevice) = 0;
  virtual void releasePersonToken(const Token& token) = 0;
  virtual void releaseRootToken(const Token& token) = 0;
  virtual void releaseUserToken(const Token& token) = 0;
  virtual void replaceFeature(const int32_t personId, const std::string& featureMd5, const bool deleteOldFeatureImage, const Token& token) = 0;
  virtual int32_t rootGroupOfDevice(const int32_t deviceId) = 0;
  virtual int32_t rootGroupOfPerson(const int32_t personId) = 0;
  virtual void runCmd(std::string& _return, const std::vector<int32_t> & target, const bool group, const std::string& cmdpath, const std::string& jsonArgs, const std::string& ackChannel, const Token& token) = 0;
  virtual int32_t runTask(const std::string& taskQueue, const std::string& cmdpath, const std::string& jsonArgs, const std::string& ackChannel, const Token& token) = 0;
  virtual void saveDevice(DeviceBean& _return, const DeviceBean& deviceBean, const Token& token) = 0;
  virtual void saveDeviceGroup(DeviceGroupBean& _return, const DeviceGroupBean& deviceGroupBean, const Token& token) = 0;
  virtual void savePermit(PermitBean& _return, const PermitBean& permitBean, const Token& token) = 0;
  virtual void savePermitWithColumn(PermitBean& _return, const int32_t deviceGroupId, const int32_t personGroupId, const std::string& column, const std::string& value, const Token& token) = 0;
  virtual void savePerson(PersonBean& _return, const PersonBean& personBean, const Token& token) = 0;
  virtual void savePersonFull(PersonBean& _return, const PersonBean& personBean, const std::string& idPhoto, const std::string& feature, const std::string& featureVersion, const std::string& featureImage, const FaceBean& faceBean, const Token& token) = 0;
  virtual void savePersonGroup(PersonGroupBean& _return, const PersonGroupBean& personGroupBean, const Token& token) = 0;
  virtual void savePersonWithPhoto(PersonBean& _return, const PersonBean& personBean, const std::string& idPhoto, const Token& token) = 0;
  virtual void savePersonWithPhotoAndFeature(PersonBean& _return, const PersonBean& personBean, const std::string& idPhoto, const FeatureBean& featureBean, const Token& token) = 0;
  virtual void savePersonWithPhotoAndFeatureMultiFaces(PersonBean& _return, const PersonBean& personBean, const std::string& idPhoto, const std::string& feature, const std::string& featureVersion, const std::vector<FaceBean> & faceBeans, const Token& token) = 0;
  virtual void savePersonWithPhotoAndFeatureMultiImage(PersonBean& _return, const PersonBean& personBean, const std::string& idPhoto, const std::string& feature, const std::string& featureVersion, const std::vector<std::string> & photos, const std::vector<FaceBean> & faces, const Token& token) = 0;
  virtual void savePersonWithPhotoAndFeatureSaved(PersonBean& _return, const PersonBean& personBean, const std::string& idPhotoMd5, const std::string& featureMd5, const Token& token) = 0;
  virtual void savePersons(const std::vector<PersonBean> & persons, const Token& token) = 0;
  virtual int32_t savePersonsWithPhoto(const std::vector<std::string> & photos, const std::vector<PersonBean> & persons, const Token& token) = 0;
  virtual void saveServiceConfig(const Token& token) = 0;
  virtual void sdkTaskQueueOf(std::string& _return, const std::string& task, const std::string& sdkVersion, const Token& token) = 0;
  virtual void setPersonExpiryDate(const int32_t personId, const int64_t expiryDate, const Token& token) = 0;
  virtual void setPersonExpiryDateList(const std::vector<int32_t> & personIdList, const int64_t expiryDate, const Token& token) = 0;
  virtual void setPersonExpiryDateTimeStr(const int32_t personId, const std::string& expiryDate, const Token& token) = 0;
  virtual void setProperties(const std::map<std::string, std::string> & config, const Token& token) = 0;
  virtual void setProperty(const std::string& key, const std::string& value, const Token& token) = 0;
  virtual void taskQueueOf(std::string& _return, const std::string& task, const Token& token) = 0;
  virtual void unbindBorder(const int32_t personGroupId, const int32_t deviceGroupId, const Token& token) = 0;
  virtual void unregisterDevice(const Token& token) = 0;
  virtual void updateDevice(DeviceBean& _return, const DeviceBean& deviceBean, const Token& token) = 0;
  virtual void version(std::string& _return) = 0;
  virtual void versionInfo(std::map<std::string, std::string> & _return) = 0;
};

class IFaceLogIfFactory {
 public:
  typedef IFaceLogIf Handler;

  virtual ~IFaceLogIfFactory() {}

  virtual IFaceLogIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(IFaceLogIf* /* handler */) = 0;
};

class IFaceLogIfSingletonFactory : virtual public IFaceLogIfFactory {
 public:
  IFaceLogIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<IFaceLogIf>& iface) : iface_(iface) {}
  virtual ~IFaceLogIfSingletonFactory() {}

  virtual IFaceLogIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(IFaceLogIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<IFaceLogIf> iface_;
};

class IFaceLogNull : virtual public IFaceLogIf {
 public:
  virtual ~IFaceLogNull() {}
  void addFeature(FeatureBean& /* _return */, const std::string& /* feature */, const std::string& /* featureVersion */, const int32_t /* personId */, const std::vector<FaceBean> & /* faecBeans */, const std::string& /* removed */, const Token& /* token */) {
    return;
  }
  void addFeatureMulti(FeatureBean& /* _return */, const std::string& /* feature */, const std::string& /* featureVersion */, const int32_t /* personId */, const std::vector<std::string> & /* photos */, const std::vector<FaceBean> & /* faces */, const std::string& /* removed */, const Token& /* token */) {
    return;
  }
  void addFeatureWithImage(FeatureBean& /* _return */, const std::string& /* feature */, const std::string& /* featureVersion */, const int32_t /* personId */, const bool /* asIdPhotoIfAbsent */, const std::string& /* featurePhoto */, const FaceBean& /* faceBean */, const std::string& /* removed */, const Token& /* token */) {
    return;
  }
  void addImage(ImageBean& /* _return */, const std::string& /* imageData */, const int32_t /* deviceId */, const FaceBean& /* faceBean */, const int32_t /* personId */, const Token& /* token */) {
    return;
  }
  void addLog(const LogBean& /* logBean */, const Token& /* token */) {
    return;
  }
  void addLogFull(const LogBean& /* logBean */, const FaceBean& /* faceBean */, const std::string& /* featureImage */, const Token& /* token */) {
    return;
  }
  void addLogs(const std::vector<LogBean> & /* beans */, const Token& /* token */) {
    return;
  }
  void addLogsFull(const std::vector<LogBean> & /* logBeans */, const std::vector<FaceBean> & /* faceBeans */, const std::vector<std::string> & /* featureImages */, const Token& /* token */) {
    return;
  }
  void applyAckChannel(std::string& /* _return */, const Token& /* token */) {
    return;
  }
  void applyAckChannelWithDuration(std::string& /* _return */, const int32_t /* duration */, const Token& /* token */) {
    return;
  }
  int32_t applyCmdSn(const Token& /* token */) {
    int32_t _return = 0;
    return _return;
  }
  void applyPersonToken(Token& /* _return */, const int32_t /* personId */, const std::string& /* password */, const bool /* isMd5 */) {
    return;
  }
  void applyRootToken(Token& /* _return */, const std::string& /* password */, const bool /* isMd5 */) {
    return;
  }
  void applyUserToken(Token& /* _return */, const int32_t /* userid */, const std::string& /* password */, const bool /* isMd5 */) {
    return;
  }
  void bindBorder(const int32_t /* personGroupId */, const int32_t /* deviceGroupId */, const Token& /* token */) {
    return;
  }
  void childListForDeviceGroup(std::vector<int32_t> & /* _return */, const int32_t /* deviceGroupId */) {
    return;
  }
  void childListForPersonGroup(std::vector<int32_t> & /* _return */, const int32_t /* personGroupId */) {
    return;
  }
  int32_t countDeviceByWhere(const std::string& /* where */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t countDeviceGroupByWhere(const std::string& /* where */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t countLogByWhere(const std::string& /* where */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t countLogLightByVerifyTime(const int64_t /* timestamp */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t countLogLightByVerifyTimeTimestr(const std::string& /* timestamp */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t countLogLightByWhere(const std::string& /* where */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t countPersonByWhere(const std::string& /* where */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t countPersonGroupByWhere(const std::string& /* where */) {
    int32_t _return = 0;
    return _return;
  }
  void countPersonLog(std::map<std::string, int32_t> & /* _return */, const int32_t /* personId */, const int64_t /* startDate */, const int64_t /* endDate */) {
    return;
  }
  void countPersonLogTimeStr(std::map<std::string, int32_t> & /* _return */, const int32_t /* personId */, const std::string& /* startDate */, const std::string& /* endDate */) {
    return;
  }
  int32_t deleteAllFeaturesByPersonId(const int32_t /* personId */, const bool /* deleteImage */, const Token& /* token */) {
    int32_t _return = 0;
    return _return;
  }
  bool deleteDevice(const int32_t /* id */, const Token& /* token */) {
    bool _return = false;
    return _return;
  }
  bool deleteDeviceByMac(const std::string& /* mac */, const Token& /* token */) {
    bool _return = false;
    return _return;
  }
  int32_t deleteDeviceGroup(const int32_t /* deviceGroupId */, const Token& /* token */) {
    int32_t _return = 0;
    return _return;
  }
  void deleteFeature(std::vector<std::string> & /* _return */, const std::string& /* featureMd5 */, const bool /* deleteImage */, const Token& /* token */) {
    return;
  }
  int32_t deleteGroupPermitOnDeviceGroup(const int32_t /* deviceGroupId */, const Token& /* token */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t deleteImage(const std::string& /* imageMd5 */, const Token& /* token */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t deletePermitById(const int32_t /* deviceGroupId */, const int32_t /* personGroupId */, const Token& /* token */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t deletePerson(const int32_t /* personId */, const Token& /* token */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t deletePersonByPapersNum(const std::string& /* papersNum */, const Token& /* token */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t deletePersonGroup(const int32_t /* personGroupId */, const Token& /* token */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t deletePersonGroupPermit(const int32_t /* personGroupId */, const Token& /* token */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t deletePersons(const std::vector<int32_t> & /* personIdList */, const Token& /* token */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t deletePersonsByPapersNum(const std::vector<std::string> & /* papersNumlist */, const Token& /* token */) {
    int32_t _return = 0;
    return _return;
  }
  void disablePerson(const int32_t /* personId */, const int32_t /* moveToGroupId */, const bool /* deletePhoto */, const bool /* deleteFeature */, const bool /* deleteLog */, const Token& /* token */) {
    return;
  }
  void disablePersonList(const std::vector<int32_t> & /* personIdList */, const Token& /* token */) {
    return;
  }
  bool existsDevice(const int32_t /* id */) {
    bool _return = false;
    return _return;
  }
  bool existsFeature(const std::string& /* md5 */) {
    bool _return = false;
    return _return;
  }
  bool existsImage(const std::string& /* md5 */) {
    bool _return = false;
    return _return;
  }
  bool existsPerson(const int32_t /* persionId */) {
    bool _return = false;
    return _return;
  }
  void getDevice(DeviceBean& /* _return */, const int32_t /* deviceId */) {
    return;
  }
  void getDeviceByMac(DeviceBean& /* _return */, const std::string& /* mac */) {
    return;
  }
  void getDeviceGroup(DeviceGroupBean& /* _return */, const int32_t /* deviceGroupId */) {
    return;
  }
  void getDeviceGroups(std::vector<DeviceGroupBean> & /* _return */, const std::vector<int32_t> & /* groupIdList */) {
    return;
  }
  void getDeviceGroupsBelongs(std::vector<int32_t> & /* _return */, const int32_t /* deviceId */) {
    return;
  }
  void getDeviceGroupsPermit(std::vector<int32_t> & /* _return */, const int32_t /* personGroupId */) {
    return;
  }
  void getDeviceGroupsPermittedBy(std::vector<int32_t> & /* _return */, const int32_t /* personGroupId */) {
    return;
  }
  int32_t getDeviceIdOfFeature(const std::string& /* featureMd5 */) {
    int32_t _return = 0;
    return _return;
  }
  void getDevices(std::vector<DeviceBean> & /* _return */, const std::vector<int32_t> & /* idList */) {
    return;
  }
  void getDevicesOfGroup(std::vector<int32_t> & /* _return */, const int32_t /* deviceGroupId */) {
    return;
  }
  void getFace(FaceBean& /* _return */, const int32_t /* faceId */) {
    return;
  }
  void getFacesOfFeature(std::vector<FaceBean> & /* _return */, const std::string& /* featureMd5 */) {
    return;
  }
  void getFacesOfImage(std::vector<FaceBean> & /* _return */, const std::string& /* imageMd5 */) {
    return;
  }
  void getFeature(FeatureBean& /* _return */, const std::string& /* md5 */) {
    return;
  }
  void getFeatureBytes(std::string& /* _return */, const std::string& /* md5 */) {
    return;
  }
  void getFeatures(std::vector<FeatureBean> & /* _return */, const std::vector<std::string> & /* md5List */) {
    return;
  }
  void getFeaturesByPersonIdAndSdkVersion(std::vector<std::string> & /* _return */, const int32_t /* personId */, const std::string& /* sdkVersion */) {
    return;
  }
  void getFeaturesOfImage(std::vector<std::string> & /* _return */, const std::string& /* imageMd5 */) {
    return;
  }
  void getFeaturesOfPerson(std::vector<std::string> & /* _return */, const int32_t /* personId */) {
    return;
  }
  void getFeaturesPermittedOnDevice(std::vector<std::string> & /* _return */, const int32_t /* deviceId */, const bool /* ignoreSchedule */, const std::string& /* sdkVersion */, const std::vector<std::string> & /* excludeFeatureIds */, const int64_t /* timestamp */) {
    return;
  }
  void getGroupPermit(PermitBean& /* _return */, const int32_t /* deviceId */, const int32_t /* personGroupId */) {
    return;
  }
  void getGroupPermitOnDeviceGroup(PermitBean& /* _return */, const int32_t /* deviceGroupId */, const int32_t /* personGroupId */) {
    return;
  }
  void getGroupPermits(std::vector<PermitBean> & /* _return */, const int32_t /* deviceId */, const std::vector<int32_t> & /* personGroupIdList */) {
    return;
  }
  void getImage(ImageBean& /* _return */, const std::string& /* imageMD5 */) {
    return;
  }
  void getImageBytes(std::string& /* _return */, const std::string& /* imageMD5 */) {
    return;
  }
  void getImageBytesRef(std::string& /* _return */, const std::string& /* primaryKey */, const std::string& /* refType */) {
    return;
  }
  void getImagesAssociatedByFeature(std::vector<std::string> & /* _return */, const std::string& /* featureMd5 */) {
    return;
  }
  void getLogBeansByPersonId(std::vector<LogBean> & /* _return */, const int32_t /* personId */) {
    return;
  }
  void getPerson(PersonBean& /* _return */, const int32_t /* personId */) {
    return;
  }
  void getPersonByMobilePhone(PersonBean& /* _return */, const std::string& /* mobilePhone */) {
    return;
  }
  void getPersonByPapersNum(PersonBean& /* _return */, const std::string& /* papersNum */) {
    return;
  }
  void getPersonGroup(PersonGroupBean& /* _return */, const int32_t /* personGroupId */) {
    return;
  }
  void getPersonGroups(std::vector<PersonGroupBean> & /* _return */, const std::vector<int32_t> & /* groupIdList */) {
    return;
  }
  void getPersonGroupsBelongs(std::vector<int32_t> & /* _return */, const int32_t /* personId */) {
    return;
  }
  void getPersonGroupsPermittedBy(std::vector<int32_t> & /* _return */, const int32_t /* deviceGroupId */) {
    return;
  }
  void getPersonPermit(PermitBean& /* _return */, const int32_t /* deviceId */, const int32_t /* personId */) {
    return;
  }
  void getPersonPermits(std::vector<PermitBean> & /* _return */, const int32_t /* deviceId */, const std::vector<int32_t> & /* personIdList */) {
    return;
  }
  void getPersons(std::vector<PersonBean> & /* _return */, const std::vector<int32_t> & /* idList */) {
    return;
  }
  void getPersonsOfGroup(std::vector<int32_t> & /* _return */, const int32_t /* personGroupId */) {
    return;
  }
  void getPersonsPermittedOnDevice(std::vector<int32_t> & /* _return */, const int32_t /* deviceId */, const bool /* ignoreSchedule */, const std::vector<int32_t> & /* excludePersonIds */, const int64_t /* timestamp */) {
    return;
  }
  void getProperties(std::map<std::string, std::string> & /* _return */, const std::string& /* prefix */, const Token& /* token */) {
    return;
  }
  void getProperty(std::string& /* _return */, const std::string& /* key */, const Token& /* token */) {
    return;
  }
  void getRedisParameters(std::map<MQParam::type, std::string> & /* _return */, const Token& /* token */) {
    return;
  }
  void getServiceConfig(std::map<std::string, std::string> & /* _return */, const Token& /* token */) {
    return;
  }
  void getSubDeviceGroup(std::vector<int32_t> & /* _return */, const int32_t /* deviceGroupId */) {
    return;
  }
  void getSubPersonGroup(std::vector<int32_t> & /* _return */, const int32_t /* personGroupId */) {
    return;
  }
  bool isDisable(const int32_t /* personId */) {
    bool _return = false;
    return _return;
  }
  bool isLocal() {
    bool _return = false;
    return _return;
  }
  bool isValidAckChannel(const std::string& /* ackChannel */) {
    bool _return = false;
    return _return;
  }
  bool isValidCmdSn(const int32_t /* cmdSn */) {
    bool _return = false;
    return _return;
  }
  bool isValidDeviceToken(const Token& /* token */) {
    bool _return = false;
    return _return;
  }
  bool isValidPassword(const std::string& /* userId */, const std::string& /* password */, const bool /* isMd5 */) {
    bool _return = false;
    return _return;
  }
  bool isValidPersonToken(const Token& /* token */) {
    bool _return = false;
    return _return;
  }
  bool isValidRootToken(const Token& /* token */) {
    bool _return = false;
    return _return;
  }
  bool isValidToken(const Token& /* token */) {
    bool _return = false;
    return _return;
  }
  bool isValidUserToken(const Token& /* token */) {
    bool _return = false;
    return _return;
  }
  void listOfParentForDeviceGroup(std::vector<int32_t> & /* _return */, const int32_t /* deviceGroupId */) {
    return;
  }
  void listOfParentForPersonGroup(std::vector<int32_t> & /* _return */, const int32_t /* personGroupId */) {
    return;
  }
  void loadAllPerson(std::vector<int32_t> & /* _return */) {
    return;
  }
  void loadDeviceByWhere(std::vector<DeviceBean> & /* _return */, const std::string& /* where */, const int32_t /* startRow */, const int32_t /* numRows */) {
    return;
  }
  void loadDeviceGroupByWhere(std::vector<int32_t> & /* _return */, const std::string& /* where */, const int32_t /* startRow */, const int32_t /* numRows */) {
    return;
  }
  void loadDeviceGroupIdByWhere(std::vector<int32_t> & /* _return */, const std::string& /* where */) {
    return;
  }
  void loadDeviceIdByWhere(std::vector<int32_t> & /* _return */, const std::string& /* where */) {
    return;
  }
  void loadDistinctIntegerColumn(std::vector<int32_t> & /* _return */, const std::string& /* table */, const std::string& /* column */, const std::string& /* where */) {
    return;
  }
  void loadDistinctStringColumn(std::vector<std::string> & /* _return */, const std::string& /* table */, const std::string& /* column */, const std::string& /* where */) {
    return;
  }
  void loadFeatureMd5ByUpdate(std::vector<std::string> & /* _return */, const int64_t /* timestamp */) {
    return;
  }
  void loadFeatureMd5ByUpdateTimeStr(std::vector<std::string> & /* _return */, const std::string& /* timestamp */) {
    return;
  }
  void loadLogByWhere(std::vector<LogBean> & /* _return */, const std::string& /* where */, const int32_t /* startRow */, const int32_t /* numRows */) {
    return;
  }
  void loadLogLightByVerifyTime(std::vector<LogLightBean> & /* _return */, const int64_t /* timestamp */, const int32_t /* startRow */, const int32_t /* numRows */) {
    return;
  }
  void loadLogLightByVerifyTimeTimestr(std::vector<LogLightBean> & /* _return */, const std::string& /* timestamp */, const int32_t /* startRow */, const int32_t /* numRows */) {
    return;
  }
  void loadLogLightByWhere(std::vector<LogLightBean> & /* _return */, const std::string& /* where */, const int32_t /* startRow */, const int32_t /* numRows */) {
    return;
  }
  void loadPermitByUpdate(std::vector<PermitBean> & /* _return */, const int64_t /* timestamp */) {
    return;
  }
  void loadPermitByUpdateTimestr(std::vector<PermitBean> & /* _return */, const std::string& /* timestamp */) {
    return;
  }
  void loadPersonByWhere(std::vector<PersonBean> & /* _return */, const std::string& /* where */, const int32_t /* startRow */, const int32_t /* numRows */) {
    return;
  }
  void loadPersonGroupByWhere(std::vector<int32_t> & /* _return */, const std::string& /* where */, const int32_t /* startRow */, const int32_t /* numRows */) {
    return;
  }
  void loadPersonGroupIdByWhere(std::vector<int32_t> & /* _return */, const std::string& /* where */) {
    return;
  }
  void loadPersonIdByUpdateTime(std::vector<int32_t> & /* _return */, const int64_t /* timestamp */) {
    return;
  }
  void loadPersonIdByUpdateTimeTimeStr(std::vector<int32_t> & /* _return */, const std::string& /* timestamp */) {
    return;
  }
  void loadPersonIdByWhere(std::vector<int32_t> & /* _return */, const std::string& /* where */) {
    return;
  }
  void loadUpdatedPersons(std::vector<int32_t> & /* _return */, const int64_t /* timestamp */) {
    return;
  }
  void loadUpdatedPersonsTimestr(std::vector<int32_t> & /* _return */, const std::string& /* timestamp */) {
    return;
  }
  void offline(const Token& /* token */) {
    return;
  }
  void online(Token& /* _return */, const DeviceBean& /* device */) {
    return;
  }
  void registerDevice(DeviceBean& /* _return */, const DeviceBean& /* newDevice */) {
    return;
  }
  void releasePersonToken(const Token& /* token */) {
    return;
  }
  void releaseRootToken(const Token& /* token */) {
    return;
  }
  void releaseUserToken(const Token& /* token */) {
    return;
  }
  void replaceFeature(const int32_t /* personId */, const std::string& /* featureMd5 */, const bool /* deleteOldFeatureImage */, const Token& /* token */) {
    return;
  }
  int32_t rootGroupOfDevice(const int32_t /* deviceId */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t rootGroupOfPerson(const int32_t /* personId */) {
    int32_t _return = 0;
    return _return;
  }
  void runCmd(std::string& /* _return */, const std::vector<int32_t> & /* target */, const bool /* group */, const std::string& /* cmdpath */, const std::string& /* jsonArgs */, const std::string& /* ackChannel */, const Token& /* token */) {
    return;
  }
  int32_t runTask(const std::string& /* taskQueue */, const std::string& /* cmdpath */, const std::string& /* jsonArgs */, const std::string& /* ackChannel */, const Token& /* token */) {
    int32_t _return = 0;
    return _return;
  }
  void saveDevice(DeviceBean& /* _return */, const DeviceBean& /* deviceBean */, const Token& /* token */) {
    return;
  }
  void saveDeviceGroup(DeviceGroupBean& /* _return */, const DeviceGroupBean& /* deviceGroupBean */, const Token& /* token */) {
    return;
  }
  void savePermit(PermitBean& /* _return */, const PermitBean& /* permitBean */, const Token& /* token */) {
    return;
  }
  void savePermitWithColumn(PermitBean& /* _return */, const int32_t /* deviceGroupId */, const int32_t /* personGroupId */, const std::string& /* column */, const std::string& /* value */, const Token& /* token */) {
    return;
  }
  void savePerson(PersonBean& /* _return */, const PersonBean& /* personBean */, const Token& /* token */) {
    return;
  }
  void savePersonFull(PersonBean& /* _return */, const PersonBean& /* personBean */, const std::string& /* idPhoto */, const std::string& /* feature */, const std::string& /* featureVersion */, const std::string& /* featureImage */, const FaceBean& /* faceBean */, const Token& /* token */) {
    return;
  }
  void savePersonGroup(PersonGroupBean& /* _return */, const PersonGroupBean& /* personGroupBean */, const Token& /* token */) {
    return;
  }
  void savePersonWithPhoto(PersonBean& /* _return */, const PersonBean& /* personBean */, const std::string& /* idPhoto */, const Token& /* token */) {
    return;
  }
  void savePersonWithPhotoAndFeature(PersonBean& /* _return */, const PersonBean& /* personBean */, const std::string& /* idPhoto */, const FeatureBean& /* featureBean */, const Token& /* token */) {
    return;
  }
  void savePersonWithPhotoAndFeatureMultiFaces(PersonBean& /* _return */, const PersonBean& /* personBean */, const std::string& /* idPhoto */, const std::string& /* feature */, const std::string& /* featureVersion */, const std::vector<FaceBean> & /* faceBeans */, const Token& /* token */) {
    return;
  }
  void savePersonWithPhotoAndFeatureMultiImage(PersonBean& /* _return */, const PersonBean& /* personBean */, const std::string& /* idPhoto */, const std::string& /* feature */, const std::string& /* featureVersion */, const std::vector<std::string> & /* photos */, const std::vector<FaceBean> & /* faces */, const Token& /* token */) {
    return;
  }
  void savePersonWithPhotoAndFeatureSaved(PersonBean& /* _return */, const PersonBean& /* personBean */, const std::string& /* idPhotoMd5 */, const std::string& /* featureMd5 */, const Token& /* token */) {
    return;
  }
  void savePersons(const std::vector<PersonBean> & /* persons */, const Token& /* token */) {
    return;
  }
  int32_t savePersonsWithPhoto(const std::vector<std::string> & /* photos */, const std::vector<PersonBean> & /* persons */, const Token& /* token */) {
    int32_t _return = 0;
    return _return;
  }
  void saveServiceConfig(const Token& /* token */) {
    return;
  }
  void sdkTaskQueueOf(std::string& /* _return */, const std::string& /* task */, const std::string& /* sdkVersion */, const Token& /* token */) {
    return;
  }
  void setPersonExpiryDate(const int32_t /* personId */, const int64_t /* expiryDate */, const Token& /* token */) {
    return;
  }
  void setPersonExpiryDateList(const std::vector<int32_t> & /* personIdList */, const int64_t /* expiryDate */, const Token& /* token */) {
    return;
  }
  void setPersonExpiryDateTimeStr(const int32_t /* personId */, const std::string& /* expiryDate */, const Token& /* token */) {
    return;
  }
  void setProperties(const std::map<std::string, std::string> & /* config */, const Token& /* token */) {
    return;
  }
  void setProperty(const std::string& /* key */, const std::string& /* value */, const Token& /* token */) {
    return;
  }
  void taskQueueOf(std::string& /* _return */, const std::string& /* task */, const Token& /* token */) {
    return;
  }
  void unbindBorder(const int32_t /* personGroupId */, const int32_t /* deviceGroupId */, const Token& /* token */) {
    return;
  }
  void unregisterDevice(const Token& /* token */) {
    return;
  }
  void updateDevice(DeviceBean& /* _return */, const DeviceBean& /* deviceBean */, const Token& /* token */) {
    return;
  }
  void version(std::string& /* _return */) {
    return;
  }
  void versionInfo(std::map<std::string, std::string> & /* _return */) {
    return;
  }
};

typedef struct _IFaceLog_addFeature_args__isset {
  _IFaceLog_addFeature_args__isset() : feature(false), featureVersion(false), personId(false), faecBeans(false), removed(false), token(false) {}
  bool feature :1;
  bool featureVersion :1;
  bool personId :1;
  bool faecBeans :1;
  bool removed :1;
  bool token :1;
} _IFaceLog_addFeature_args__isset;

class IFaceLog_addFeature_args {
 public:

  IFaceLog_addFeature_args(const IFaceLog_addFeature_args&);
  IFaceLog_addFeature_args(IFaceLog_addFeature_args&&);
  IFaceLog_addFeature_args& operator=(const IFaceLog_addFeature_args&);
  IFaceLog_addFeature_args& operator=(IFaceLog_addFeature_args&&);
  IFaceLog_addFeature_args() : feature(), featureVersion(), personId(0), removed() {
  }

  virtual ~IFaceLog_addFeature_args() throw();
  std::string feature;
  std::string featureVersion;
  int32_t personId;
  std::vector<FaceBean>  faecBeans;
  std::string removed;
  Token token;

  _IFaceLog_addFeature_args__isset __isset;

  void __set_feature(const std::string& val);

  void __set_featureVersion(const std::string& val);

  void __set_personId(const int32_t val);

  void __set_faecBeans(const std::vector<FaceBean> & val);

  void __set_removed(const std::string& val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_addFeature_args & rhs) const
  {
    if (!(feature == rhs.feature))
      return false;
    if (!(featureVersion == rhs.featureVersion))
      return false;
    if (!(personId == rhs.personId))
      return false;
    if (!(faecBeans == rhs.faecBeans))
      return false;
    if (!(removed == rhs.removed))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_addFeature_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_addFeature_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_addFeature_pargs {
 public:


  virtual ~IFaceLog_addFeature_pargs() throw();
  const std::string* feature;
  const std::string* featureVersion;
  const int32_t* personId;
  const std::vector<FaceBean> * faecBeans;
  const std::string* removed;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_addFeature_result__isset {
  _IFaceLog_addFeature_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _IFaceLog_addFeature_result__isset;

class IFaceLog_addFeature_result {
 public:

  IFaceLog_addFeature_result(const IFaceLog_addFeature_result&);
  IFaceLog_addFeature_result(IFaceLog_addFeature_result&&);
  IFaceLog_addFeature_result& operator=(const IFaceLog_addFeature_result&);
  IFaceLog_addFeature_result& operator=(IFaceLog_addFeature_result&&);
  IFaceLog_addFeature_result() {
  }

  virtual ~IFaceLog_addFeature_result() throw();
  FeatureBean success;
  DuplicateRecordException ex1;
  ServiceRuntimeException ex2;

  _IFaceLog_addFeature_result__isset __isset;

  void __set_success(const FeatureBean& val);

  void __set_ex1(const DuplicateRecordException& val);

  void __set_ex2(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_addFeature_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_addFeature_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_addFeature_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_addFeature_presult__isset {
  _IFaceLog_addFeature_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _IFaceLog_addFeature_presult__isset;

class IFaceLog_addFeature_presult {
 public:


  virtual ~IFaceLog_addFeature_presult() throw();
  FeatureBean* success;
  DuplicateRecordException ex1;
  ServiceRuntimeException ex2;

  _IFaceLog_addFeature_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_addFeatureMulti_args__isset {
  _IFaceLog_addFeatureMulti_args__isset() : feature(false), featureVersion(false), personId(false), photos(false), faces(false), removed(false), token(false) {}
  bool feature :1;
  bool featureVersion :1;
  bool personId :1;
  bool photos :1;
  bool faces :1;
  bool removed :1;
  bool token :1;
} _IFaceLog_addFeatureMulti_args__isset;

class IFaceLog_addFeatureMulti_args {
 public:

  IFaceLog_addFeatureMulti_args(const IFaceLog_addFeatureMulti_args&);
  IFaceLog_addFeatureMulti_args(IFaceLog_addFeatureMulti_args&&);
  IFaceLog_addFeatureMulti_args& operator=(const IFaceLog_addFeatureMulti_args&);
  IFaceLog_addFeatureMulti_args& operator=(IFaceLog_addFeatureMulti_args&&);
  IFaceLog_addFeatureMulti_args() : feature(), featureVersion(), personId(0), removed() {
  }

  virtual ~IFaceLog_addFeatureMulti_args() throw();
  std::string feature;
  std::string featureVersion;
  int32_t personId;
  std::vector<std::string>  photos;
  std::vector<FaceBean>  faces;
  std::string removed;
  Token token;

  _IFaceLog_addFeatureMulti_args__isset __isset;

  void __set_feature(const std::string& val);

  void __set_featureVersion(const std::string& val);

  void __set_personId(const int32_t val);

  void __set_photos(const std::vector<std::string> & val);

  void __set_faces(const std::vector<FaceBean> & val);

  void __set_removed(const std::string& val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_addFeatureMulti_args & rhs) const
  {
    if (!(feature == rhs.feature))
      return false;
    if (!(featureVersion == rhs.featureVersion))
      return false;
    if (!(personId == rhs.personId))
      return false;
    if (!(photos == rhs.photos))
      return false;
    if (!(faces == rhs.faces))
      return false;
    if (!(removed == rhs.removed))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_addFeatureMulti_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_addFeatureMulti_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_addFeatureMulti_pargs {
 public:


  virtual ~IFaceLog_addFeatureMulti_pargs() throw();
  const std::string* feature;
  const std::string* featureVersion;
  const int32_t* personId;
  const std::vector<std::string> * photos;
  const std::vector<FaceBean> * faces;
  const std::string* removed;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_addFeatureMulti_result__isset {
  _IFaceLog_addFeatureMulti_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _IFaceLog_addFeatureMulti_result__isset;

class IFaceLog_addFeatureMulti_result {
 public:

  IFaceLog_addFeatureMulti_result(const IFaceLog_addFeatureMulti_result&);
  IFaceLog_addFeatureMulti_result(IFaceLog_addFeatureMulti_result&&);
  IFaceLog_addFeatureMulti_result& operator=(const IFaceLog_addFeatureMulti_result&);
  IFaceLog_addFeatureMulti_result& operator=(IFaceLog_addFeatureMulti_result&&);
  IFaceLog_addFeatureMulti_result() {
  }

  virtual ~IFaceLog_addFeatureMulti_result() throw();
  FeatureBean success;
  DuplicateRecordException ex1;
  ServiceRuntimeException ex2;

  _IFaceLog_addFeatureMulti_result__isset __isset;

  void __set_success(const FeatureBean& val);

  void __set_ex1(const DuplicateRecordException& val);

  void __set_ex2(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_addFeatureMulti_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_addFeatureMulti_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_addFeatureMulti_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_addFeatureMulti_presult__isset {
  _IFaceLog_addFeatureMulti_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _IFaceLog_addFeatureMulti_presult__isset;

class IFaceLog_addFeatureMulti_presult {
 public:


  virtual ~IFaceLog_addFeatureMulti_presult() throw();
  FeatureBean* success;
  DuplicateRecordException ex1;
  ServiceRuntimeException ex2;

  _IFaceLog_addFeatureMulti_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_addFeatureWithImage_args__isset {
  _IFaceLog_addFeatureWithImage_args__isset() : feature(false), featureVersion(false), personId(false), featurePhoto(false), faceBean(false), removed(false), token(false) {}
  bool feature :1;
  bool featureVersion :1;
  bool personId :1;
  bool featurePhoto :1;
  bool faceBean :1;
  bool removed :1;
  bool token :1;
} _IFaceLog_addFeatureWithImage_args__isset;

class IFaceLog_addFeatureWithImage_args {
 public:

  IFaceLog_addFeatureWithImage_args(const IFaceLog_addFeatureWithImage_args&);
  IFaceLog_addFeatureWithImage_args(IFaceLog_addFeatureWithImage_args&&);
  IFaceLog_addFeatureWithImage_args& operator=(const IFaceLog_addFeatureWithImage_args&);
  IFaceLog_addFeatureWithImage_args& operator=(IFaceLog_addFeatureWithImage_args&&);
  IFaceLog_addFeatureWithImage_args() : feature(), featureVersion(), personId(0), asIdPhotoIfAbsent(0), featurePhoto(), removed() {
  }

  virtual ~IFaceLog_addFeatureWithImage_args() throw();
  std::string feature;
  std::string featureVersion;
  int32_t personId;
  bool asIdPhotoIfAbsent;
  std::string featurePhoto;
  FaceBean faceBean;
  std::string removed;
  Token token;

  _IFaceLog_addFeatureWithImage_args__isset __isset;

  void __set_feature(const std::string& val);

  void __set_featureVersion(const std::string& val);

  void __set_personId(const int32_t val);

  void __set_asIdPhotoIfAbsent(const bool val);

  void __set_featurePhoto(const std::string& val);

  void __set_faceBean(const FaceBean& val);

  void __set_removed(const std::string& val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_addFeatureWithImage_args & rhs) const
  {
    if (!(feature == rhs.feature))
      return false;
    if (!(featureVersion == rhs.featureVersion))
      return false;
    if (!(personId == rhs.personId))
      return false;
    if (!(asIdPhotoIfAbsent == rhs.asIdPhotoIfAbsent))
      return false;
    if (!(featurePhoto == rhs.featurePhoto))
      return false;
    if (!(faceBean == rhs.faceBean))
      return false;
    if (!(removed == rhs.removed))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_addFeatureWithImage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_addFeatureWithImage_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_addFeatureWithImage_pargs {
 public:


  virtual ~IFaceLog_addFeatureWithImage_pargs() throw();
  const std::string* feature;
  const std::string* featureVersion;
  const int32_t* personId;
  const bool* asIdPhotoIfAbsent;
  const std::string* featurePhoto;
  const FaceBean* faceBean;
  const std::string* removed;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_addFeatureWithImage_result__isset {
  _IFaceLog_addFeatureWithImage_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _IFaceLog_addFeatureWithImage_result__isset;

class IFaceLog_addFeatureWithImage_result {
 public:

  IFaceLog_addFeatureWithImage_result(const IFaceLog_addFeatureWithImage_result&);
  IFaceLog_addFeatureWithImage_result(IFaceLog_addFeatureWithImage_result&&);
  IFaceLog_addFeatureWithImage_result& operator=(const IFaceLog_addFeatureWithImage_result&);
  IFaceLog_addFeatureWithImage_result& operator=(IFaceLog_addFeatureWithImage_result&&);
  IFaceLog_addFeatureWithImage_result() {
  }

  virtual ~IFaceLog_addFeatureWithImage_result() throw();
  FeatureBean success;
  DuplicateRecordException ex1;
  ServiceRuntimeException ex2;

  _IFaceLog_addFeatureWithImage_result__isset __isset;

  void __set_success(const FeatureBean& val);

  void __set_ex1(const DuplicateRecordException& val);

  void __set_ex2(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_addFeatureWithImage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_addFeatureWithImage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_addFeatureWithImage_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_addFeatureWithImage_presult__isset {
  _IFaceLog_addFeatureWithImage_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _IFaceLog_addFeatureWithImage_presult__isset;

class IFaceLog_addFeatureWithImage_presult {
 public:


  virtual ~IFaceLog_addFeatureWithImage_presult() throw();
  FeatureBean* success;
  DuplicateRecordException ex1;
  ServiceRuntimeException ex2;

  _IFaceLog_addFeatureWithImage_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_addImage_args__isset {
  _IFaceLog_addImage_args__isset() : imageData(false), deviceId(false), faceBean(false), personId(false), token(false) {}
  bool imageData :1;
  bool deviceId :1;
  bool faceBean :1;
  bool personId :1;
  bool token :1;
} _IFaceLog_addImage_args__isset;

class IFaceLog_addImage_args {
 public:

  IFaceLog_addImage_args(const IFaceLog_addImage_args&);
  IFaceLog_addImage_args(IFaceLog_addImage_args&&);
  IFaceLog_addImage_args& operator=(const IFaceLog_addImage_args&);
  IFaceLog_addImage_args& operator=(IFaceLog_addImage_args&&);
  IFaceLog_addImage_args() : imageData(), deviceId(0), personId(0) {
  }

  virtual ~IFaceLog_addImage_args() throw();
  std::string imageData;
  int32_t deviceId;
  FaceBean faceBean;
  int32_t personId;
  Token token;

  _IFaceLog_addImage_args__isset __isset;

  void __set_imageData(const std::string& val);

  void __set_deviceId(const int32_t val);

  void __set_faceBean(const FaceBean& val);

  void __set_personId(const int32_t val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_addImage_args & rhs) const
  {
    if (!(imageData == rhs.imageData))
      return false;
    if (!(deviceId == rhs.deviceId))
      return false;
    if (!(faceBean == rhs.faceBean))
      return false;
    if (!(personId == rhs.personId))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_addImage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_addImage_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_addImage_pargs {
 public:


  virtual ~IFaceLog_addImage_pargs() throw();
  const std::string* imageData;
  const int32_t* deviceId;
  const FaceBean* faceBean;
  const int32_t* personId;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_addImage_result__isset {
  _IFaceLog_addImage_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _IFaceLog_addImage_result__isset;

class IFaceLog_addImage_result {
 public:

  IFaceLog_addImage_result(const IFaceLog_addImage_result&);
  IFaceLog_addImage_result(IFaceLog_addImage_result&&);
  IFaceLog_addImage_result& operator=(const IFaceLog_addImage_result&);
  IFaceLog_addImage_result& operator=(IFaceLog_addImage_result&&);
  IFaceLog_addImage_result() {
  }

  virtual ~IFaceLog_addImage_result() throw();
  ImageBean success;
  DuplicateRecordException ex1;
  ServiceRuntimeException ex2;

  _IFaceLog_addImage_result__isset __isset;

  void __set_success(const ImageBean& val);

  void __set_ex1(const DuplicateRecordException& val);

  void __set_ex2(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_addImage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_addImage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_addImage_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_addImage_presult__isset {
  _IFaceLog_addImage_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _IFaceLog_addImage_presult__isset;

class IFaceLog_addImage_presult {
 public:


  virtual ~IFaceLog_addImage_presult() throw();
  ImageBean* success;
  DuplicateRecordException ex1;
  ServiceRuntimeException ex2;

  _IFaceLog_addImage_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_addLog_args__isset {
  _IFaceLog_addLog_args__isset() : logBean(false), token(false) {}
  bool logBean :1;
  bool token :1;
} _IFaceLog_addLog_args__isset;

class IFaceLog_addLog_args {
 public:

  IFaceLog_addLog_args(const IFaceLog_addLog_args&);
  IFaceLog_addLog_args(IFaceLog_addLog_args&&);
  IFaceLog_addLog_args& operator=(const IFaceLog_addLog_args&);
  IFaceLog_addLog_args& operator=(IFaceLog_addLog_args&&);
  IFaceLog_addLog_args() {
  }

  virtual ~IFaceLog_addLog_args() throw();
  LogBean logBean;
  Token token;

  _IFaceLog_addLog_args__isset __isset;

  void __set_logBean(const LogBean& val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_addLog_args & rhs) const
  {
    if (!(logBean == rhs.logBean))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_addLog_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_addLog_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_addLog_pargs {
 public:


  virtual ~IFaceLog_addLog_pargs() throw();
  const LogBean* logBean;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_addLog_result__isset {
  _IFaceLog_addLog_result__isset() : ex1(false), ex2(false) {}
  bool ex1 :1;
  bool ex2 :1;
} _IFaceLog_addLog_result__isset;

class IFaceLog_addLog_result {
 public:

  IFaceLog_addLog_result(const IFaceLog_addLog_result&);
  IFaceLog_addLog_result(IFaceLog_addLog_result&&);
  IFaceLog_addLog_result& operator=(const IFaceLog_addLog_result&);
  IFaceLog_addLog_result& operator=(IFaceLog_addLog_result&&);
  IFaceLog_addLog_result() {
  }

  virtual ~IFaceLog_addLog_result() throw();
  DuplicateRecordException ex1;
  ServiceRuntimeException ex2;

  _IFaceLog_addLog_result__isset __isset;

  void __set_ex1(const DuplicateRecordException& val);

  void __set_ex2(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_addLog_result & rhs) const
  {
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_addLog_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_addLog_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_addLog_presult__isset {
  _IFaceLog_addLog_presult__isset() : ex1(false), ex2(false) {}
  bool ex1 :1;
  bool ex2 :1;
} _IFaceLog_addLog_presult__isset;

class IFaceLog_addLog_presult {
 public:


  virtual ~IFaceLog_addLog_presult() throw();
  DuplicateRecordException ex1;
  ServiceRuntimeException ex2;

  _IFaceLog_addLog_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_addLogFull_args__isset {
  _IFaceLog_addLogFull_args__isset() : logBean(false), faceBean(false), featureImage(false), token(false) {}
  bool logBean :1;
  bool faceBean :1;
  bool featureImage :1;
  bool token :1;
} _IFaceLog_addLogFull_args__isset;

class IFaceLog_addLogFull_args {
 public:

  IFaceLog_addLogFull_args(const IFaceLog_addLogFull_args&);
  IFaceLog_addLogFull_args(IFaceLog_addLogFull_args&&);
  IFaceLog_addLogFull_args& operator=(const IFaceLog_addLogFull_args&);
  IFaceLog_addLogFull_args& operator=(IFaceLog_addLogFull_args&&);
  IFaceLog_addLogFull_args() : featureImage() {
  }

  virtual ~IFaceLog_addLogFull_args() throw();
  LogBean logBean;
  FaceBean faceBean;
  std::string featureImage;
  Token token;

  _IFaceLog_addLogFull_args__isset __isset;

  void __set_logBean(const LogBean& val);

  void __set_faceBean(const FaceBean& val);

  void __set_featureImage(const std::string& val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_addLogFull_args & rhs) const
  {
    if (!(logBean == rhs.logBean))
      return false;
    if (!(faceBean == rhs.faceBean))
      return false;
    if (!(featureImage == rhs.featureImage))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_addLogFull_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_addLogFull_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_addLogFull_pargs {
 public:


  virtual ~IFaceLog_addLogFull_pargs() throw();
  const LogBean* logBean;
  const FaceBean* faceBean;
  const std::string* featureImage;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_addLogFull_result__isset {
  _IFaceLog_addLogFull_result__isset() : ex1(false), ex2(false) {}
  bool ex1 :1;
  bool ex2 :1;
} _IFaceLog_addLogFull_result__isset;

class IFaceLog_addLogFull_result {
 public:

  IFaceLog_addLogFull_result(const IFaceLog_addLogFull_result&);
  IFaceLog_addLogFull_result(IFaceLog_addLogFull_result&&);
  IFaceLog_addLogFull_result& operator=(const IFaceLog_addLogFull_result&);
  IFaceLog_addLogFull_result& operator=(IFaceLog_addLogFull_result&&);
  IFaceLog_addLogFull_result() {
  }

  virtual ~IFaceLog_addLogFull_result() throw();
  DuplicateRecordException ex1;
  ServiceRuntimeException ex2;

  _IFaceLog_addLogFull_result__isset __isset;

  void __set_ex1(const DuplicateRecordException& val);

  void __set_ex2(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_addLogFull_result & rhs) const
  {
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_addLogFull_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_addLogFull_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_addLogFull_presult__isset {
  _IFaceLog_addLogFull_presult__isset() : ex1(false), ex2(false) {}
  bool ex1 :1;
  bool ex2 :1;
} _IFaceLog_addLogFull_presult__isset;

class IFaceLog_addLogFull_presult {
 public:


  virtual ~IFaceLog_addLogFull_presult() throw();
  DuplicateRecordException ex1;
  ServiceRuntimeException ex2;

  _IFaceLog_addLogFull_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_addLogs_args__isset {
  _IFaceLog_addLogs_args__isset() : beans(false), token(false) {}
  bool beans :1;
  bool token :1;
} _IFaceLog_addLogs_args__isset;

class IFaceLog_addLogs_args {
 public:

  IFaceLog_addLogs_args(const IFaceLog_addLogs_args&);
  IFaceLog_addLogs_args(IFaceLog_addLogs_args&&);
  IFaceLog_addLogs_args& operator=(const IFaceLog_addLogs_args&);
  IFaceLog_addLogs_args& operator=(IFaceLog_addLogs_args&&);
  IFaceLog_addLogs_args() {
  }

  virtual ~IFaceLog_addLogs_args() throw();
  std::vector<LogBean>  beans;
  Token token;

  _IFaceLog_addLogs_args__isset __isset;

  void __set_beans(const std::vector<LogBean> & val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_addLogs_args & rhs) const
  {
    if (!(beans == rhs.beans))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_addLogs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_addLogs_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_addLogs_pargs {
 public:


  virtual ~IFaceLog_addLogs_pargs() throw();
  const std::vector<LogBean> * beans;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_addLogs_result__isset {
  _IFaceLog_addLogs_result__isset() : ex1(false), ex2(false) {}
  bool ex1 :1;
  bool ex2 :1;
} _IFaceLog_addLogs_result__isset;

class IFaceLog_addLogs_result {
 public:

  IFaceLog_addLogs_result(const IFaceLog_addLogs_result&);
  IFaceLog_addLogs_result(IFaceLog_addLogs_result&&);
  IFaceLog_addLogs_result& operator=(const IFaceLog_addLogs_result&);
  IFaceLog_addLogs_result& operator=(IFaceLog_addLogs_result&&);
  IFaceLog_addLogs_result() {
  }

  virtual ~IFaceLog_addLogs_result() throw();
  DuplicateRecordException ex1;
  ServiceRuntimeException ex2;

  _IFaceLog_addLogs_result__isset __isset;

  void __set_ex1(const DuplicateRecordException& val);

  void __set_ex2(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_addLogs_result & rhs) const
  {
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_addLogs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_addLogs_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_addLogs_presult__isset {
  _IFaceLog_addLogs_presult__isset() : ex1(false), ex2(false) {}
  bool ex1 :1;
  bool ex2 :1;
} _IFaceLog_addLogs_presult__isset;

class IFaceLog_addLogs_presult {
 public:


  virtual ~IFaceLog_addLogs_presult() throw();
  DuplicateRecordException ex1;
  ServiceRuntimeException ex2;

  _IFaceLog_addLogs_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_addLogsFull_args__isset {
  _IFaceLog_addLogsFull_args__isset() : logBeans(false), faceBeans(false), featureImages(false), token(false) {}
  bool logBeans :1;
  bool faceBeans :1;
  bool featureImages :1;
  bool token :1;
} _IFaceLog_addLogsFull_args__isset;

class IFaceLog_addLogsFull_args {
 public:

  IFaceLog_addLogsFull_args(const IFaceLog_addLogsFull_args&);
  IFaceLog_addLogsFull_args(IFaceLog_addLogsFull_args&&);
  IFaceLog_addLogsFull_args& operator=(const IFaceLog_addLogsFull_args&);
  IFaceLog_addLogsFull_args& operator=(IFaceLog_addLogsFull_args&&);
  IFaceLog_addLogsFull_args() {
  }

  virtual ~IFaceLog_addLogsFull_args() throw();
  std::vector<LogBean>  logBeans;
  std::vector<FaceBean>  faceBeans;
  std::vector<std::string>  featureImages;
  Token token;

  _IFaceLog_addLogsFull_args__isset __isset;

  void __set_logBeans(const std::vector<LogBean> & val);

  void __set_faceBeans(const std::vector<FaceBean> & val);

  void __set_featureImages(const std::vector<std::string> & val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_addLogsFull_args & rhs) const
  {
    if (!(logBeans == rhs.logBeans))
      return false;
    if (!(faceBeans == rhs.faceBeans))
      return false;
    if (!(featureImages == rhs.featureImages))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_addLogsFull_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_addLogsFull_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_addLogsFull_pargs {
 public:


  virtual ~IFaceLog_addLogsFull_pargs() throw();
  const std::vector<LogBean> * logBeans;
  const std::vector<FaceBean> * faceBeans;
  const std::vector<std::string> * featureImages;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_addLogsFull_result__isset {
  _IFaceLog_addLogsFull_result__isset() : ex1(false), ex2(false) {}
  bool ex1 :1;
  bool ex2 :1;
} _IFaceLog_addLogsFull_result__isset;

class IFaceLog_addLogsFull_result {
 public:

  IFaceLog_addLogsFull_result(const IFaceLog_addLogsFull_result&);
  IFaceLog_addLogsFull_result(IFaceLog_addLogsFull_result&&);
  IFaceLog_addLogsFull_result& operator=(const IFaceLog_addLogsFull_result&);
  IFaceLog_addLogsFull_result& operator=(IFaceLog_addLogsFull_result&&);
  IFaceLog_addLogsFull_result() {
  }

  virtual ~IFaceLog_addLogsFull_result() throw();
  DuplicateRecordException ex1;
  ServiceRuntimeException ex2;

  _IFaceLog_addLogsFull_result__isset __isset;

  void __set_ex1(const DuplicateRecordException& val);

  void __set_ex2(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_addLogsFull_result & rhs) const
  {
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_addLogsFull_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_addLogsFull_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_addLogsFull_presult__isset {
  _IFaceLog_addLogsFull_presult__isset() : ex1(false), ex2(false) {}
  bool ex1 :1;
  bool ex2 :1;
} _IFaceLog_addLogsFull_presult__isset;

class IFaceLog_addLogsFull_presult {
 public:


  virtual ~IFaceLog_addLogsFull_presult() throw();
  DuplicateRecordException ex1;
  ServiceRuntimeException ex2;

  _IFaceLog_addLogsFull_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_applyAckChannel_args__isset {
  _IFaceLog_applyAckChannel_args__isset() : token(false) {}
  bool token :1;
} _IFaceLog_applyAckChannel_args__isset;

class IFaceLog_applyAckChannel_args {
 public:

  IFaceLog_applyAckChannel_args(const IFaceLog_applyAckChannel_args&);
  IFaceLog_applyAckChannel_args(IFaceLog_applyAckChannel_args&&);
  IFaceLog_applyAckChannel_args& operator=(const IFaceLog_applyAckChannel_args&);
  IFaceLog_applyAckChannel_args& operator=(IFaceLog_applyAckChannel_args&&);
  IFaceLog_applyAckChannel_args() {
  }

  virtual ~IFaceLog_applyAckChannel_args() throw();
  Token token;

  _IFaceLog_applyAckChannel_args__isset __isset;

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_applyAckChannel_args & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_applyAckChannel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_applyAckChannel_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_applyAckChannel_pargs {
 public:


  virtual ~IFaceLog_applyAckChannel_pargs() throw();
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_applyAckChannel_result__isset {
  _IFaceLog_applyAckChannel_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_applyAckChannel_result__isset;

class IFaceLog_applyAckChannel_result {
 public:

  IFaceLog_applyAckChannel_result(const IFaceLog_applyAckChannel_result&);
  IFaceLog_applyAckChannel_result(IFaceLog_applyAckChannel_result&&);
  IFaceLog_applyAckChannel_result& operator=(const IFaceLog_applyAckChannel_result&);
  IFaceLog_applyAckChannel_result& operator=(IFaceLog_applyAckChannel_result&&);
  IFaceLog_applyAckChannel_result() : success() {
  }

  virtual ~IFaceLog_applyAckChannel_result() throw();
  std::string success;
  ServiceRuntimeException ex1;

  _IFaceLog_applyAckChannel_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_applyAckChannel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_applyAckChannel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_applyAckChannel_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_applyAckChannel_presult__isset {
  _IFaceLog_applyAckChannel_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_applyAckChannel_presult__isset;

class IFaceLog_applyAckChannel_presult {
 public:


  virtual ~IFaceLog_applyAckChannel_presult() throw();
  std::string* success;
  ServiceRuntimeException ex1;

  _IFaceLog_applyAckChannel_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_applyAckChannelWithDuration_args__isset {
  _IFaceLog_applyAckChannelWithDuration_args__isset() : token(false) {}
  bool token :1;
} _IFaceLog_applyAckChannelWithDuration_args__isset;

class IFaceLog_applyAckChannelWithDuration_args {
 public:

  IFaceLog_applyAckChannelWithDuration_args(const IFaceLog_applyAckChannelWithDuration_args&);
  IFaceLog_applyAckChannelWithDuration_args(IFaceLog_applyAckChannelWithDuration_args&&);
  IFaceLog_applyAckChannelWithDuration_args& operator=(const IFaceLog_applyAckChannelWithDuration_args&);
  IFaceLog_applyAckChannelWithDuration_args& operator=(IFaceLog_applyAckChannelWithDuration_args&&);
  IFaceLog_applyAckChannelWithDuration_args() : duration(0) {
  }

  virtual ~IFaceLog_applyAckChannelWithDuration_args() throw();
  int32_t duration;
  Token token;

  _IFaceLog_applyAckChannelWithDuration_args__isset __isset;

  void __set_duration(const int32_t val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_applyAckChannelWithDuration_args & rhs) const
  {
    if (!(duration == rhs.duration))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_applyAckChannelWithDuration_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_applyAckChannelWithDuration_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_applyAckChannelWithDuration_pargs {
 public:


  virtual ~IFaceLog_applyAckChannelWithDuration_pargs() throw();
  const int32_t* duration;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_applyAckChannelWithDuration_result__isset {
  _IFaceLog_applyAckChannelWithDuration_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_applyAckChannelWithDuration_result__isset;

class IFaceLog_applyAckChannelWithDuration_result {
 public:

  IFaceLog_applyAckChannelWithDuration_result(const IFaceLog_applyAckChannelWithDuration_result&);
  IFaceLog_applyAckChannelWithDuration_result(IFaceLog_applyAckChannelWithDuration_result&&);
  IFaceLog_applyAckChannelWithDuration_result& operator=(const IFaceLog_applyAckChannelWithDuration_result&);
  IFaceLog_applyAckChannelWithDuration_result& operator=(IFaceLog_applyAckChannelWithDuration_result&&);
  IFaceLog_applyAckChannelWithDuration_result() : success() {
  }

  virtual ~IFaceLog_applyAckChannelWithDuration_result() throw();
  std::string success;
  ServiceRuntimeException ex1;

  _IFaceLog_applyAckChannelWithDuration_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_applyAckChannelWithDuration_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_applyAckChannelWithDuration_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_applyAckChannelWithDuration_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_applyAckChannelWithDuration_presult__isset {
  _IFaceLog_applyAckChannelWithDuration_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_applyAckChannelWithDuration_presult__isset;

class IFaceLog_applyAckChannelWithDuration_presult {
 public:


  virtual ~IFaceLog_applyAckChannelWithDuration_presult() throw();
  std::string* success;
  ServiceRuntimeException ex1;

  _IFaceLog_applyAckChannelWithDuration_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_applyCmdSn_args__isset {
  _IFaceLog_applyCmdSn_args__isset() : token(false) {}
  bool token :1;
} _IFaceLog_applyCmdSn_args__isset;

class IFaceLog_applyCmdSn_args {
 public:

  IFaceLog_applyCmdSn_args(const IFaceLog_applyCmdSn_args&);
  IFaceLog_applyCmdSn_args(IFaceLog_applyCmdSn_args&&);
  IFaceLog_applyCmdSn_args& operator=(const IFaceLog_applyCmdSn_args&);
  IFaceLog_applyCmdSn_args& operator=(IFaceLog_applyCmdSn_args&&);
  IFaceLog_applyCmdSn_args() {
  }

  virtual ~IFaceLog_applyCmdSn_args() throw();
  Token token;

  _IFaceLog_applyCmdSn_args__isset __isset;

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_applyCmdSn_args & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_applyCmdSn_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_applyCmdSn_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_applyCmdSn_pargs {
 public:


  virtual ~IFaceLog_applyCmdSn_pargs() throw();
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_applyCmdSn_result__isset {
  _IFaceLog_applyCmdSn_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_applyCmdSn_result__isset;

class IFaceLog_applyCmdSn_result {
 public:

  IFaceLog_applyCmdSn_result(const IFaceLog_applyCmdSn_result&);
  IFaceLog_applyCmdSn_result(IFaceLog_applyCmdSn_result&&);
  IFaceLog_applyCmdSn_result& operator=(const IFaceLog_applyCmdSn_result&);
  IFaceLog_applyCmdSn_result& operator=(IFaceLog_applyCmdSn_result&&);
  IFaceLog_applyCmdSn_result() : success(0) {
  }

  virtual ~IFaceLog_applyCmdSn_result() throw();
  int32_t success;
  ServiceRuntimeException ex1;

  _IFaceLog_applyCmdSn_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_applyCmdSn_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_applyCmdSn_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_applyCmdSn_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_applyCmdSn_presult__isset {
  _IFaceLog_applyCmdSn_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_applyCmdSn_presult__isset;

class IFaceLog_applyCmdSn_presult {
 public:


  virtual ~IFaceLog_applyCmdSn_presult() throw();
  int32_t* success;
  ServiceRuntimeException ex1;

  _IFaceLog_applyCmdSn_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_applyPersonToken_args__isset {
  _IFaceLog_applyPersonToken_args__isset() : password(false) {}
  bool password :1;
} _IFaceLog_applyPersonToken_args__isset;

class IFaceLog_applyPersonToken_args {
 public:

  IFaceLog_applyPersonToken_args(const IFaceLog_applyPersonToken_args&);
  IFaceLog_applyPersonToken_args(IFaceLog_applyPersonToken_args&&);
  IFaceLog_applyPersonToken_args& operator=(const IFaceLog_applyPersonToken_args&);
  IFaceLog_applyPersonToken_args& operator=(IFaceLog_applyPersonToken_args&&);
  IFaceLog_applyPersonToken_args() : personId(0), password(), isMd5(0) {
  }

  virtual ~IFaceLog_applyPersonToken_args() throw();
  int32_t personId;
  std::string password;
  bool isMd5;

  _IFaceLog_applyPersonToken_args__isset __isset;

  void __set_personId(const int32_t val);

  void __set_password(const std::string& val);

  void __set_isMd5(const bool val);

  bool operator == (const IFaceLog_applyPersonToken_args & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(isMd5 == rhs.isMd5))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_applyPersonToken_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_applyPersonToken_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_applyPersonToken_pargs {
 public:


  virtual ~IFaceLog_applyPersonToken_pargs() throw();
  const int32_t* personId;
  const std::string* password;
  const bool* isMd5;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_applyPersonToken_result__isset {
  _IFaceLog_applyPersonToken_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _IFaceLog_applyPersonToken_result__isset;

class IFaceLog_applyPersonToken_result {
 public:

  IFaceLog_applyPersonToken_result(const IFaceLog_applyPersonToken_result&);
  IFaceLog_applyPersonToken_result(IFaceLog_applyPersonToken_result&&);
  IFaceLog_applyPersonToken_result& operator=(const IFaceLog_applyPersonToken_result&);
  IFaceLog_applyPersonToken_result& operator=(IFaceLog_applyPersonToken_result&&);
  IFaceLog_applyPersonToken_result() {
  }

  virtual ~IFaceLog_applyPersonToken_result() throw();
  Token success;
  ServiceSecurityException ex1;
  ServiceRuntimeException ex2;

  _IFaceLog_applyPersonToken_result__isset __isset;

  void __set_success(const Token& val);

  void __set_ex1(const ServiceSecurityException& val);

  void __set_ex2(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_applyPersonToken_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_applyPersonToken_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_applyPersonToken_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_applyPersonToken_presult__isset {
  _IFaceLog_applyPersonToken_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _IFaceLog_applyPersonToken_presult__isset;

class IFaceLog_applyPersonToken_presult {
 public:


  virtual ~IFaceLog_applyPersonToken_presult() throw();
  Token* success;
  ServiceSecurityException ex1;
  ServiceRuntimeException ex2;

  _IFaceLog_applyPersonToken_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_applyRootToken_args__isset {
  _IFaceLog_applyRootToken_args__isset() : password(false) {}
  bool password :1;
} _IFaceLog_applyRootToken_args__isset;

class IFaceLog_applyRootToken_args {
 public:

  IFaceLog_applyRootToken_args(const IFaceLog_applyRootToken_args&);
  IFaceLog_applyRootToken_args(IFaceLog_applyRootToken_args&&);
  IFaceLog_applyRootToken_args& operator=(const IFaceLog_applyRootToken_args&);
  IFaceLog_applyRootToken_args& operator=(IFaceLog_applyRootToken_args&&);
  IFaceLog_applyRootToken_args() : password(), isMd5(0) {
  }

  virtual ~IFaceLog_applyRootToken_args() throw();
  std::string password;
  bool isMd5;

  _IFaceLog_applyRootToken_args__isset __isset;

  void __set_password(const std::string& val);

  void __set_isMd5(const bool val);

  bool operator == (const IFaceLog_applyRootToken_args & rhs) const
  {
    if (!(password == rhs.password))
      return false;
    if (!(isMd5 == rhs.isMd5))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_applyRootToken_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_applyRootToken_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_applyRootToken_pargs {
 public:


  virtual ~IFaceLog_applyRootToken_pargs() throw();
  const std::string* password;
  const bool* isMd5;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_applyRootToken_result__isset {
  _IFaceLog_applyRootToken_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _IFaceLog_applyRootToken_result__isset;

class IFaceLog_applyRootToken_result {
 public:

  IFaceLog_applyRootToken_result(const IFaceLog_applyRootToken_result&);
  IFaceLog_applyRootToken_result(IFaceLog_applyRootToken_result&&);
  IFaceLog_applyRootToken_result& operator=(const IFaceLog_applyRootToken_result&);
  IFaceLog_applyRootToken_result& operator=(IFaceLog_applyRootToken_result&&);
  IFaceLog_applyRootToken_result() {
  }

  virtual ~IFaceLog_applyRootToken_result() throw();
  Token success;
  ServiceSecurityException ex1;
  ServiceRuntimeException ex2;

  _IFaceLog_applyRootToken_result__isset __isset;

  void __set_success(const Token& val);

  void __set_ex1(const ServiceSecurityException& val);

  void __set_ex2(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_applyRootToken_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_applyRootToken_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_applyRootToken_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_applyRootToken_presult__isset {
  _IFaceLog_applyRootToken_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _IFaceLog_applyRootToken_presult__isset;

class IFaceLog_applyRootToken_presult {
 public:


  virtual ~IFaceLog_applyRootToken_presult() throw();
  Token* success;
  ServiceSecurityException ex1;
  ServiceRuntimeException ex2;

  _IFaceLog_applyRootToken_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_applyUserToken_args__isset {
  _IFaceLog_applyUserToken_args__isset() : password(false) {}
  bool password :1;
} _IFaceLog_applyUserToken_args__isset;

class IFaceLog_applyUserToken_args {
 public:

  IFaceLog_applyUserToken_args(const IFaceLog_applyUserToken_args&);
  IFaceLog_applyUserToken_args(IFaceLog_applyUserToken_args&&);
  IFaceLog_applyUserToken_args& operator=(const IFaceLog_applyUserToken_args&);
  IFaceLog_applyUserToken_args& operator=(IFaceLog_applyUserToken_args&&);
  IFaceLog_applyUserToken_args() : userid(0), password(), isMd5(0) {
  }

  virtual ~IFaceLog_applyUserToken_args() throw();
  int32_t userid;
  std::string password;
  bool isMd5;

  _IFaceLog_applyUserToken_args__isset __isset;

  void __set_userid(const int32_t val);

  void __set_password(const std::string& val);

  void __set_isMd5(const bool val);

  bool operator == (const IFaceLog_applyUserToken_args & rhs) const
  {
    if (!(userid == rhs.userid))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(isMd5 == rhs.isMd5))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_applyUserToken_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_applyUserToken_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_applyUserToken_pargs {
 public:


  virtual ~IFaceLog_applyUserToken_pargs() throw();
  const int32_t* userid;
  const std::string* password;
  const bool* isMd5;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_applyUserToken_result__isset {
  _IFaceLog_applyUserToken_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _IFaceLog_applyUserToken_result__isset;

class IFaceLog_applyUserToken_result {
 public:

  IFaceLog_applyUserToken_result(const IFaceLog_applyUserToken_result&);
  IFaceLog_applyUserToken_result(IFaceLog_applyUserToken_result&&);
  IFaceLog_applyUserToken_result& operator=(const IFaceLog_applyUserToken_result&);
  IFaceLog_applyUserToken_result& operator=(IFaceLog_applyUserToken_result&&);
  IFaceLog_applyUserToken_result() {
  }

  virtual ~IFaceLog_applyUserToken_result() throw();
  Token success;
  ServiceSecurityException ex1;
  ServiceRuntimeException ex2;

  _IFaceLog_applyUserToken_result__isset __isset;

  void __set_success(const Token& val);

  void __set_ex1(const ServiceSecurityException& val);

  void __set_ex2(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_applyUserToken_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_applyUserToken_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_applyUserToken_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_applyUserToken_presult__isset {
  _IFaceLog_applyUserToken_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _IFaceLog_applyUserToken_presult__isset;

class IFaceLog_applyUserToken_presult {
 public:


  virtual ~IFaceLog_applyUserToken_presult() throw();
  Token* success;
  ServiceSecurityException ex1;
  ServiceRuntimeException ex2;

  _IFaceLog_applyUserToken_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_bindBorder_args__isset {
  _IFaceLog_bindBorder_args__isset() : personGroupId(false), deviceGroupId(false), token(false) {}
  bool personGroupId :1;
  bool deviceGroupId :1;
  bool token :1;
} _IFaceLog_bindBorder_args__isset;

class IFaceLog_bindBorder_args {
 public:

  IFaceLog_bindBorder_args(const IFaceLog_bindBorder_args&);
  IFaceLog_bindBorder_args(IFaceLog_bindBorder_args&&);
  IFaceLog_bindBorder_args& operator=(const IFaceLog_bindBorder_args&);
  IFaceLog_bindBorder_args& operator=(IFaceLog_bindBorder_args&&);
  IFaceLog_bindBorder_args() : personGroupId(0), deviceGroupId(0) {
  }

  virtual ~IFaceLog_bindBorder_args() throw();
  int32_t personGroupId;
  int32_t deviceGroupId;
  Token token;

  _IFaceLog_bindBorder_args__isset __isset;

  void __set_personGroupId(const int32_t val);

  void __set_deviceGroupId(const int32_t val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_bindBorder_args & rhs) const
  {
    if (!(personGroupId == rhs.personGroupId))
      return false;
    if (!(deviceGroupId == rhs.deviceGroupId))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_bindBorder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_bindBorder_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_bindBorder_pargs {
 public:


  virtual ~IFaceLog_bindBorder_pargs() throw();
  const int32_t* personGroupId;
  const int32_t* deviceGroupId;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_bindBorder_result__isset {
  _IFaceLog_bindBorder_result__isset() : ex1(false) {}
  bool ex1 :1;
} _IFaceLog_bindBorder_result__isset;

class IFaceLog_bindBorder_result {
 public:

  IFaceLog_bindBorder_result(const IFaceLog_bindBorder_result&);
  IFaceLog_bindBorder_result(IFaceLog_bindBorder_result&&);
  IFaceLog_bindBorder_result& operator=(const IFaceLog_bindBorder_result&);
  IFaceLog_bindBorder_result& operator=(IFaceLog_bindBorder_result&&);
  IFaceLog_bindBorder_result() {
  }

  virtual ~IFaceLog_bindBorder_result() throw();
  ServiceRuntimeException ex1;

  _IFaceLog_bindBorder_result__isset __isset;

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_bindBorder_result & rhs) const
  {
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_bindBorder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_bindBorder_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_bindBorder_presult__isset {
  _IFaceLog_bindBorder_presult__isset() : ex1(false) {}
  bool ex1 :1;
} _IFaceLog_bindBorder_presult__isset;

class IFaceLog_bindBorder_presult {
 public:


  virtual ~IFaceLog_bindBorder_presult() throw();
  ServiceRuntimeException ex1;

  _IFaceLog_bindBorder_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class IFaceLog_childListForDeviceGroup_args {
 public:

  IFaceLog_childListForDeviceGroup_args(const IFaceLog_childListForDeviceGroup_args&);
  IFaceLog_childListForDeviceGroup_args(IFaceLog_childListForDeviceGroup_args&&);
  IFaceLog_childListForDeviceGroup_args& operator=(const IFaceLog_childListForDeviceGroup_args&);
  IFaceLog_childListForDeviceGroup_args& operator=(IFaceLog_childListForDeviceGroup_args&&);
  IFaceLog_childListForDeviceGroup_args() : deviceGroupId(0) {
  }

  virtual ~IFaceLog_childListForDeviceGroup_args() throw();
  int32_t deviceGroupId;

  void __set_deviceGroupId(const int32_t val);

  bool operator == (const IFaceLog_childListForDeviceGroup_args & rhs) const
  {
    if (!(deviceGroupId == rhs.deviceGroupId))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_childListForDeviceGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_childListForDeviceGroup_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_childListForDeviceGroup_pargs {
 public:


  virtual ~IFaceLog_childListForDeviceGroup_pargs() throw();
  const int32_t* deviceGroupId;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_childListForDeviceGroup_result__isset {
  _IFaceLog_childListForDeviceGroup_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_childListForDeviceGroup_result__isset;

class IFaceLog_childListForDeviceGroup_result {
 public:

  IFaceLog_childListForDeviceGroup_result(const IFaceLog_childListForDeviceGroup_result&);
  IFaceLog_childListForDeviceGroup_result(IFaceLog_childListForDeviceGroup_result&&);
  IFaceLog_childListForDeviceGroup_result& operator=(const IFaceLog_childListForDeviceGroup_result&);
  IFaceLog_childListForDeviceGroup_result& operator=(IFaceLog_childListForDeviceGroup_result&&);
  IFaceLog_childListForDeviceGroup_result() {
  }

  virtual ~IFaceLog_childListForDeviceGroup_result() throw();
  std::vector<int32_t>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_childListForDeviceGroup_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_childListForDeviceGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_childListForDeviceGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_childListForDeviceGroup_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_childListForDeviceGroup_presult__isset {
  _IFaceLog_childListForDeviceGroup_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_childListForDeviceGroup_presult__isset;

class IFaceLog_childListForDeviceGroup_presult {
 public:


  virtual ~IFaceLog_childListForDeviceGroup_presult() throw();
  std::vector<int32_t> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_childListForDeviceGroup_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class IFaceLog_childListForPersonGroup_args {
 public:

  IFaceLog_childListForPersonGroup_args(const IFaceLog_childListForPersonGroup_args&);
  IFaceLog_childListForPersonGroup_args(IFaceLog_childListForPersonGroup_args&&);
  IFaceLog_childListForPersonGroup_args& operator=(const IFaceLog_childListForPersonGroup_args&);
  IFaceLog_childListForPersonGroup_args& operator=(IFaceLog_childListForPersonGroup_args&&);
  IFaceLog_childListForPersonGroup_args() : personGroupId(0) {
  }

  virtual ~IFaceLog_childListForPersonGroup_args() throw();
  int32_t personGroupId;

  void __set_personGroupId(const int32_t val);

  bool operator == (const IFaceLog_childListForPersonGroup_args & rhs) const
  {
    if (!(personGroupId == rhs.personGroupId))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_childListForPersonGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_childListForPersonGroup_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_childListForPersonGroup_pargs {
 public:


  virtual ~IFaceLog_childListForPersonGroup_pargs() throw();
  const int32_t* personGroupId;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_childListForPersonGroup_result__isset {
  _IFaceLog_childListForPersonGroup_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_childListForPersonGroup_result__isset;

class IFaceLog_childListForPersonGroup_result {
 public:

  IFaceLog_childListForPersonGroup_result(const IFaceLog_childListForPersonGroup_result&);
  IFaceLog_childListForPersonGroup_result(IFaceLog_childListForPersonGroup_result&&);
  IFaceLog_childListForPersonGroup_result& operator=(const IFaceLog_childListForPersonGroup_result&);
  IFaceLog_childListForPersonGroup_result& operator=(IFaceLog_childListForPersonGroup_result&&);
  IFaceLog_childListForPersonGroup_result() {
  }

  virtual ~IFaceLog_childListForPersonGroup_result() throw();
  std::vector<int32_t>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_childListForPersonGroup_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_childListForPersonGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_childListForPersonGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_childListForPersonGroup_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_childListForPersonGroup_presult__isset {
  _IFaceLog_childListForPersonGroup_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_childListForPersonGroup_presult__isset;

class IFaceLog_childListForPersonGroup_presult {
 public:


  virtual ~IFaceLog_childListForPersonGroup_presult() throw();
  std::vector<int32_t> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_childListForPersonGroup_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_countDeviceByWhere_args__isset {
  _IFaceLog_countDeviceByWhere_args__isset() : where(false) {}
  bool where :1;
} _IFaceLog_countDeviceByWhere_args__isset;

class IFaceLog_countDeviceByWhere_args {
 public:

  IFaceLog_countDeviceByWhere_args(const IFaceLog_countDeviceByWhere_args&);
  IFaceLog_countDeviceByWhere_args(IFaceLog_countDeviceByWhere_args&&);
  IFaceLog_countDeviceByWhere_args& operator=(const IFaceLog_countDeviceByWhere_args&);
  IFaceLog_countDeviceByWhere_args& operator=(IFaceLog_countDeviceByWhere_args&&);
  IFaceLog_countDeviceByWhere_args() : where() {
  }

  virtual ~IFaceLog_countDeviceByWhere_args() throw();
  std::string where;

  _IFaceLog_countDeviceByWhere_args__isset __isset;

  void __set_where(const std::string& val);

  bool operator == (const IFaceLog_countDeviceByWhere_args & rhs) const
  {
    if (!(where == rhs.where))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_countDeviceByWhere_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_countDeviceByWhere_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_countDeviceByWhere_pargs {
 public:


  virtual ~IFaceLog_countDeviceByWhere_pargs() throw();
  const std::string* where;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_countDeviceByWhere_result__isset {
  _IFaceLog_countDeviceByWhere_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_countDeviceByWhere_result__isset;

class IFaceLog_countDeviceByWhere_result {
 public:

  IFaceLog_countDeviceByWhere_result(const IFaceLog_countDeviceByWhere_result&);
  IFaceLog_countDeviceByWhere_result(IFaceLog_countDeviceByWhere_result&&);
  IFaceLog_countDeviceByWhere_result& operator=(const IFaceLog_countDeviceByWhere_result&);
  IFaceLog_countDeviceByWhere_result& operator=(IFaceLog_countDeviceByWhere_result&&);
  IFaceLog_countDeviceByWhere_result() : success(0) {
  }

  virtual ~IFaceLog_countDeviceByWhere_result() throw();
  int32_t success;
  ServiceRuntimeException ex1;

  _IFaceLog_countDeviceByWhere_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_countDeviceByWhere_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_countDeviceByWhere_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_countDeviceByWhere_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_countDeviceByWhere_presult__isset {
  _IFaceLog_countDeviceByWhere_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_countDeviceByWhere_presult__isset;

class IFaceLog_countDeviceByWhere_presult {
 public:


  virtual ~IFaceLog_countDeviceByWhere_presult() throw();
  int32_t* success;
  ServiceRuntimeException ex1;

  _IFaceLog_countDeviceByWhere_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_countDeviceGroupByWhere_args__isset {
  _IFaceLog_countDeviceGroupByWhere_args__isset() : where(false) {}
  bool where :1;
} _IFaceLog_countDeviceGroupByWhere_args__isset;

class IFaceLog_countDeviceGroupByWhere_args {
 public:

  IFaceLog_countDeviceGroupByWhere_args(const IFaceLog_countDeviceGroupByWhere_args&);
  IFaceLog_countDeviceGroupByWhere_args(IFaceLog_countDeviceGroupByWhere_args&&);
  IFaceLog_countDeviceGroupByWhere_args& operator=(const IFaceLog_countDeviceGroupByWhere_args&);
  IFaceLog_countDeviceGroupByWhere_args& operator=(IFaceLog_countDeviceGroupByWhere_args&&);
  IFaceLog_countDeviceGroupByWhere_args() : where() {
  }

  virtual ~IFaceLog_countDeviceGroupByWhere_args() throw();
  std::string where;

  _IFaceLog_countDeviceGroupByWhere_args__isset __isset;

  void __set_where(const std::string& val);

  bool operator == (const IFaceLog_countDeviceGroupByWhere_args & rhs) const
  {
    if (!(where == rhs.where))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_countDeviceGroupByWhere_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_countDeviceGroupByWhere_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_countDeviceGroupByWhere_pargs {
 public:


  virtual ~IFaceLog_countDeviceGroupByWhere_pargs() throw();
  const std::string* where;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_countDeviceGroupByWhere_result__isset {
  _IFaceLog_countDeviceGroupByWhere_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_countDeviceGroupByWhere_result__isset;

class IFaceLog_countDeviceGroupByWhere_result {
 public:

  IFaceLog_countDeviceGroupByWhere_result(const IFaceLog_countDeviceGroupByWhere_result&);
  IFaceLog_countDeviceGroupByWhere_result(IFaceLog_countDeviceGroupByWhere_result&&);
  IFaceLog_countDeviceGroupByWhere_result& operator=(const IFaceLog_countDeviceGroupByWhere_result&);
  IFaceLog_countDeviceGroupByWhere_result& operator=(IFaceLog_countDeviceGroupByWhere_result&&);
  IFaceLog_countDeviceGroupByWhere_result() : success(0) {
  }

  virtual ~IFaceLog_countDeviceGroupByWhere_result() throw();
  int32_t success;
  ServiceRuntimeException ex1;

  _IFaceLog_countDeviceGroupByWhere_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_countDeviceGroupByWhere_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_countDeviceGroupByWhere_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_countDeviceGroupByWhere_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_countDeviceGroupByWhere_presult__isset {
  _IFaceLog_countDeviceGroupByWhere_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_countDeviceGroupByWhere_presult__isset;

class IFaceLog_countDeviceGroupByWhere_presult {
 public:


  virtual ~IFaceLog_countDeviceGroupByWhere_presult() throw();
  int32_t* success;
  ServiceRuntimeException ex1;

  _IFaceLog_countDeviceGroupByWhere_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_countLogByWhere_args__isset {
  _IFaceLog_countLogByWhere_args__isset() : where(false) {}
  bool where :1;
} _IFaceLog_countLogByWhere_args__isset;

class IFaceLog_countLogByWhere_args {
 public:

  IFaceLog_countLogByWhere_args(const IFaceLog_countLogByWhere_args&);
  IFaceLog_countLogByWhere_args(IFaceLog_countLogByWhere_args&&);
  IFaceLog_countLogByWhere_args& operator=(const IFaceLog_countLogByWhere_args&);
  IFaceLog_countLogByWhere_args& operator=(IFaceLog_countLogByWhere_args&&);
  IFaceLog_countLogByWhere_args() : where() {
  }

  virtual ~IFaceLog_countLogByWhere_args() throw();
  std::string where;

  _IFaceLog_countLogByWhere_args__isset __isset;

  void __set_where(const std::string& val);

  bool operator == (const IFaceLog_countLogByWhere_args & rhs) const
  {
    if (!(where == rhs.where))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_countLogByWhere_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_countLogByWhere_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_countLogByWhere_pargs {
 public:


  virtual ~IFaceLog_countLogByWhere_pargs() throw();
  const std::string* where;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_countLogByWhere_result__isset {
  _IFaceLog_countLogByWhere_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_countLogByWhere_result__isset;

class IFaceLog_countLogByWhere_result {
 public:

  IFaceLog_countLogByWhere_result(const IFaceLog_countLogByWhere_result&);
  IFaceLog_countLogByWhere_result(IFaceLog_countLogByWhere_result&&);
  IFaceLog_countLogByWhere_result& operator=(const IFaceLog_countLogByWhere_result&);
  IFaceLog_countLogByWhere_result& operator=(IFaceLog_countLogByWhere_result&&);
  IFaceLog_countLogByWhere_result() : success(0) {
  }

  virtual ~IFaceLog_countLogByWhere_result() throw();
  int32_t success;
  ServiceRuntimeException ex1;

  _IFaceLog_countLogByWhere_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_countLogByWhere_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_countLogByWhere_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_countLogByWhere_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_countLogByWhere_presult__isset {
  _IFaceLog_countLogByWhere_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_countLogByWhere_presult__isset;

class IFaceLog_countLogByWhere_presult {
 public:


  virtual ~IFaceLog_countLogByWhere_presult() throw();
  int32_t* success;
  ServiceRuntimeException ex1;

  _IFaceLog_countLogByWhere_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class IFaceLog_countLogLightByVerifyTime_args {
 public:

  IFaceLog_countLogLightByVerifyTime_args(const IFaceLog_countLogLightByVerifyTime_args&);
  IFaceLog_countLogLightByVerifyTime_args(IFaceLog_countLogLightByVerifyTime_args&&);
  IFaceLog_countLogLightByVerifyTime_args& operator=(const IFaceLog_countLogLightByVerifyTime_args&);
  IFaceLog_countLogLightByVerifyTime_args& operator=(IFaceLog_countLogLightByVerifyTime_args&&);
  IFaceLog_countLogLightByVerifyTime_args() : timestamp(0) {
  }

  virtual ~IFaceLog_countLogLightByVerifyTime_args() throw();
  int64_t timestamp;

  void __set_timestamp(const int64_t val);

  bool operator == (const IFaceLog_countLogLightByVerifyTime_args & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_countLogLightByVerifyTime_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_countLogLightByVerifyTime_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_countLogLightByVerifyTime_pargs {
 public:


  virtual ~IFaceLog_countLogLightByVerifyTime_pargs() throw();
  const int64_t* timestamp;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_countLogLightByVerifyTime_result__isset {
  _IFaceLog_countLogLightByVerifyTime_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_countLogLightByVerifyTime_result__isset;

class IFaceLog_countLogLightByVerifyTime_result {
 public:

  IFaceLog_countLogLightByVerifyTime_result(const IFaceLog_countLogLightByVerifyTime_result&);
  IFaceLog_countLogLightByVerifyTime_result(IFaceLog_countLogLightByVerifyTime_result&&);
  IFaceLog_countLogLightByVerifyTime_result& operator=(const IFaceLog_countLogLightByVerifyTime_result&);
  IFaceLog_countLogLightByVerifyTime_result& operator=(IFaceLog_countLogLightByVerifyTime_result&&);
  IFaceLog_countLogLightByVerifyTime_result() : success(0) {
  }

  virtual ~IFaceLog_countLogLightByVerifyTime_result() throw();
  int32_t success;
  ServiceRuntimeException ex1;

  _IFaceLog_countLogLightByVerifyTime_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_countLogLightByVerifyTime_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_countLogLightByVerifyTime_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_countLogLightByVerifyTime_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_countLogLightByVerifyTime_presult__isset {
  _IFaceLog_countLogLightByVerifyTime_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_countLogLightByVerifyTime_presult__isset;

class IFaceLog_countLogLightByVerifyTime_presult {
 public:


  virtual ~IFaceLog_countLogLightByVerifyTime_presult() throw();
  int32_t* success;
  ServiceRuntimeException ex1;

  _IFaceLog_countLogLightByVerifyTime_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_countLogLightByVerifyTimeTimestr_args__isset {
  _IFaceLog_countLogLightByVerifyTimeTimestr_args__isset() : timestamp(false) {}
  bool timestamp :1;
} _IFaceLog_countLogLightByVerifyTimeTimestr_args__isset;

class IFaceLog_countLogLightByVerifyTimeTimestr_args {
 public:

  IFaceLog_countLogLightByVerifyTimeTimestr_args(const IFaceLog_countLogLightByVerifyTimeTimestr_args&);
  IFaceLog_countLogLightByVerifyTimeTimestr_args(IFaceLog_countLogLightByVerifyTimeTimestr_args&&);
  IFaceLog_countLogLightByVerifyTimeTimestr_args& operator=(const IFaceLog_countLogLightByVerifyTimeTimestr_args&);
  IFaceLog_countLogLightByVerifyTimeTimestr_args& operator=(IFaceLog_countLogLightByVerifyTimeTimestr_args&&);
  IFaceLog_countLogLightByVerifyTimeTimestr_args() : timestamp() {
  }

  virtual ~IFaceLog_countLogLightByVerifyTimeTimestr_args() throw();
  std::string timestamp;

  _IFaceLog_countLogLightByVerifyTimeTimestr_args__isset __isset;

  void __set_timestamp(const std::string& val);

  bool operator == (const IFaceLog_countLogLightByVerifyTimeTimestr_args & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_countLogLightByVerifyTimeTimestr_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_countLogLightByVerifyTimeTimestr_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_countLogLightByVerifyTimeTimestr_pargs {
 public:


  virtual ~IFaceLog_countLogLightByVerifyTimeTimestr_pargs() throw();
  const std::string* timestamp;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_countLogLightByVerifyTimeTimestr_result__isset {
  _IFaceLog_countLogLightByVerifyTimeTimestr_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_countLogLightByVerifyTimeTimestr_result__isset;

class IFaceLog_countLogLightByVerifyTimeTimestr_result {
 public:

  IFaceLog_countLogLightByVerifyTimeTimestr_result(const IFaceLog_countLogLightByVerifyTimeTimestr_result&);
  IFaceLog_countLogLightByVerifyTimeTimestr_result(IFaceLog_countLogLightByVerifyTimeTimestr_result&&);
  IFaceLog_countLogLightByVerifyTimeTimestr_result& operator=(const IFaceLog_countLogLightByVerifyTimeTimestr_result&);
  IFaceLog_countLogLightByVerifyTimeTimestr_result& operator=(IFaceLog_countLogLightByVerifyTimeTimestr_result&&);
  IFaceLog_countLogLightByVerifyTimeTimestr_result() : success(0) {
  }

  virtual ~IFaceLog_countLogLightByVerifyTimeTimestr_result() throw();
  int32_t success;
  ServiceRuntimeException ex1;

  _IFaceLog_countLogLightByVerifyTimeTimestr_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_countLogLightByVerifyTimeTimestr_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_countLogLightByVerifyTimeTimestr_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_countLogLightByVerifyTimeTimestr_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_countLogLightByVerifyTimeTimestr_presult__isset {
  _IFaceLog_countLogLightByVerifyTimeTimestr_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_countLogLightByVerifyTimeTimestr_presult__isset;

class IFaceLog_countLogLightByVerifyTimeTimestr_presult {
 public:


  virtual ~IFaceLog_countLogLightByVerifyTimeTimestr_presult() throw();
  int32_t* success;
  ServiceRuntimeException ex1;

  _IFaceLog_countLogLightByVerifyTimeTimestr_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_countLogLightByWhere_args__isset {
  _IFaceLog_countLogLightByWhere_args__isset() : where(false) {}
  bool where :1;
} _IFaceLog_countLogLightByWhere_args__isset;

class IFaceLog_countLogLightByWhere_args {
 public:

  IFaceLog_countLogLightByWhere_args(const IFaceLog_countLogLightByWhere_args&);
  IFaceLog_countLogLightByWhere_args(IFaceLog_countLogLightByWhere_args&&);
  IFaceLog_countLogLightByWhere_args& operator=(const IFaceLog_countLogLightByWhere_args&);
  IFaceLog_countLogLightByWhere_args& operator=(IFaceLog_countLogLightByWhere_args&&);
  IFaceLog_countLogLightByWhere_args() : where() {
  }

  virtual ~IFaceLog_countLogLightByWhere_args() throw();
  std::string where;

  _IFaceLog_countLogLightByWhere_args__isset __isset;

  void __set_where(const std::string& val);

  bool operator == (const IFaceLog_countLogLightByWhere_args & rhs) const
  {
    if (!(where == rhs.where))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_countLogLightByWhere_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_countLogLightByWhere_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_countLogLightByWhere_pargs {
 public:


  virtual ~IFaceLog_countLogLightByWhere_pargs() throw();
  const std::string* where;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_countLogLightByWhere_result__isset {
  _IFaceLog_countLogLightByWhere_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_countLogLightByWhere_result__isset;

class IFaceLog_countLogLightByWhere_result {
 public:

  IFaceLog_countLogLightByWhere_result(const IFaceLog_countLogLightByWhere_result&);
  IFaceLog_countLogLightByWhere_result(IFaceLog_countLogLightByWhere_result&&);
  IFaceLog_countLogLightByWhere_result& operator=(const IFaceLog_countLogLightByWhere_result&);
  IFaceLog_countLogLightByWhere_result& operator=(IFaceLog_countLogLightByWhere_result&&);
  IFaceLog_countLogLightByWhere_result() : success(0) {
  }

  virtual ~IFaceLog_countLogLightByWhere_result() throw();
  int32_t success;
  ServiceRuntimeException ex1;

  _IFaceLog_countLogLightByWhere_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_countLogLightByWhere_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_countLogLightByWhere_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_countLogLightByWhere_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_countLogLightByWhere_presult__isset {
  _IFaceLog_countLogLightByWhere_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_countLogLightByWhere_presult__isset;

class IFaceLog_countLogLightByWhere_presult {
 public:


  virtual ~IFaceLog_countLogLightByWhere_presult() throw();
  int32_t* success;
  ServiceRuntimeException ex1;

  _IFaceLog_countLogLightByWhere_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_countPersonByWhere_args__isset {
  _IFaceLog_countPersonByWhere_args__isset() : where(false) {}
  bool where :1;
} _IFaceLog_countPersonByWhere_args__isset;

class IFaceLog_countPersonByWhere_args {
 public:

  IFaceLog_countPersonByWhere_args(const IFaceLog_countPersonByWhere_args&);
  IFaceLog_countPersonByWhere_args(IFaceLog_countPersonByWhere_args&&);
  IFaceLog_countPersonByWhere_args& operator=(const IFaceLog_countPersonByWhere_args&);
  IFaceLog_countPersonByWhere_args& operator=(IFaceLog_countPersonByWhere_args&&);
  IFaceLog_countPersonByWhere_args() : where() {
  }

  virtual ~IFaceLog_countPersonByWhere_args() throw();
  std::string where;

  _IFaceLog_countPersonByWhere_args__isset __isset;

  void __set_where(const std::string& val);

  bool operator == (const IFaceLog_countPersonByWhere_args & rhs) const
  {
    if (!(where == rhs.where))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_countPersonByWhere_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_countPersonByWhere_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_countPersonByWhere_pargs {
 public:


  virtual ~IFaceLog_countPersonByWhere_pargs() throw();
  const std::string* where;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_countPersonByWhere_result__isset {
  _IFaceLog_countPersonByWhere_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_countPersonByWhere_result__isset;

class IFaceLog_countPersonByWhere_result {
 public:

  IFaceLog_countPersonByWhere_result(const IFaceLog_countPersonByWhere_result&);
  IFaceLog_countPersonByWhere_result(IFaceLog_countPersonByWhere_result&&);
  IFaceLog_countPersonByWhere_result& operator=(const IFaceLog_countPersonByWhere_result&);
  IFaceLog_countPersonByWhere_result& operator=(IFaceLog_countPersonByWhere_result&&);
  IFaceLog_countPersonByWhere_result() : success(0) {
  }

  virtual ~IFaceLog_countPersonByWhere_result() throw();
  int32_t success;
  ServiceRuntimeException ex1;

  _IFaceLog_countPersonByWhere_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_countPersonByWhere_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_countPersonByWhere_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_countPersonByWhere_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_countPersonByWhere_presult__isset {
  _IFaceLog_countPersonByWhere_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_countPersonByWhere_presult__isset;

class IFaceLog_countPersonByWhere_presult {
 public:


  virtual ~IFaceLog_countPersonByWhere_presult() throw();
  int32_t* success;
  ServiceRuntimeException ex1;

  _IFaceLog_countPersonByWhere_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_countPersonGroupByWhere_args__isset {
  _IFaceLog_countPersonGroupByWhere_args__isset() : where(false) {}
  bool where :1;
} _IFaceLog_countPersonGroupByWhere_args__isset;

class IFaceLog_countPersonGroupByWhere_args {
 public:

  IFaceLog_countPersonGroupByWhere_args(const IFaceLog_countPersonGroupByWhere_args&);
  IFaceLog_countPersonGroupByWhere_args(IFaceLog_countPersonGroupByWhere_args&&);
  IFaceLog_countPersonGroupByWhere_args& operator=(const IFaceLog_countPersonGroupByWhere_args&);
  IFaceLog_countPersonGroupByWhere_args& operator=(IFaceLog_countPersonGroupByWhere_args&&);
  IFaceLog_countPersonGroupByWhere_args() : where() {
  }

  virtual ~IFaceLog_countPersonGroupByWhere_args() throw();
  std::string where;

  _IFaceLog_countPersonGroupByWhere_args__isset __isset;

  void __set_where(const std::string& val);

  bool operator == (const IFaceLog_countPersonGroupByWhere_args & rhs) const
  {
    if (!(where == rhs.where))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_countPersonGroupByWhere_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_countPersonGroupByWhere_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_countPersonGroupByWhere_pargs {
 public:


  virtual ~IFaceLog_countPersonGroupByWhere_pargs() throw();
  const std::string* where;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_countPersonGroupByWhere_result__isset {
  _IFaceLog_countPersonGroupByWhere_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_countPersonGroupByWhere_result__isset;

class IFaceLog_countPersonGroupByWhere_result {
 public:

  IFaceLog_countPersonGroupByWhere_result(const IFaceLog_countPersonGroupByWhere_result&);
  IFaceLog_countPersonGroupByWhere_result(IFaceLog_countPersonGroupByWhere_result&&);
  IFaceLog_countPersonGroupByWhere_result& operator=(const IFaceLog_countPersonGroupByWhere_result&);
  IFaceLog_countPersonGroupByWhere_result& operator=(IFaceLog_countPersonGroupByWhere_result&&);
  IFaceLog_countPersonGroupByWhere_result() : success(0) {
  }

  virtual ~IFaceLog_countPersonGroupByWhere_result() throw();
  int32_t success;
  ServiceRuntimeException ex1;

  _IFaceLog_countPersonGroupByWhere_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_countPersonGroupByWhere_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_countPersonGroupByWhere_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_countPersonGroupByWhere_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_countPersonGroupByWhere_presult__isset {
  _IFaceLog_countPersonGroupByWhere_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_countPersonGroupByWhere_presult__isset;

class IFaceLog_countPersonGroupByWhere_presult {
 public:


  virtual ~IFaceLog_countPersonGroupByWhere_presult() throw();
  int32_t* success;
  ServiceRuntimeException ex1;

  _IFaceLog_countPersonGroupByWhere_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_countPersonLog_args__isset {
  _IFaceLog_countPersonLog_args__isset() : startDate(false), endDate(false) {}
  bool startDate :1;
  bool endDate :1;
} _IFaceLog_countPersonLog_args__isset;

class IFaceLog_countPersonLog_args {
 public:

  IFaceLog_countPersonLog_args(const IFaceLog_countPersonLog_args&);
  IFaceLog_countPersonLog_args(IFaceLog_countPersonLog_args&&);
  IFaceLog_countPersonLog_args& operator=(const IFaceLog_countPersonLog_args&);
  IFaceLog_countPersonLog_args& operator=(IFaceLog_countPersonLog_args&&);
  IFaceLog_countPersonLog_args() : personId(0), startDate(0), endDate(0) {
  }

  virtual ~IFaceLog_countPersonLog_args() throw();
  int32_t personId;
  int64_t startDate;
  int64_t endDate;

  _IFaceLog_countPersonLog_args__isset __isset;

  void __set_personId(const int32_t val);

  void __set_startDate(const int64_t val);

  void __set_endDate(const int64_t val);

  bool operator == (const IFaceLog_countPersonLog_args & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    if (!(startDate == rhs.startDate))
      return false;
    if (!(endDate == rhs.endDate))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_countPersonLog_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_countPersonLog_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_countPersonLog_pargs {
 public:


  virtual ~IFaceLog_countPersonLog_pargs() throw();
  const int32_t* personId;
  const int64_t* startDate;
  const int64_t* endDate;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_countPersonLog_result__isset {
  _IFaceLog_countPersonLog_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_countPersonLog_result__isset;

class IFaceLog_countPersonLog_result {
 public:

  IFaceLog_countPersonLog_result(const IFaceLog_countPersonLog_result&);
  IFaceLog_countPersonLog_result(IFaceLog_countPersonLog_result&&);
  IFaceLog_countPersonLog_result& operator=(const IFaceLog_countPersonLog_result&);
  IFaceLog_countPersonLog_result& operator=(IFaceLog_countPersonLog_result&&);
  IFaceLog_countPersonLog_result() {
  }

  virtual ~IFaceLog_countPersonLog_result() throw();
  std::map<std::string, int32_t>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_countPersonLog_result__isset __isset;

  void __set_success(const std::map<std::string, int32_t> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_countPersonLog_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_countPersonLog_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_countPersonLog_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_countPersonLog_presult__isset {
  _IFaceLog_countPersonLog_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_countPersonLog_presult__isset;

class IFaceLog_countPersonLog_presult {
 public:


  virtual ~IFaceLog_countPersonLog_presult() throw();
  std::map<std::string, int32_t> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_countPersonLog_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_countPersonLogTimeStr_args__isset {
  _IFaceLog_countPersonLogTimeStr_args__isset() : startDate(false), endDate(false) {}
  bool startDate :1;
  bool endDate :1;
} _IFaceLog_countPersonLogTimeStr_args__isset;

class IFaceLog_countPersonLogTimeStr_args {
 public:

  IFaceLog_countPersonLogTimeStr_args(const IFaceLog_countPersonLogTimeStr_args&);
  IFaceLog_countPersonLogTimeStr_args(IFaceLog_countPersonLogTimeStr_args&&);
  IFaceLog_countPersonLogTimeStr_args& operator=(const IFaceLog_countPersonLogTimeStr_args&);
  IFaceLog_countPersonLogTimeStr_args& operator=(IFaceLog_countPersonLogTimeStr_args&&);
  IFaceLog_countPersonLogTimeStr_args() : personId(0), startDate(), endDate() {
  }

  virtual ~IFaceLog_countPersonLogTimeStr_args() throw();
  int32_t personId;
  std::string startDate;
  std::string endDate;

  _IFaceLog_countPersonLogTimeStr_args__isset __isset;

  void __set_personId(const int32_t val);

  void __set_startDate(const std::string& val);

  void __set_endDate(const std::string& val);

  bool operator == (const IFaceLog_countPersonLogTimeStr_args & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    if (!(startDate == rhs.startDate))
      return false;
    if (!(endDate == rhs.endDate))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_countPersonLogTimeStr_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_countPersonLogTimeStr_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_countPersonLogTimeStr_pargs {
 public:


  virtual ~IFaceLog_countPersonLogTimeStr_pargs() throw();
  const int32_t* personId;
  const std::string* startDate;
  const std::string* endDate;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_countPersonLogTimeStr_result__isset {
  _IFaceLog_countPersonLogTimeStr_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_countPersonLogTimeStr_result__isset;

class IFaceLog_countPersonLogTimeStr_result {
 public:

  IFaceLog_countPersonLogTimeStr_result(const IFaceLog_countPersonLogTimeStr_result&);
  IFaceLog_countPersonLogTimeStr_result(IFaceLog_countPersonLogTimeStr_result&&);
  IFaceLog_countPersonLogTimeStr_result& operator=(const IFaceLog_countPersonLogTimeStr_result&);
  IFaceLog_countPersonLogTimeStr_result& operator=(IFaceLog_countPersonLogTimeStr_result&&);
  IFaceLog_countPersonLogTimeStr_result() {
  }

  virtual ~IFaceLog_countPersonLogTimeStr_result() throw();
  std::map<std::string, int32_t>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_countPersonLogTimeStr_result__isset __isset;

  void __set_success(const std::map<std::string, int32_t> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_countPersonLogTimeStr_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_countPersonLogTimeStr_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_countPersonLogTimeStr_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_countPersonLogTimeStr_presult__isset {
  _IFaceLog_countPersonLogTimeStr_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_countPersonLogTimeStr_presult__isset;

class IFaceLog_countPersonLogTimeStr_presult {
 public:


  virtual ~IFaceLog_countPersonLogTimeStr_presult() throw();
  std::map<std::string, int32_t> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_countPersonLogTimeStr_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_deleteAllFeaturesByPersonId_args__isset {
  _IFaceLog_deleteAllFeaturesByPersonId_args__isset() : token(false) {}
  bool token :1;
} _IFaceLog_deleteAllFeaturesByPersonId_args__isset;

class IFaceLog_deleteAllFeaturesByPersonId_args {
 public:

  IFaceLog_deleteAllFeaturesByPersonId_args(const IFaceLog_deleteAllFeaturesByPersonId_args&);
  IFaceLog_deleteAllFeaturesByPersonId_args(IFaceLog_deleteAllFeaturesByPersonId_args&&);
  IFaceLog_deleteAllFeaturesByPersonId_args& operator=(const IFaceLog_deleteAllFeaturesByPersonId_args&);
  IFaceLog_deleteAllFeaturesByPersonId_args& operator=(IFaceLog_deleteAllFeaturesByPersonId_args&&);
  IFaceLog_deleteAllFeaturesByPersonId_args() : personId(0), deleteImage(0) {
  }

  virtual ~IFaceLog_deleteAllFeaturesByPersonId_args() throw();
  int32_t personId;
  bool deleteImage;
  Token token;

  _IFaceLog_deleteAllFeaturesByPersonId_args__isset __isset;

  void __set_personId(const int32_t val);

  void __set_deleteImage(const bool val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_deleteAllFeaturesByPersonId_args & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    if (!(deleteImage == rhs.deleteImage))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_deleteAllFeaturesByPersonId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_deleteAllFeaturesByPersonId_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_deleteAllFeaturesByPersonId_pargs {
 public:


  virtual ~IFaceLog_deleteAllFeaturesByPersonId_pargs() throw();
  const int32_t* personId;
  const bool* deleteImage;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_deleteAllFeaturesByPersonId_result__isset {
  _IFaceLog_deleteAllFeaturesByPersonId_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_deleteAllFeaturesByPersonId_result__isset;

class IFaceLog_deleteAllFeaturesByPersonId_result {
 public:

  IFaceLog_deleteAllFeaturesByPersonId_result(const IFaceLog_deleteAllFeaturesByPersonId_result&);
  IFaceLog_deleteAllFeaturesByPersonId_result(IFaceLog_deleteAllFeaturesByPersonId_result&&);
  IFaceLog_deleteAllFeaturesByPersonId_result& operator=(const IFaceLog_deleteAllFeaturesByPersonId_result&);
  IFaceLog_deleteAllFeaturesByPersonId_result& operator=(IFaceLog_deleteAllFeaturesByPersonId_result&&);
  IFaceLog_deleteAllFeaturesByPersonId_result() : success(0) {
  }

  virtual ~IFaceLog_deleteAllFeaturesByPersonId_result() throw();
  int32_t success;
  ServiceRuntimeException ex1;

  _IFaceLog_deleteAllFeaturesByPersonId_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_deleteAllFeaturesByPersonId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_deleteAllFeaturesByPersonId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_deleteAllFeaturesByPersonId_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_deleteAllFeaturesByPersonId_presult__isset {
  _IFaceLog_deleteAllFeaturesByPersonId_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_deleteAllFeaturesByPersonId_presult__isset;

class IFaceLog_deleteAllFeaturesByPersonId_presult {
 public:


  virtual ~IFaceLog_deleteAllFeaturesByPersonId_presult() throw();
  int32_t* success;
  ServiceRuntimeException ex1;

  _IFaceLog_deleteAllFeaturesByPersonId_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_deleteDevice_args__isset {
  _IFaceLog_deleteDevice_args__isset() : token(false) {}
  bool token :1;
} _IFaceLog_deleteDevice_args__isset;

class IFaceLog_deleteDevice_args {
 public:

  IFaceLog_deleteDevice_args(const IFaceLog_deleteDevice_args&);
  IFaceLog_deleteDevice_args(IFaceLog_deleteDevice_args&&);
  IFaceLog_deleteDevice_args& operator=(const IFaceLog_deleteDevice_args&);
  IFaceLog_deleteDevice_args& operator=(IFaceLog_deleteDevice_args&&);
  IFaceLog_deleteDevice_args() : id(0) {
  }

  virtual ~IFaceLog_deleteDevice_args() throw();
  int32_t id;
  Token token;

  _IFaceLog_deleteDevice_args__isset __isset;

  void __set_id(const int32_t val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_deleteDevice_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_deleteDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_deleteDevice_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_deleteDevice_pargs {
 public:


  virtual ~IFaceLog_deleteDevice_pargs() throw();
  const int32_t* id;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_deleteDevice_result__isset {
  _IFaceLog_deleteDevice_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_deleteDevice_result__isset;

class IFaceLog_deleteDevice_result {
 public:

  IFaceLog_deleteDevice_result(const IFaceLog_deleteDevice_result&);
  IFaceLog_deleteDevice_result(IFaceLog_deleteDevice_result&&);
  IFaceLog_deleteDevice_result& operator=(const IFaceLog_deleteDevice_result&);
  IFaceLog_deleteDevice_result& operator=(IFaceLog_deleteDevice_result&&);
  IFaceLog_deleteDevice_result() : success(0) {
  }

  virtual ~IFaceLog_deleteDevice_result() throw();
  bool success;
  ServiceRuntimeException ex1;

  _IFaceLog_deleteDevice_result__isset __isset;

  void __set_success(const bool val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_deleteDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_deleteDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_deleteDevice_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_deleteDevice_presult__isset {
  _IFaceLog_deleteDevice_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_deleteDevice_presult__isset;

class IFaceLog_deleteDevice_presult {
 public:


  virtual ~IFaceLog_deleteDevice_presult() throw();
  bool* success;
  ServiceRuntimeException ex1;

  _IFaceLog_deleteDevice_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_deleteDeviceByMac_args__isset {
  _IFaceLog_deleteDeviceByMac_args__isset() : mac(false), token(false) {}
  bool mac :1;
  bool token :1;
} _IFaceLog_deleteDeviceByMac_args__isset;

class IFaceLog_deleteDeviceByMac_args {
 public:

  IFaceLog_deleteDeviceByMac_args(const IFaceLog_deleteDeviceByMac_args&);
  IFaceLog_deleteDeviceByMac_args(IFaceLog_deleteDeviceByMac_args&&);
  IFaceLog_deleteDeviceByMac_args& operator=(const IFaceLog_deleteDeviceByMac_args&);
  IFaceLog_deleteDeviceByMac_args& operator=(IFaceLog_deleteDeviceByMac_args&&);
  IFaceLog_deleteDeviceByMac_args() : mac() {
  }

  virtual ~IFaceLog_deleteDeviceByMac_args() throw();
  std::string mac;
  Token token;

  _IFaceLog_deleteDeviceByMac_args__isset __isset;

  void __set_mac(const std::string& val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_deleteDeviceByMac_args & rhs) const
  {
    if (!(mac == rhs.mac))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_deleteDeviceByMac_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_deleteDeviceByMac_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_deleteDeviceByMac_pargs {
 public:


  virtual ~IFaceLog_deleteDeviceByMac_pargs() throw();
  const std::string* mac;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_deleteDeviceByMac_result__isset {
  _IFaceLog_deleteDeviceByMac_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_deleteDeviceByMac_result__isset;

class IFaceLog_deleteDeviceByMac_result {
 public:

  IFaceLog_deleteDeviceByMac_result(const IFaceLog_deleteDeviceByMac_result&);
  IFaceLog_deleteDeviceByMac_result(IFaceLog_deleteDeviceByMac_result&&);
  IFaceLog_deleteDeviceByMac_result& operator=(const IFaceLog_deleteDeviceByMac_result&);
  IFaceLog_deleteDeviceByMac_result& operator=(IFaceLog_deleteDeviceByMac_result&&);
  IFaceLog_deleteDeviceByMac_result() : success(0) {
  }

  virtual ~IFaceLog_deleteDeviceByMac_result() throw();
  bool success;
  ServiceRuntimeException ex1;

  _IFaceLog_deleteDeviceByMac_result__isset __isset;

  void __set_success(const bool val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_deleteDeviceByMac_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_deleteDeviceByMac_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_deleteDeviceByMac_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_deleteDeviceByMac_presult__isset {
  _IFaceLog_deleteDeviceByMac_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_deleteDeviceByMac_presult__isset;

class IFaceLog_deleteDeviceByMac_presult {
 public:


  virtual ~IFaceLog_deleteDeviceByMac_presult() throw();
  bool* success;
  ServiceRuntimeException ex1;

  _IFaceLog_deleteDeviceByMac_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_deleteDeviceGroup_args__isset {
  _IFaceLog_deleteDeviceGroup_args__isset() : token(false) {}
  bool token :1;
} _IFaceLog_deleteDeviceGroup_args__isset;

class IFaceLog_deleteDeviceGroup_args {
 public:

  IFaceLog_deleteDeviceGroup_args(const IFaceLog_deleteDeviceGroup_args&);
  IFaceLog_deleteDeviceGroup_args(IFaceLog_deleteDeviceGroup_args&&);
  IFaceLog_deleteDeviceGroup_args& operator=(const IFaceLog_deleteDeviceGroup_args&);
  IFaceLog_deleteDeviceGroup_args& operator=(IFaceLog_deleteDeviceGroup_args&&);
  IFaceLog_deleteDeviceGroup_args() : deviceGroupId(0) {
  }

  virtual ~IFaceLog_deleteDeviceGroup_args() throw();
  int32_t deviceGroupId;
  Token token;

  _IFaceLog_deleteDeviceGroup_args__isset __isset;

  void __set_deviceGroupId(const int32_t val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_deleteDeviceGroup_args & rhs) const
  {
    if (!(deviceGroupId == rhs.deviceGroupId))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_deleteDeviceGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_deleteDeviceGroup_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_deleteDeviceGroup_pargs {
 public:


  virtual ~IFaceLog_deleteDeviceGroup_pargs() throw();
  const int32_t* deviceGroupId;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_deleteDeviceGroup_result__isset {
  _IFaceLog_deleteDeviceGroup_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_deleteDeviceGroup_result__isset;

class IFaceLog_deleteDeviceGroup_result {
 public:

  IFaceLog_deleteDeviceGroup_result(const IFaceLog_deleteDeviceGroup_result&);
  IFaceLog_deleteDeviceGroup_result(IFaceLog_deleteDeviceGroup_result&&);
  IFaceLog_deleteDeviceGroup_result& operator=(const IFaceLog_deleteDeviceGroup_result&);
  IFaceLog_deleteDeviceGroup_result& operator=(IFaceLog_deleteDeviceGroup_result&&);
  IFaceLog_deleteDeviceGroup_result() : success(0) {
  }

  virtual ~IFaceLog_deleteDeviceGroup_result() throw();
  int32_t success;
  ServiceRuntimeException ex1;

  _IFaceLog_deleteDeviceGroup_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_deleteDeviceGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_deleteDeviceGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_deleteDeviceGroup_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_deleteDeviceGroup_presult__isset {
  _IFaceLog_deleteDeviceGroup_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_deleteDeviceGroup_presult__isset;

class IFaceLog_deleteDeviceGroup_presult {
 public:


  virtual ~IFaceLog_deleteDeviceGroup_presult() throw();
  int32_t* success;
  ServiceRuntimeException ex1;

  _IFaceLog_deleteDeviceGroup_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_deleteFeature_args__isset {
  _IFaceLog_deleteFeature_args__isset() : featureMd5(false), token(false) {}
  bool featureMd5 :1;
  bool token :1;
} _IFaceLog_deleteFeature_args__isset;

class IFaceLog_deleteFeature_args {
 public:

  IFaceLog_deleteFeature_args(const IFaceLog_deleteFeature_args&);
  IFaceLog_deleteFeature_args(IFaceLog_deleteFeature_args&&);
  IFaceLog_deleteFeature_args& operator=(const IFaceLog_deleteFeature_args&);
  IFaceLog_deleteFeature_args& operator=(IFaceLog_deleteFeature_args&&);
  IFaceLog_deleteFeature_args() : featureMd5(), deleteImage(0) {
  }

  virtual ~IFaceLog_deleteFeature_args() throw();
  std::string featureMd5;
  bool deleteImage;
  Token token;

  _IFaceLog_deleteFeature_args__isset __isset;

  void __set_featureMd5(const std::string& val);

  void __set_deleteImage(const bool val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_deleteFeature_args & rhs) const
  {
    if (!(featureMd5 == rhs.featureMd5))
      return false;
    if (!(deleteImage == rhs.deleteImage))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_deleteFeature_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_deleteFeature_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_deleteFeature_pargs {
 public:


  virtual ~IFaceLog_deleteFeature_pargs() throw();
  const std::string* featureMd5;
  const bool* deleteImage;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_deleteFeature_result__isset {
  _IFaceLog_deleteFeature_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_deleteFeature_result__isset;

class IFaceLog_deleteFeature_result {
 public:

  IFaceLog_deleteFeature_result(const IFaceLog_deleteFeature_result&);
  IFaceLog_deleteFeature_result(IFaceLog_deleteFeature_result&&);
  IFaceLog_deleteFeature_result& operator=(const IFaceLog_deleteFeature_result&);
  IFaceLog_deleteFeature_result& operator=(IFaceLog_deleteFeature_result&&);
  IFaceLog_deleteFeature_result() {
  }

  virtual ~IFaceLog_deleteFeature_result() throw();
  std::vector<std::string>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_deleteFeature_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_deleteFeature_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_deleteFeature_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_deleteFeature_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_deleteFeature_presult__isset {
  _IFaceLog_deleteFeature_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_deleteFeature_presult__isset;

class IFaceLog_deleteFeature_presult {
 public:


  virtual ~IFaceLog_deleteFeature_presult() throw();
  std::vector<std::string> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_deleteFeature_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_deleteGroupPermitOnDeviceGroup_args__isset {
  _IFaceLog_deleteGroupPermitOnDeviceGroup_args__isset() : token(false) {}
  bool token :1;
} _IFaceLog_deleteGroupPermitOnDeviceGroup_args__isset;

class IFaceLog_deleteGroupPermitOnDeviceGroup_args {
 public:

  IFaceLog_deleteGroupPermitOnDeviceGroup_args(const IFaceLog_deleteGroupPermitOnDeviceGroup_args&);
  IFaceLog_deleteGroupPermitOnDeviceGroup_args(IFaceLog_deleteGroupPermitOnDeviceGroup_args&&);
  IFaceLog_deleteGroupPermitOnDeviceGroup_args& operator=(const IFaceLog_deleteGroupPermitOnDeviceGroup_args&);
  IFaceLog_deleteGroupPermitOnDeviceGroup_args& operator=(IFaceLog_deleteGroupPermitOnDeviceGroup_args&&);
  IFaceLog_deleteGroupPermitOnDeviceGroup_args() : deviceGroupId(0) {
  }

  virtual ~IFaceLog_deleteGroupPermitOnDeviceGroup_args() throw();
  int32_t deviceGroupId;
  Token token;

  _IFaceLog_deleteGroupPermitOnDeviceGroup_args__isset __isset;

  void __set_deviceGroupId(const int32_t val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_deleteGroupPermitOnDeviceGroup_args & rhs) const
  {
    if (!(deviceGroupId == rhs.deviceGroupId))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_deleteGroupPermitOnDeviceGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_deleteGroupPermitOnDeviceGroup_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_deleteGroupPermitOnDeviceGroup_pargs {
 public:


  virtual ~IFaceLog_deleteGroupPermitOnDeviceGroup_pargs() throw();
  const int32_t* deviceGroupId;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_deleteGroupPermitOnDeviceGroup_result__isset {
  _IFaceLog_deleteGroupPermitOnDeviceGroup_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_deleteGroupPermitOnDeviceGroup_result__isset;

class IFaceLog_deleteGroupPermitOnDeviceGroup_result {
 public:

  IFaceLog_deleteGroupPermitOnDeviceGroup_result(const IFaceLog_deleteGroupPermitOnDeviceGroup_result&);
  IFaceLog_deleteGroupPermitOnDeviceGroup_result(IFaceLog_deleteGroupPermitOnDeviceGroup_result&&);
  IFaceLog_deleteGroupPermitOnDeviceGroup_result& operator=(const IFaceLog_deleteGroupPermitOnDeviceGroup_result&);
  IFaceLog_deleteGroupPermitOnDeviceGroup_result& operator=(IFaceLog_deleteGroupPermitOnDeviceGroup_result&&);
  IFaceLog_deleteGroupPermitOnDeviceGroup_result() : success(0) {
  }

  virtual ~IFaceLog_deleteGroupPermitOnDeviceGroup_result() throw();
  int32_t success;
  ServiceRuntimeException ex1;

  _IFaceLog_deleteGroupPermitOnDeviceGroup_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_deleteGroupPermitOnDeviceGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_deleteGroupPermitOnDeviceGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_deleteGroupPermitOnDeviceGroup_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_deleteGroupPermitOnDeviceGroup_presult__isset {
  _IFaceLog_deleteGroupPermitOnDeviceGroup_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_deleteGroupPermitOnDeviceGroup_presult__isset;

class IFaceLog_deleteGroupPermitOnDeviceGroup_presult {
 public:


  virtual ~IFaceLog_deleteGroupPermitOnDeviceGroup_presult() throw();
  int32_t* success;
  ServiceRuntimeException ex1;

  _IFaceLog_deleteGroupPermitOnDeviceGroup_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_deleteImage_args__isset {
  _IFaceLog_deleteImage_args__isset() : imageMd5(false), token(false) {}
  bool imageMd5 :1;
  bool token :1;
} _IFaceLog_deleteImage_args__isset;

class IFaceLog_deleteImage_args {
 public:

  IFaceLog_deleteImage_args(const IFaceLog_deleteImage_args&);
  IFaceLog_deleteImage_args(IFaceLog_deleteImage_args&&);
  IFaceLog_deleteImage_args& operator=(const IFaceLog_deleteImage_args&);
  IFaceLog_deleteImage_args& operator=(IFaceLog_deleteImage_args&&);
  IFaceLog_deleteImage_args() : imageMd5() {
  }

  virtual ~IFaceLog_deleteImage_args() throw();
  std::string imageMd5;
  Token token;

  _IFaceLog_deleteImage_args__isset __isset;

  void __set_imageMd5(const std::string& val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_deleteImage_args & rhs) const
  {
    if (!(imageMd5 == rhs.imageMd5))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_deleteImage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_deleteImage_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_deleteImage_pargs {
 public:


  virtual ~IFaceLog_deleteImage_pargs() throw();
  const std::string* imageMd5;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_deleteImage_result__isset {
  _IFaceLog_deleteImage_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_deleteImage_result__isset;

class IFaceLog_deleteImage_result {
 public:

  IFaceLog_deleteImage_result(const IFaceLog_deleteImage_result&);
  IFaceLog_deleteImage_result(IFaceLog_deleteImage_result&&);
  IFaceLog_deleteImage_result& operator=(const IFaceLog_deleteImage_result&);
  IFaceLog_deleteImage_result& operator=(IFaceLog_deleteImage_result&&);
  IFaceLog_deleteImage_result() : success(0) {
  }

  virtual ~IFaceLog_deleteImage_result() throw();
  int32_t success;
  ServiceRuntimeException ex1;

  _IFaceLog_deleteImage_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_deleteImage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_deleteImage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_deleteImage_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_deleteImage_presult__isset {
  _IFaceLog_deleteImage_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_deleteImage_presult__isset;

class IFaceLog_deleteImage_presult {
 public:


  virtual ~IFaceLog_deleteImage_presult() throw();
  int32_t* success;
  ServiceRuntimeException ex1;

  _IFaceLog_deleteImage_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_deletePermitById_args__isset {
  _IFaceLog_deletePermitById_args__isset() : token(false) {}
  bool token :1;
} _IFaceLog_deletePermitById_args__isset;

class IFaceLog_deletePermitById_args {
 public:

  IFaceLog_deletePermitById_args(const IFaceLog_deletePermitById_args&);
  IFaceLog_deletePermitById_args(IFaceLog_deletePermitById_args&&);
  IFaceLog_deletePermitById_args& operator=(const IFaceLog_deletePermitById_args&);
  IFaceLog_deletePermitById_args& operator=(IFaceLog_deletePermitById_args&&);
  IFaceLog_deletePermitById_args() : deviceGroupId(0), personGroupId(0) {
  }

  virtual ~IFaceLog_deletePermitById_args() throw();
  int32_t deviceGroupId;
  int32_t personGroupId;
  Token token;

  _IFaceLog_deletePermitById_args__isset __isset;

  void __set_deviceGroupId(const int32_t val);

  void __set_personGroupId(const int32_t val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_deletePermitById_args & rhs) const
  {
    if (!(deviceGroupId == rhs.deviceGroupId))
      return false;
    if (!(personGroupId == rhs.personGroupId))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_deletePermitById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_deletePermitById_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_deletePermitById_pargs {
 public:


  virtual ~IFaceLog_deletePermitById_pargs() throw();
  const int32_t* deviceGroupId;
  const int32_t* personGroupId;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_deletePermitById_result__isset {
  _IFaceLog_deletePermitById_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_deletePermitById_result__isset;

class IFaceLog_deletePermitById_result {
 public:

  IFaceLog_deletePermitById_result(const IFaceLog_deletePermitById_result&);
  IFaceLog_deletePermitById_result(IFaceLog_deletePermitById_result&&);
  IFaceLog_deletePermitById_result& operator=(const IFaceLog_deletePermitById_result&);
  IFaceLog_deletePermitById_result& operator=(IFaceLog_deletePermitById_result&&);
  IFaceLog_deletePermitById_result() : success(0) {
  }

  virtual ~IFaceLog_deletePermitById_result() throw();
  int32_t success;
  ServiceRuntimeException ex1;

  _IFaceLog_deletePermitById_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_deletePermitById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_deletePermitById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_deletePermitById_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_deletePermitById_presult__isset {
  _IFaceLog_deletePermitById_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_deletePermitById_presult__isset;

class IFaceLog_deletePermitById_presult {
 public:


  virtual ~IFaceLog_deletePermitById_presult() throw();
  int32_t* success;
  ServiceRuntimeException ex1;

  _IFaceLog_deletePermitById_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_deletePerson_args__isset {
  _IFaceLog_deletePerson_args__isset() : token(false) {}
  bool token :1;
} _IFaceLog_deletePerson_args__isset;

class IFaceLog_deletePerson_args {
 public:

  IFaceLog_deletePerson_args(const IFaceLog_deletePerson_args&);
  IFaceLog_deletePerson_args(IFaceLog_deletePerson_args&&);
  IFaceLog_deletePerson_args& operator=(const IFaceLog_deletePerson_args&);
  IFaceLog_deletePerson_args& operator=(IFaceLog_deletePerson_args&&);
  IFaceLog_deletePerson_args() : personId(0) {
  }

  virtual ~IFaceLog_deletePerson_args() throw();
  int32_t personId;
  Token token;

  _IFaceLog_deletePerson_args__isset __isset;

  void __set_personId(const int32_t val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_deletePerson_args & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_deletePerson_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_deletePerson_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_deletePerson_pargs {
 public:


  virtual ~IFaceLog_deletePerson_pargs() throw();
  const int32_t* personId;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_deletePerson_result__isset {
  _IFaceLog_deletePerson_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_deletePerson_result__isset;

class IFaceLog_deletePerson_result {
 public:

  IFaceLog_deletePerson_result(const IFaceLog_deletePerson_result&);
  IFaceLog_deletePerson_result(IFaceLog_deletePerson_result&&);
  IFaceLog_deletePerson_result& operator=(const IFaceLog_deletePerson_result&);
  IFaceLog_deletePerson_result& operator=(IFaceLog_deletePerson_result&&);
  IFaceLog_deletePerson_result() : success(0) {
  }

  virtual ~IFaceLog_deletePerson_result() throw();
  int32_t success;
  ServiceRuntimeException ex1;

  _IFaceLog_deletePerson_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_deletePerson_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_deletePerson_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_deletePerson_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_deletePerson_presult__isset {
  _IFaceLog_deletePerson_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_deletePerson_presult__isset;

class IFaceLog_deletePerson_presult {
 public:


  virtual ~IFaceLog_deletePerson_presult() throw();
  int32_t* success;
  ServiceRuntimeException ex1;

  _IFaceLog_deletePerson_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_deletePersonByPapersNum_args__isset {
  _IFaceLog_deletePersonByPapersNum_args__isset() : papersNum(false), token(false) {}
  bool papersNum :1;
  bool token :1;
} _IFaceLog_deletePersonByPapersNum_args__isset;

class IFaceLog_deletePersonByPapersNum_args {
 public:

  IFaceLog_deletePersonByPapersNum_args(const IFaceLog_deletePersonByPapersNum_args&);
  IFaceLog_deletePersonByPapersNum_args(IFaceLog_deletePersonByPapersNum_args&&);
  IFaceLog_deletePersonByPapersNum_args& operator=(const IFaceLog_deletePersonByPapersNum_args&);
  IFaceLog_deletePersonByPapersNum_args& operator=(IFaceLog_deletePersonByPapersNum_args&&);
  IFaceLog_deletePersonByPapersNum_args() : papersNum() {
  }

  virtual ~IFaceLog_deletePersonByPapersNum_args() throw();
  std::string papersNum;
  Token token;

  _IFaceLog_deletePersonByPapersNum_args__isset __isset;

  void __set_papersNum(const std::string& val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_deletePersonByPapersNum_args & rhs) const
  {
    if (!(papersNum == rhs.papersNum))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_deletePersonByPapersNum_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_deletePersonByPapersNum_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_deletePersonByPapersNum_pargs {
 public:


  virtual ~IFaceLog_deletePersonByPapersNum_pargs() throw();
  const std::string* papersNum;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_deletePersonByPapersNum_result__isset {
  _IFaceLog_deletePersonByPapersNum_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_deletePersonByPapersNum_result__isset;

class IFaceLog_deletePersonByPapersNum_result {
 public:

  IFaceLog_deletePersonByPapersNum_result(const IFaceLog_deletePersonByPapersNum_result&);
  IFaceLog_deletePersonByPapersNum_result(IFaceLog_deletePersonByPapersNum_result&&);
  IFaceLog_deletePersonByPapersNum_result& operator=(const IFaceLog_deletePersonByPapersNum_result&);
  IFaceLog_deletePersonByPapersNum_result& operator=(IFaceLog_deletePersonByPapersNum_result&&);
  IFaceLog_deletePersonByPapersNum_result() : success(0) {
  }

  virtual ~IFaceLog_deletePersonByPapersNum_result() throw();
  int32_t success;
  ServiceRuntimeException ex1;

  _IFaceLog_deletePersonByPapersNum_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_deletePersonByPapersNum_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_deletePersonByPapersNum_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_deletePersonByPapersNum_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_deletePersonByPapersNum_presult__isset {
  _IFaceLog_deletePersonByPapersNum_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_deletePersonByPapersNum_presult__isset;

class IFaceLog_deletePersonByPapersNum_presult {
 public:


  virtual ~IFaceLog_deletePersonByPapersNum_presult() throw();
  int32_t* success;
  ServiceRuntimeException ex1;

  _IFaceLog_deletePersonByPapersNum_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_deletePersonGroup_args__isset {
  _IFaceLog_deletePersonGroup_args__isset() : token(false) {}
  bool token :1;
} _IFaceLog_deletePersonGroup_args__isset;

class IFaceLog_deletePersonGroup_args {
 public:

  IFaceLog_deletePersonGroup_args(const IFaceLog_deletePersonGroup_args&);
  IFaceLog_deletePersonGroup_args(IFaceLog_deletePersonGroup_args&&);
  IFaceLog_deletePersonGroup_args& operator=(const IFaceLog_deletePersonGroup_args&);
  IFaceLog_deletePersonGroup_args& operator=(IFaceLog_deletePersonGroup_args&&);
  IFaceLog_deletePersonGroup_args() : personGroupId(0) {
  }

  virtual ~IFaceLog_deletePersonGroup_args() throw();
  int32_t personGroupId;
  Token token;

  _IFaceLog_deletePersonGroup_args__isset __isset;

  void __set_personGroupId(const int32_t val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_deletePersonGroup_args & rhs) const
  {
    if (!(personGroupId == rhs.personGroupId))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_deletePersonGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_deletePersonGroup_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_deletePersonGroup_pargs {
 public:


  virtual ~IFaceLog_deletePersonGroup_pargs() throw();
  const int32_t* personGroupId;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_deletePersonGroup_result__isset {
  _IFaceLog_deletePersonGroup_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_deletePersonGroup_result__isset;

class IFaceLog_deletePersonGroup_result {
 public:

  IFaceLog_deletePersonGroup_result(const IFaceLog_deletePersonGroup_result&);
  IFaceLog_deletePersonGroup_result(IFaceLog_deletePersonGroup_result&&);
  IFaceLog_deletePersonGroup_result& operator=(const IFaceLog_deletePersonGroup_result&);
  IFaceLog_deletePersonGroup_result& operator=(IFaceLog_deletePersonGroup_result&&);
  IFaceLog_deletePersonGroup_result() : success(0) {
  }

  virtual ~IFaceLog_deletePersonGroup_result() throw();
  int32_t success;
  ServiceRuntimeException ex1;

  _IFaceLog_deletePersonGroup_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_deletePersonGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_deletePersonGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_deletePersonGroup_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_deletePersonGroup_presult__isset {
  _IFaceLog_deletePersonGroup_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_deletePersonGroup_presult__isset;

class IFaceLog_deletePersonGroup_presult {
 public:


  virtual ~IFaceLog_deletePersonGroup_presult() throw();
  int32_t* success;
  ServiceRuntimeException ex1;

  _IFaceLog_deletePersonGroup_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_deletePersonGroupPermit_args__isset {
  _IFaceLog_deletePersonGroupPermit_args__isset() : token(false) {}
  bool token :1;
} _IFaceLog_deletePersonGroupPermit_args__isset;

class IFaceLog_deletePersonGroupPermit_args {
 public:

  IFaceLog_deletePersonGroupPermit_args(const IFaceLog_deletePersonGroupPermit_args&);
  IFaceLog_deletePersonGroupPermit_args(IFaceLog_deletePersonGroupPermit_args&&);
  IFaceLog_deletePersonGroupPermit_args& operator=(const IFaceLog_deletePersonGroupPermit_args&);
  IFaceLog_deletePersonGroupPermit_args& operator=(IFaceLog_deletePersonGroupPermit_args&&);
  IFaceLog_deletePersonGroupPermit_args() : personGroupId(0) {
  }

  virtual ~IFaceLog_deletePersonGroupPermit_args() throw();
  int32_t personGroupId;
  Token token;

  _IFaceLog_deletePersonGroupPermit_args__isset __isset;

  void __set_personGroupId(const int32_t val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_deletePersonGroupPermit_args & rhs) const
  {
    if (!(personGroupId == rhs.personGroupId))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_deletePersonGroupPermit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_deletePersonGroupPermit_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_deletePersonGroupPermit_pargs {
 public:


  virtual ~IFaceLog_deletePersonGroupPermit_pargs() throw();
  const int32_t* personGroupId;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_deletePersonGroupPermit_result__isset {
  _IFaceLog_deletePersonGroupPermit_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_deletePersonGroupPermit_result__isset;

class IFaceLog_deletePersonGroupPermit_result {
 public:

  IFaceLog_deletePersonGroupPermit_result(const IFaceLog_deletePersonGroupPermit_result&);
  IFaceLog_deletePersonGroupPermit_result(IFaceLog_deletePersonGroupPermit_result&&);
  IFaceLog_deletePersonGroupPermit_result& operator=(const IFaceLog_deletePersonGroupPermit_result&);
  IFaceLog_deletePersonGroupPermit_result& operator=(IFaceLog_deletePersonGroupPermit_result&&);
  IFaceLog_deletePersonGroupPermit_result() : success(0) {
  }

  virtual ~IFaceLog_deletePersonGroupPermit_result() throw();
  int32_t success;
  ServiceRuntimeException ex1;

  _IFaceLog_deletePersonGroupPermit_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_deletePersonGroupPermit_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_deletePersonGroupPermit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_deletePersonGroupPermit_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_deletePersonGroupPermit_presult__isset {
  _IFaceLog_deletePersonGroupPermit_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_deletePersonGroupPermit_presult__isset;

class IFaceLog_deletePersonGroupPermit_presult {
 public:


  virtual ~IFaceLog_deletePersonGroupPermit_presult() throw();
  int32_t* success;
  ServiceRuntimeException ex1;

  _IFaceLog_deletePersonGroupPermit_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_deletePersons_args__isset {
  _IFaceLog_deletePersons_args__isset() : personIdList(false), token(false) {}
  bool personIdList :1;
  bool token :1;
} _IFaceLog_deletePersons_args__isset;

class IFaceLog_deletePersons_args {
 public:

  IFaceLog_deletePersons_args(const IFaceLog_deletePersons_args&);
  IFaceLog_deletePersons_args(IFaceLog_deletePersons_args&&);
  IFaceLog_deletePersons_args& operator=(const IFaceLog_deletePersons_args&);
  IFaceLog_deletePersons_args& operator=(IFaceLog_deletePersons_args&&);
  IFaceLog_deletePersons_args() {
  }

  virtual ~IFaceLog_deletePersons_args() throw();
  std::vector<int32_t>  personIdList;
  Token token;

  _IFaceLog_deletePersons_args__isset __isset;

  void __set_personIdList(const std::vector<int32_t> & val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_deletePersons_args & rhs) const
  {
    if (!(personIdList == rhs.personIdList))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_deletePersons_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_deletePersons_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_deletePersons_pargs {
 public:


  virtual ~IFaceLog_deletePersons_pargs() throw();
  const std::vector<int32_t> * personIdList;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_deletePersons_result__isset {
  _IFaceLog_deletePersons_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_deletePersons_result__isset;

class IFaceLog_deletePersons_result {
 public:

  IFaceLog_deletePersons_result(const IFaceLog_deletePersons_result&);
  IFaceLog_deletePersons_result(IFaceLog_deletePersons_result&&);
  IFaceLog_deletePersons_result& operator=(const IFaceLog_deletePersons_result&);
  IFaceLog_deletePersons_result& operator=(IFaceLog_deletePersons_result&&);
  IFaceLog_deletePersons_result() : success(0) {
  }

  virtual ~IFaceLog_deletePersons_result() throw();
  int32_t success;
  ServiceRuntimeException ex1;

  _IFaceLog_deletePersons_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_deletePersons_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_deletePersons_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_deletePersons_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_deletePersons_presult__isset {
  _IFaceLog_deletePersons_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_deletePersons_presult__isset;

class IFaceLog_deletePersons_presult {
 public:


  virtual ~IFaceLog_deletePersons_presult() throw();
  int32_t* success;
  ServiceRuntimeException ex1;

  _IFaceLog_deletePersons_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_deletePersonsByPapersNum_args__isset {
  _IFaceLog_deletePersonsByPapersNum_args__isset() : papersNumlist(false), token(false) {}
  bool papersNumlist :1;
  bool token :1;
} _IFaceLog_deletePersonsByPapersNum_args__isset;

class IFaceLog_deletePersonsByPapersNum_args {
 public:

  IFaceLog_deletePersonsByPapersNum_args(const IFaceLog_deletePersonsByPapersNum_args&);
  IFaceLog_deletePersonsByPapersNum_args(IFaceLog_deletePersonsByPapersNum_args&&);
  IFaceLog_deletePersonsByPapersNum_args& operator=(const IFaceLog_deletePersonsByPapersNum_args&);
  IFaceLog_deletePersonsByPapersNum_args& operator=(IFaceLog_deletePersonsByPapersNum_args&&);
  IFaceLog_deletePersonsByPapersNum_args() {
  }

  virtual ~IFaceLog_deletePersonsByPapersNum_args() throw();
  std::vector<std::string>  papersNumlist;
  Token token;

  _IFaceLog_deletePersonsByPapersNum_args__isset __isset;

  void __set_papersNumlist(const std::vector<std::string> & val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_deletePersonsByPapersNum_args & rhs) const
  {
    if (!(papersNumlist == rhs.papersNumlist))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_deletePersonsByPapersNum_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_deletePersonsByPapersNum_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_deletePersonsByPapersNum_pargs {
 public:


  virtual ~IFaceLog_deletePersonsByPapersNum_pargs() throw();
  const std::vector<std::string> * papersNumlist;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_deletePersonsByPapersNum_result__isset {
  _IFaceLog_deletePersonsByPapersNum_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_deletePersonsByPapersNum_result__isset;

class IFaceLog_deletePersonsByPapersNum_result {
 public:

  IFaceLog_deletePersonsByPapersNum_result(const IFaceLog_deletePersonsByPapersNum_result&);
  IFaceLog_deletePersonsByPapersNum_result(IFaceLog_deletePersonsByPapersNum_result&&);
  IFaceLog_deletePersonsByPapersNum_result& operator=(const IFaceLog_deletePersonsByPapersNum_result&);
  IFaceLog_deletePersonsByPapersNum_result& operator=(IFaceLog_deletePersonsByPapersNum_result&&);
  IFaceLog_deletePersonsByPapersNum_result() : success(0) {
  }

  virtual ~IFaceLog_deletePersonsByPapersNum_result() throw();
  int32_t success;
  ServiceRuntimeException ex1;

  _IFaceLog_deletePersonsByPapersNum_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_deletePersonsByPapersNum_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_deletePersonsByPapersNum_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_deletePersonsByPapersNum_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_deletePersonsByPapersNum_presult__isset {
  _IFaceLog_deletePersonsByPapersNum_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_deletePersonsByPapersNum_presult__isset;

class IFaceLog_deletePersonsByPapersNum_presult {
 public:


  virtual ~IFaceLog_deletePersonsByPapersNum_presult() throw();
  int32_t* success;
  ServiceRuntimeException ex1;

  _IFaceLog_deletePersonsByPapersNum_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_disablePerson_args__isset {
  _IFaceLog_disablePerson_args__isset() : moveToGroupId(false), token(false) {}
  bool moveToGroupId :1;
  bool token :1;
} _IFaceLog_disablePerson_args__isset;

class IFaceLog_disablePerson_args {
 public:

  IFaceLog_disablePerson_args(const IFaceLog_disablePerson_args&);
  IFaceLog_disablePerson_args(IFaceLog_disablePerson_args&&);
  IFaceLog_disablePerson_args& operator=(const IFaceLog_disablePerson_args&);
  IFaceLog_disablePerson_args& operator=(IFaceLog_disablePerson_args&&);
  IFaceLog_disablePerson_args() : personId(0), moveToGroupId(0), deletePhoto(0), deleteFeature(0), deleteLog(0) {
  }

  virtual ~IFaceLog_disablePerson_args() throw();
  int32_t personId;
  int32_t moveToGroupId;
  bool deletePhoto;
  bool deleteFeature;
  bool deleteLog;
  Token token;

  _IFaceLog_disablePerson_args__isset __isset;

  void __set_personId(const int32_t val);

  void __set_moveToGroupId(const int32_t val);

  void __set_deletePhoto(const bool val);

  void __set_deleteFeature(const bool val);

  void __set_deleteLog(const bool val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_disablePerson_args & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    if (!(moveToGroupId == rhs.moveToGroupId))
      return false;
    if (!(deletePhoto == rhs.deletePhoto))
      return false;
    if (!(deleteFeature == rhs.deleteFeature))
      return false;
    if (!(deleteLog == rhs.deleteLog))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_disablePerson_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_disablePerson_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_disablePerson_pargs {
 public:


  virtual ~IFaceLog_disablePerson_pargs() throw();
  const int32_t* personId;
  const int32_t* moveToGroupId;
  const bool* deletePhoto;
  const bool* deleteFeature;
  const bool* deleteLog;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_disablePerson_result__isset {
  _IFaceLog_disablePerson_result__isset() : ex1(false) {}
  bool ex1 :1;
} _IFaceLog_disablePerson_result__isset;

class IFaceLog_disablePerson_result {
 public:

  IFaceLog_disablePerson_result(const IFaceLog_disablePerson_result&);
  IFaceLog_disablePerson_result(IFaceLog_disablePerson_result&&);
  IFaceLog_disablePerson_result& operator=(const IFaceLog_disablePerson_result&);
  IFaceLog_disablePerson_result& operator=(IFaceLog_disablePerson_result&&);
  IFaceLog_disablePerson_result() {
  }

  virtual ~IFaceLog_disablePerson_result() throw();
  ServiceRuntimeException ex1;

  _IFaceLog_disablePerson_result__isset __isset;

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_disablePerson_result & rhs) const
  {
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_disablePerson_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_disablePerson_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_disablePerson_presult__isset {
  _IFaceLog_disablePerson_presult__isset() : ex1(false) {}
  bool ex1 :1;
} _IFaceLog_disablePerson_presult__isset;

class IFaceLog_disablePerson_presult {
 public:


  virtual ~IFaceLog_disablePerson_presult() throw();
  ServiceRuntimeException ex1;

  _IFaceLog_disablePerson_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_disablePersonList_args__isset {
  _IFaceLog_disablePersonList_args__isset() : personIdList(false), token(false) {}
  bool personIdList :1;
  bool token :1;
} _IFaceLog_disablePersonList_args__isset;

class IFaceLog_disablePersonList_args {
 public:

  IFaceLog_disablePersonList_args(const IFaceLog_disablePersonList_args&);
  IFaceLog_disablePersonList_args(IFaceLog_disablePersonList_args&&);
  IFaceLog_disablePersonList_args& operator=(const IFaceLog_disablePersonList_args&);
  IFaceLog_disablePersonList_args& operator=(IFaceLog_disablePersonList_args&&);
  IFaceLog_disablePersonList_args() {
  }

  virtual ~IFaceLog_disablePersonList_args() throw();
  std::vector<int32_t>  personIdList;
  Token token;

  _IFaceLog_disablePersonList_args__isset __isset;

  void __set_personIdList(const std::vector<int32_t> & val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_disablePersonList_args & rhs) const
  {
    if (!(personIdList == rhs.personIdList))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_disablePersonList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_disablePersonList_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_disablePersonList_pargs {
 public:


  virtual ~IFaceLog_disablePersonList_pargs() throw();
  const std::vector<int32_t> * personIdList;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_disablePersonList_result__isset {
  _IFaceLog_disablePersonList_result__isset() : ex1(false) {}
  bool ex1 :1;
} _IFaceLog_disablePersonList_result__isset;

class IFaceLog_disablePersonList_result {
 public:

  IFaceLog_disablePersonList_result(const IFaceLog_disablePersonList_result&);
  IFaceLog_disablePersonList_result(IFaceLog_disablePersonList_result&&);
  IFaceLog_disablePersonList_result& operator=(const IFaceLog_disablePersonList_result&);
  IFaceLog_disablePersonList_result& operator=(IFaceLog_disablePersonList_result&&);
  IFaceLog_disablePersonList_result() {
  }

  virtual ~IFaceLog_disablePersonList_result() throw();
  ServiceRuntimeException ex1;

  _IFaceLog_disablePersonList_result__isset __isset;

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_disablePersonList_result & rhs) const
  {
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_disablePersonList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_disablePersonList_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_disablePersonList_presult__isset {
  _IFaceLog_disablePersonList_presult__isset() : ex1(false) {}
  bool ex1 :1;
} _IFaceLog_disablePersonList_presult__isset;

class IFaceLog_disablePersonList_presult {
 public:


  virtual ~IFaceLog_disablePersonList_presult() throw();
  ServiceRuntimeException ex1;

  _IFaceLog_disablePersonList_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class IFaceLog_existsDevice_args {
 public:

  IFaceLog_existsDevice_args(const IFaceLog_existsDevice_args&);
  IFaceLog_existsDevice_args(IFaceLog_existsDevice_args&&);
  IFaceLog_existsDevice_args& operator=(const IFaceLog_existsDevice_args&);
  IFaceLog_existsDevice_args& operator=(IFaceLog_existsDevice_args&&);
  IFaceLog_existsDevice_args() : id(0) {
  }

  virtual ~IFaceLog_existsDevice_args() throw();
  int32_t id;

  void __set_id(const int32_t val);

  bool operator == (const IFaceLog_existsDevice_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_existsDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_existsDevice_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_existsDevice_pargs {
 public:


  virtual ~IFaceLog_existsDevice_pargs() throw();
  const int32_t* id;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_existsDevice_result__isset {
  _IFaceLog_existsDevice_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_existsDevice_result__isset;

class IFaceLog_existsDevice_result {
 public:

  IFaceLog_existsDevice_result(const IFaceLog_existsDevice_result&);
  IFaceLog_existsDevice_result(IFaceLog_existsDevice_result&&);
  IFaceLog_existsDevice_result& operator=(const IFaceLog_existsDevice_result&);
  IFaceLog_existsDevice_result& operator=(IFaceLog_existsDevice_result&&);
  IFaceLog_existsDevice_result() : success(0) {
  }

  virtual ~IFaceLog_existsDevice_result() throw();
  bool success;
  ServiceRuntimeException ex1;

  _IFaceLog_existsDevice_result__isset __isset;

  void __set_success(const bool val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_existsDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_existsDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_existsDevice_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_existsDevice_presult__isset {
  _IFaceLog_existsDevice_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_existsDevice_presult__isset;

class IFaceLog_existsDevice_presult {
 public:


  virtual ~IFaceLog_existsDevice_presult() throw();
  bool* success;
  ServiceRuntimeException ex1;

  _IFaceLog_existsDevice_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_existsFeature_args__isset {
  _IFaceLog_existsFeature_args__isset() : md5(false) {}
  bool md5 :1;
} _IFaceLog_existsFeature_args__isset;

class IFaceLog_existsFeature_args {
 public:

  IFaceLog_existsFeature_args(const IFaceLog_existsFeature_args&);
  IFaceLog_existsFeature_args(IFaceLog_existsFeature_args&&);
  IFaceLog_existsFeature_args& operator=(const IFaceLog_existsFeature_args&);
  IFaceLog_existsFeature_args& operator=(IFaceLog_existsFeature_args&&);
  IFaceLog_existsFeature_args() : md5() {
  }

  virtual ~IFaceLog_existsFeature_args() throw();
  std::string md5;

  _IFaceLog_existsFeature_args__isset __isset;

  void __set_md5(const std::string& val);

  bool operator == (const IFaceLog_existsFeature_args & rhs) const
  {
    if (!(md5 == rhs.md5))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_existsFeature_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_existsFeature_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_existsFeature_pargs {
 public:


  virtual ~IFaceLog_existsFeature_pargs() throw();
  const std::string* md5;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_existsFeature_result__isset {
  _IFaceLog_existsFeature_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_existsFeature_result__isset;

class IFaceLog_existsFeature_result {
 public:

  IFaceLog_existsFeature_result(const IFaceLog_existsFeature_result&);
  IFaceLog_existsFeature_result(IFaceLog_existsFeature_result&&);
  IFaceLog_existsFeature_result& operator=(const IFaceLog_existsFeature_result&);
  IFaceLog_existsFeature_result& operator=(IFaceLog_existsFeature_result&&);
  IFaceLog_existsFeature_result() : success(0) {
  }

  virtual ~IFaceLog_existsFeature_result() throw();
  bool success;
  ServiceRuntimeException ex1;

  _IFaceLog_existsFeature_result__isset __isset;

  void __set_success(const bool val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_existsFeature_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_existsFeature_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_existsFeature_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_existsFeature_presult__isset {
  _IFaceLog_existsFeature_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_existsFeature_presult__isset;

class IFaceLog_existsFeature_presult {
 public:


  virtual ~IFaceLog_existsFeature_presult() throw();
  bool* success;
  ServiceRuntimeException ex1;

  _IFaceLog_existsFeature_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_existsImage_args__isset {
  _IFaceLog_existsImage_args__isset() : md5(false) {}
  bool md5 :1;
} _IFaceLog_existsImage_args__isset;

class IFaceLog_existsImage_args {
 public:

  IFaceLog_existsImage_args(const IFaceLog_existsImage_args&);
  IFaceLog_existsImage_args(IFaceLog_existsImage_args&&);
  IFaceLog_existsImage_args& operator=(const IFaceLog_existsImage_args&);
  IFaceLog_existsImage_args& operator=(IFaceLog_existsImage_args&&);
  IFaceLog_existsImage_args() : md5() {
  }

  virtual ~IFaceLog_existsImage_args() throw();
  std::string md5;

  _IFaceLog_existsImage_args__isset __isset;

  void __set_md5(const std::string& val);

  bool operator == (const IFaceLog_existsImage_args & rhs) const
  {
    if (!(md5 == rhs.md5))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_existsImage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_existsImage_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_existsImage_pargs {
 public:


  virtual ~IFaceLog_existsImage_pargs() throw();
  const std::string* md5;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_existsImage_result__isset {
  _IFaceLog_existsImage_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_existsImage_result__isset;

class IFaceLog_existsImage_result {
 public:

  IFaceLog_existsImage_result(const IFaceLog_existsImage_result&);
  IFaceLog_existsImage_result(IFaceLog_existsImage_result&&);
  IFaceLog_existsImage_result& operator=(const IFaceLog_existsImage_result&);
  IFaceLog_existsImage_result& operator=(IFaceLog_existsImage_result&&);
  IFaceLog_existsImage_result() : success(0) {
  }

  virtual ~IFaceLog_existsImage_result() throw();
  bool success;
  ServiceRuntimeException ex1;

  _IFaceLog_existsImage_result__isset __isset;

  void __set_success(const bool val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_existsImage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_existsImage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_existsImage_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_existsImage_presult__isset {
  _IFaceLog_existsImage_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_existsImage_presult__isset;

class IFaceLog_existsImage_presult {
 public:


  virtual ~IFaceLog_existsImage_presult() throw();
  bool* success;
  ServiceRuntimeException ex1;

  _IFaceLog_existsImage_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class IFaceLog_existsPerson_args {
 public:

  IFaceLog_existsPerson_args(const IFaceLog_existsPerson_args&);
  IFaceLog_existsPerson_args(IFaceLog_existsPerson_args&&);
  IFaceLog_existsPerson_args& operator=(const IFaceLog_existsPerson_args&);
  IFaceLog_existsPerson_args& operator=(IFaceLog_existsPerson_args&&);
  IFaceLog_existsPerson_args() : persionId(0) {
  }

  virtual ~IFaceLog_existsPerson_args() throw();
  int32_t persionId;

  void __set_persionId(const int32_t val);

  bool operator == (const IFaceLog_existsPerson_args & rhs) const
  {
    if (!(persionId == rhs.persionId))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_existsPerson_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_existsPerson_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_existsPerson_pargs {
 public:


  virtual ~IFaceLog_existsPerson_pargs() throw();
  const int32_t* persionId;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_existsPerson_result__isset {
  _IFaceLog_existsPerson_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_existsPerson_result__isset;

class IFaceLog_existsPerson_result {
 public:

  IFaceLog_existsPerson_result(const IFaceLog_existsPerson_result&);
  IFaceLog_existsPerson_result(IFaceLog_existsPerson_result&&);
  IFaceLog_existsPerson_result& operator=(const IFaceLog_existsPerson_result&);
  IFaceLog_existsPerson_result& operator=(IFaceLog_existsPerson_result&&);
  IFaceLog_existsPerson_result() : success(0) {
  }

  virtual ~IFaceLog_existsPerson_result() throw();
  bool success;
  ServiceRuntimeException ex1;

  _IFaceLog_existsPerson_result__isset __isset;

  void __set_success(const bool val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_existsPerson_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_existsPerson_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_existsPerson_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_existsPerson_presult__isset {
  _IFaceLog_existsPerson_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_existsPerson_presult__isset;

class IFaceLog_existsPerson_presult {
 public:


  virtual ~IFaceLog_existsPerson_presult() throw();
  bool* success;
  ServiceRuntimeException ex1;

  _IFaceLog_existsPerson_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class IFaceLog_getDevice_args {
 public:

  IFaceLog_getDevice_args(const IFaceLog_getDevice_args&);
  IFaceLog_getDevice_args(IFaceLog_getDevice_args&&);
  IFaceLog_getDevice_args& operator=(const IFaceLog_getDevice_args&);
  IFaceLog_getDevice_args& operator=(IFaceLog_getDevice_args&&);
  IFaceLog_getDevice_args() : deviceId(0) {
  }

  virtual ~IFaceLog_getDevice_args() throw();
  int32_t deviceId;

  void __set_deviceId(const int32_t val);

  bool operator == (const IFaceLog_getDevice_args & rhs) const
  {
    if (!(deviceId == rhs.deviceId))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getDevice_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getDevice_pargs {
 public:


  virtual ~IFaceLog_getDevice_pargs() throw();
  const int32_t* deviceId;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getDevice_result__isset {
  _IFaceLog_getDevice_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getDevice_result__isset;

class IFaceLog_getDevice_result {
 public:

  IFaceLog_getDevice_result(const IFaceLog_getDevice_result&);
  IFaceLog_getDevice_result(IFaceLog_getDevice_result&&);
  IFaceLog_getDevice_result& operator=(const IFaceLog_getDevice_result&);
  IFaceLog_getDevice_result& operator=(IFaceLog_getDevice_result&&);
  IFaceLog_getDevice_result() {
  }

  virtual ~IFaceLog_getDevice_result() throw();
  DeviceBean success;
  ServiceRuntimeException ex1;

  _IFaceLog_getDevice_result__isset __isset;

  void __set_success(const DeviceBean& val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getDevice_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getDevice_presult__isset {
  _IFaceLog_getDevice_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getDevice_presult__isset;

class IFaceLog_getDevice_presult {
 public:


  virtual ~IFaceLog_getDevice_presult() throw();
  DeviceBean* success;
  ServiceRuntimeException ex1;

  _IFaceLog_getDevice_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_getDeviceByMac_args__isset {
  _IFaceLog_getDeviceByMac_args__isset() : mac(false) {}
  bool mac :1;
} _IFaceLog_getDeviceByMac_args__isset;

class IFaceLog_getDeviceByMac_args {
 public:

  IFaceLog_getDeviceByMac_args(const IFaceLog_getDeviceByMac_args&);
  IFaceLog_getDeviceByMac_args(IFaceLog_getDeviceByMac_args&&);
  IFaceLog_getDeviceByMac_args& operator=(const IFaceLog_getDeviceByMac_args&);
  IFaceLog_getDeviceByMac_args& operator=(IFaceLog_getDeviceByMac_args&&);
  IFaceLog_getDeviceByMac_args() : mac() {
  }

  virtual ~IFaceLog_getDeviceByMac_args() throw();
  std::string mac;

  _IFaceLog_getDeviceByMac_args__isset __isset;

  void __set_mac(const std::string& val);

  bool operator == (const IFaceLog_getDeviceByMac_args & rhs) const
  {
    if (!(mac == rhs.mac))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getDeviceByMac_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getDeviceByMac_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getDeviceByMac_pargs {
 public:


  virtual ~IFaceLog_getDeviceByMac_pargs() throw();
  const std::string* mac;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getDeviceByMac_result__isset {
  _IFaceLog_getDeviceByMac_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getDeviceByMac_result__isset;

class IFaceLog_getDeviceByMac_result {
 public:

  IFaceLog_getDeviceByMac_result(const IFaceLog_getDeviceByMac_result&);
  IFaceLog_getDeviceByMac_result(IFaceLog_getDeviceByMac_result&&);
  IFaceLog_getDeviceByMac_result& operator=(const IFaceLog_getDeviceByMac_result&);
  IFaceLog_getDeviceByMac_result& operator=(IFaceLog_getDeviceByMac_result&&);
  IFaceLog_getDeviceByMac_result() {
  }

  virtual ~IFaceLog_getDeviceByMac_result() throw();
  DeviceBean success;
  ServiceRuntimeException ex1;

  _IFaceLog_getDeviceByMac_result__isset __isset;

  void __set_success(const DeviceBean& val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getDeviceByMac_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getDeviceByMac_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getDeviceByMac_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getDeviceByMac_presult__isset {
  _IFaceLog_getDeviceByMac_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getDeviceByMac_presult__isset;

class IFaceLog_getDeviceByMac_presult {
 public:


  virtual ~IFaceLog_getDeviceByMac_presult() throw();
  DeviceBean* success;
  ServiceRuntimeException ex1;

  _IFaceLog_getDeviceByMac_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class IFaceLog_getDeviceGroup_args {
 public:

  IFaceLog_getDeviceGroup_args(const IFaceLog_getDeviceGroup_args&);
  IFaceLog_getDeviceGroup_args(IFaceLog_getDeviceGroup_args&&);
  IFaceLog_getDeviceGroup_args& operator=(const IFaceLog_getDeviceGroup_args&);
  IFaceLog_getDeviceGroup_args& operator=(IFaceLog_getDeviceGroup_args&&);
  IFaceLog_getDeviceGroup_args() : deviceGroupId(0) {
  }

  virtual ~IFaceLog_getDeviceGroup_args() throw();
  int32_t deviceGroupId;

  void __set_deviceGroupId(const int32_t val);

  bool operator == (const IFaceLog_getDeviceGroup_args & rhs) const
  {
    if (!(deviceGroupId == rhs.deviceGroupId))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getDeviceGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getDeviceGroup_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getDeviceGroup_pargs {
 public:


  virtual ~IFaceLog_getDeviceGroup_pargs() throw();
  const int32_t* deviceGroupId;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getDeviceGroup_result__isset {
  _IFaceLog_getDeviceGroup_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getDeviceGroup_result__isset;

class IFaceLog_getDeviceGroup_result {
 public:

  IFaceLog_getDeviceGroup_result(const IFaceLog_getDeviceGroup_result&);
  IFaceLog_getDeviceGroup_result(IFaceLog_getDeviceGroup_result&&);
  IFaceLog_getDeviceGroup_result& operator=(const IFaceLog_getDeviceGroup_result&);
  IFaceLog_getDeviceGroup_result& operator=(IFaceLog_getDeviceGroup_result&&);
  IFaceLog_getDeviceGroup_result() {
  }

  virtual ~IFaceLog_getDeviceGroup_result() throw();
  DeviceGroupBean success;
  ServiceRuntimeException ex1;

  _IFaceLog_getDeviceGroup_result__isset __isset;

  void __set_success(const DeviceGroupBean& val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getDeviceGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getDeviceGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getDeviceGroup_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getDeviceGroup_presult__isset {
  _IFaceLog_getDeviceGroup_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getDeviceGroup_presult__isset;

class IFaceLog_getDeviceGroup_presult {
 public:


  virtual ~IFaceLog_getDeviceGroup_presult() throw();
  DeviceGroupBean* success;
  ServiceRuntimeException ex1;

  _IFaceLog_getDeviceGroup_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_getDeviceGroups_args__isset {
  _IFaceLog_getDeviceGroups_args__isset() : groupIdList(false) {}
  bool groupIdList :1;
} _IFaceLog_getDeviceGroups_args__isset;

class IFaceLog_getDeviceGroups_args {
 public:

  IFaceLog_getDeviceGroups_args(const IFaceLog_getDeviceGroups_args&);
  IFaceLog_getDeviceGroups_args(IFaceLog_getDeviceGroups_args&&);
  IFaceLog_getDeviceGroups_args& operator=(const IFaceLog_getDeviceGroups_args&);
  IFaceLog_getDeviceGroups_args& operator=(IFaceLog_getDeviceGroups_args&&);
  IFaceLog_getDeviceGroups_args() {
  }

  virtual ~IFaceLog_getDeviceGroups_args() throw();
  std::vector<int32_t>  groupIdList;

  _IFaceLog_getDeviceGroups_args__isset __isset;

  void __set_groupIdList(const std::vector<int32_t> & val);

  bool operator == (const IFaceLog_getDeviceGroups_args & rhs) const
  {
    if (!(groupIdList == rhs.groupIdList))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getDeviceGroups_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getDeviceGroups_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getDeviceGroups_pargs {
 public:


  virtual ~IFaceLog_getDeviceGroups_pargs() throw();
  const std::vector<int32_t> * groupIdList;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getDeviceGroups_result__isset {
  _IFaceLog_getDeviceGroups_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getDeviceGroups_result__isset;

class IFaceLog_getDeviceGroups_result {
 public:

  IFaceLog_getDeviceGroups_result(const IFaceLog_getDeviceGroups_result&);
  IFaceLog_getDeviceGroups_result(IFaceLog_getDeviceGroups_result&&);
  IFaceLog_getDeviceGroups_result& operator=(const IFaceLog_getDeviceGroups_result&);
  IFaceLog_getDeviceGroups_result& operator=(IFaceLog_getDeviceGroups_result&&);
  IFaceLog_getDeviceGroups_result() {
  }

  virtual ~IFaceLog_getDeviceGroups_result() throw();
  std::vector<DeviceGroupBean>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_getDeviceGroups_result__isset __isset;

  void __set_success(const std::vector<DeviceGroupBean> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getDeviceGroups_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getDeviceGroups_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getDeviceGroups_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getDeviceGroups_presult__isset {
  _IFaceLog_getDeviceGroups_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getDeviceGroups_presult__isset;

class IFaceLog_getDeviceGroups_presult {
 public:


  virtual ~IFaceLog_getDeviceGroups_presult() throw();
  std::vector<DeviceGroupBean> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_getDeviceGroups_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class IFaceLog_getDeviceGroupsBelongs_args {
 public:

  IFaceLog_getDeviceGroupsBelongs_args(const IFaceLog_getDeviceGroupsBelongs_args&);
  IFaceLog_getDeviceGroupsBelongs_args(IFaceLog_getDeviceGroupsBelongs_args&&);
  IFaceLog_getDeviceGroupsBelongs_args& operator=(const IFaceLog_getDeviceGroupsBelongs_args&);
  IFaceLog_getDeviceGroupsBelongs_args& operator=(IFaceLog_getDeviceGroupsBelongs_args&&);
  IFaceLog_getDeviceGroupsBelongs_args() : deviceId(0) {
  }

  virtual ~IFaceLog_getDeviceGroupsBelongs_args() throw();
  int32_t deviceId;

  void __set_deviceId(const int32_t val);

  bool operator == (const IFaceLog_getDeviceGroupsBelongs_args & rhs) const
  {
    if (!(deviceId == rhs.deviceId))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getDeviceGroupsBelongs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getDeviceGroupsBelongs_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getDeviceGroupsBelongs_pargs {
 public:


  virtual ~IFaceLog_getDeviceGroupsBelongs_pargs() throw();
  const int32_t* deviceId;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getDeviceGroupsBelongs_result__isset {
  _IFaceLog_getDeviceGroupsBelongs_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getDeviceGroupsBelongs_result__isset;

class IFaceLog_getDeviceGroupsBelongs_result {
 public:

  IFaceLog_getDeviceGroupsBelongs_result(const IFaceLog_getDeviceGroupsBelongs_result&);
  IFaceLog_getDeviceGroupsBelongs_result(IFaceLog_getDeviceGroupsBelongs_result&&);
  IFaceLog_getDeviceGroupsBelongs_result& operator=(const IFaceLog_getDeviceGroupsBelongs_result&);
  IFaceLog_getDeviceGroupsBelongs_result& operator=(IFaceLog_getDeviceGroupsBelongs_result&&);
  IFaceLog_getDeviceGroupsBelongs_result() {
  }

  virtual ~IFaceLog_getDeviceGroupsBelongs_result() throw();
  std::vector<int32_t>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_getDeviceGroupsBelongs_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getDeviceGroupsBelongs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getDeviceGroupsBelongs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getDeviceGroupsBelongs_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getDeviceGroupsBelongs_presult__isset {
  _IFaceLog_getDeviceGroupsBelongs_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getDeviceGroupsBelongs_presult__isset;

class IFaceLog_getDeviceGroupsBelongs_presult {
 public:


  virtual ~IFaceLog_getDeviceGroupsBelongs_presult() throw();
  std::vector<int32_t> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_getDeviceGroupsBelongs_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class IFaceLog_getDeviceGroupsPermit_args {
 public:

  IFaceLog_getDeviceGroupsPermit_args(const IFaceLog_getDeviceGroupsPermit_args&);
  IFaceLog_getDeviceGroupsPermit_args(IFaceLog_getDeviceGroupsPermit_args&&);
  IFaceLog_getDeviceGroupsPermit_args& operator=(const IFaceLog_getDeviceGroupsPermit_args&);
  IFaceLog_getDeviceGroupsPermit_args& operator=(IFaceLog_getDeviceGroupsPermit_args&&);
  IFaceLog_getDeviceGroupsPermit_args() : personGroupId(0) {
  }

  virtual ~IFaceLog_getDeviceGroupsPermit_args() throw();
  int32_t personGroupId;

  void __set_personGroupId(const int32_t val);

  bool operator == (const IFaceLog_getDeviceGroupsPermit_args & rhs) const
  {
    if (!(personGroupId == rhs.personGroupId))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getDeviceGroupsPermit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getDeviceGroupsPermit_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getDeviceGroupsPermit_pargs {
 public:


  virtual ~IFaceLog_getDeviceGroupsPermit_pargs() throw();
  const int32_t* personGroupId;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getDeviceGroupsPermit_result__isset {
  _IFaceLog_getDeviceGroupsPermit_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getDeviceGroupsPermit_result__isset;

class IFaceLog_getDeviceGroupsPermit_result {
 public:

  IFaceLog_getDeviceGroupsPermit_result(const IFaceLog_getDeviceGroupsPermit_result&);
  IFaceLog_getDeviceGroupsPermit_result(IFaceLog_getDeviceGroupsPermit_result&&);
  IFaceLog_getDeviceGroupsPermit_result& operator=(const IFaceLog_getDeviceGroupsPermit_result&);
  IFaceLog_getDeviceGroupsPermit_result& operator=(IFaceLog_getDeviceGroupsPermit_result&&);
  IFaceLog_getDeviceGroupsPermit_result() {
  }

  virtual ~IFaceLog_getDeviceGroupsPermit_result() throw();
  std::vector<int32_t>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_getDeviceGroupsPermit_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getDeviceGroupsPermit_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getDeviceGroupsPermit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getDeviceGroupsPermit_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getDeviceGroupsPermit_presult__isset {
  _IFaceLog_getDeviceGroupsPermit_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getDeviceGroupsPermit_presult__isset;

class IFaceLog_getDeviceGroupsPermit_presult {
 public:


  virtual ~IFaceLog_getDeviceGroupsPermit_presult() throw();
  std::vector<int32_t> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_getDeviceGroupsPermit_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class IFaceLog_getDeviceGroupsPermittedBy_args {
 public:

  IFaceLog_getDeviceGroupsPermittedBy_args(const IFaceLog_getDeviceGroupsPermittedBy_args&);
  IFaceLog_getDeviceGroupsPermittedBy_args(IFaceLog_getDeviceGroupsPermittedBy_args&&);
  IFaceLog_getDeviceGroupsPermittedBy_args& operator=(const IFaceLog_getDeviceGroupsPermittedBy_args&);
  IFaceLog_getDeviceGroupsPermittedBy_args& operator=(IFaceLog_getDeviceGroupsPermittedBy_args&&);
  IFaceLog_getDeviceGroupsPermittedBy_args() : personGroupId(0) {
  }

  virtual ~IFaceLog_getDeviceGroupsPermittedBy_args() throw();
  int32_t personGroupId;

  void __set_personGroupId(const int32_t val);

  bool operator == (const IFaceLog_getDeviceGroupsPermittedBy_args & rhs) const
  {
    if (!(personGroupId == rhs.personGroupId))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getDeviceGroupsPermittedBy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getDeviceGroupsPermittedBy_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getDeviceGroupsPermittedBy_pargs {
 public:


  virtual ~IFaceLog_getDeviceGroupsPermittedBy_pargs() throw();
  const int32_t* personGroupId;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getDeviceGroupsPermittedBy_result__isset {
  _IFaceLog_getDeviceGroupsPermittedBy_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getDeviceGroupsPermittedBy_result__isset;

class IFaceLog_getDeviceGroupsPermittedBy_result {
 public:

  IFaceLog_getDeviceGroupsPermittedBy_result(const IFaceLog_getDeviceGroupsPermittedBy_result&);
  IFaceLog_getDeviceGroupsPermittedBy_result(IFaceLog_getDeviceGroupsPermittedBy_result&&);
  IFaceLog_getDeviceGroupsPermittedBy_result& operator=(const IFaceLog_getDeviceGroupsPermittedBy_result&);
  IFaceLog_getDeviceGroupsPermittedBy_result& operator=(IFaceLog_getDeviceGroupsPermittedBy_result&&);
  IFaceLog_getDeviceGroupsPermittedBy_result() {
  }

  virtual ~IFaceLog_getDeviceGroupsPermittedBy_result() throw();
  std::vector<int32_t>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_getDeviceGroupsPermittedBy_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getDeviceGroupsPermittedBy_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getDeviceGroupsPermittedBy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getDeviceGroupsPermittedBy_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getDeviceGroupsPermittedBy_presult__isset {
  _IFaceLog_getDeviceGroupsPermittedBy_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getDeviceGroupsPermittedBy_presult__isset;

class IFaceLog_getDeviceGroupsPermittedBy_presult {
 public:


  virtual ~IFaceLog_getDeviceGroupsPermittedBy_presult() throw();
  std::vector<int32_t> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_getDeviceGroupsPermittedBy_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_getDeviceIdOfFeature_args__isset {
  _IFaceLog_getDeviceIdOfFeature_args__isset() : featureMd5(false) {}
  bool featureMd5 :1;
} _IFaceLog_getDeviceIdOfFeature_args__isset;

class IFaceLog_getDeviceIdOfFeature_args {
 public:

  IFaceLog_getDeviceIdOfFeature_args(const IFaceLog_getDeviceIdOfFeature_args&);
  IFaceLog_getDeviceIdOfFeature_args(IFaceLog_getDeviceIdOfFeature_args&&);
  IFaceLog_getDeviceIdOfFeature_args& operator=(const IFaceLog_getDeviceIdOfFeature_args&);
  IFaceLog_getDeviceIdOfFeature_args& operator=(IFaceLog_getDeviceIdOfFeature_args&&);
  IFaceLog_getDeviceIdOfFeature_args() : featureMd5() {
  }

  virtual ~IFaceLog_getDeviceIdOfFeature_args() throw();
  std::string featureMd5;

  _IFaceLog_getDeviceIdOfFeature_args__isset __isset;

  void __set_featureMd5(const std::string& val);

  bool operator == (const IFaceLog_getDeviceIdOfFeature_args & rhs) const
  {
    if (!(featureMd5 == rhs.featureMd5))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getDeviceIdOfFeature_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getDeviceIdOfFeature_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getDeviceIdOfFeature_pargs {
 public:


  virtual ~IFaceLog_getDeviceIdOfFeature_pargs() throw();
  const std::string* featureMd5;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getDeviceIdOfFeature_result__isset {
  _IFaceLog_getDeviceIdOfFeature_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getDeviceIdOfFeature_result__isset;

class IFaceLog_getDeviceIdOfFeature_result {
 public:

  IFaceLog_getDeviceIdOfFeature_result(const IFaceLog_getDeviceIdOfFeature_result&);
  IFaceLog_getDeviceIdOfFeature_result(IFaceLog_getDeviceIdOfFeature_result&&);
  IFaceLog_getDeviceIdOfFeature_result& operator=(const IFaceLog_getDeviceIdOfFeature_result&);
  IFaceLog_getDeviceIdOfFeature_result& operator=(IFaceLog_getDeviceIdOfFeature_result&&);
  IFaceLog_getDeviceIdOfFeature_result() : success(0) {
  }

  virtual ~IFaceLog_getDeviceIdOfFeature_result() throw();
  int32_t success;
  ServiceRuntimeException ex1;

  _IFaceLog_getDeviceIdOfFeature_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getDeviceIdOfFeature_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getDeviceIdOfFeature_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getDeviceIdOfFeature_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getDeviceIdOfFeature_presult__isset {
  _IFaceLog_getDeviceIdOfFeature_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getDeviceIdOfFeature_presult__isset;

class IFaceLog_getDeviceIdOfFeature_presult {
 public:


  virtual ~IFaceLog_getDeviceIdOfFeature_presult() throw();
  int32_t* success;
  ServiceRuntimeException ex1;

  _IFaceLog_getDeviceIdOfFeature_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_getDevices_args__isset {
  _IFaceLog_getDevices_args__isset() : idList(false) {}
  bool idList :1;
} _IFaceLog_getDevices_args__isset;

class IFaceLog_getDevices_args {
 public:

  IFaceLog_getDevices_args(const IFaceLog_getDevices_args&);
  IFaceLog_getDevices_args(IFaceLog_getDevices_args&&);
  IFaceLog_getDevices_args& operator=(const IFaceLog_getDevices_args&);
  IFaceLog_getDevices_args& operator=(IFaceLog_getDevices_args&&);
  IFaceLog_getDevices_args() {
  }

  virtual ~IFaceLog_getDevices_args() throw();
  std::vector<int32_t>  idList;

  _IFaceLog_getDevices_args__isset __isset;

  void __set_idList(const std::vector<int32_t> & val);

  bool operator == (const IFaceLog_getDevices_args & rhs) const
  {
    if (!(idList == rhs.idList))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getDevices_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getDevices_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getDevices_pargs {
 public:


  virtual ~IFaceLog_getDevices_pargs() throw();
  const std::vector<int32_t> * idList;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getDevices_result__isset {
  _IFaceLog_getDevices_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getDevices_result__isset;

class IFaceLog_getDevices_result {
 public:

  IFaceLog_getDevices_result(const IFaceLog_getDevices_result&);
  IFaceLog_getDevices_result(IFaceLog_getDevices_result&&);
  IFaceLog_getDevices_result& operator=(const IFaceLog_getDevices_result&);
  IFaceLog_getDevices_result& operator=(IFaceLog_getDevices_result&&);
  IFaceLog_getDevices_result() {
  }

  virtual ~IFaceLog_getDevices_result() throw();
  std::vector<DeviceBean>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_getDevices_result__isset __isset;

  void __set_success(const std::vector<DeviceBean> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getDevices_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getDevices_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getDevices_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getDevices_presult__isset {
  _IFaceLog_getDevices_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getDevices_presult__isset;

class IFaceLog_getDevices_presult {
 public:


  virtual ~IFaceLog_getDevices_presult() throw();
  std::vector<DeviceBean> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_getDevices_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class IFaceLog_getDevicesOfGroup_args {
 public:

  IFaceLog_getDevicesOfGroup_args(const IFaceLog_getDevicesOfGroup_args&);
  IFaceLog_getDevicesOfGroup_args(IFaceLog_getDevicesOfGroup_args&&);
  IFaceLog_getDevicesOfGroup_args& operator=(const IFaceLog_getDevicesOfGroup_args&);
  IFaceLog_getDevicesOfGroup_args& operator=(IFaceLog_getDevicesOfGroup_args&&);
  IFaceLog_getDevicesOfGroup_args() : deviceGroupId(0) {
  }

  virtual ~IFaceLog_getDevicesOfGroup_args() throw();
  int32_t deviceGroupId;

  void __set_deviceGroupId(const int32_t val);

  bool operator == (const IFaceLog_getDevicesOfGroup_args & rhs) const
  {
    if (!(deviceGroupId == rhs.deviceGroupId))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getDevicesOfGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getDevicesOfGroup_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getDevicesOfGroup_pargs {
 public:


  virtual ~IFaceLog_getDevicesOfGroup_pargs() throw();
  const int32_t* deviceGroupId;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getDevicesOfGroup_result__isset {
  _IFaceLog_getDevicesOfGroup_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getDevicesOfGroup_result__isset;

class IFaceLog_getDevicesOfGroup_result {
 public:

  IFaceLog_getDevicesOfGroup_result(const IFaceLog_getDevicesOfGroup_result&);
  IFaceLog_getDevicesOfGroup_result(IFaceLog_getDevicesOfGroup_result&&);
  IFaceLog_getDevicesOfGroup_result& operator=(const IFaceLog_getDevicesOfGroup_result&);
  IFaceLog_getDevicesOfGroup_result& operator=(IFaceLog_getDevicesOfGroup_result&&);
  IFaceLog_getDevicesOfGroup_result() {
  }

  virtual ~IFaceLog_getDevicesOfGroup_result() throw();
  std::vector<int32_t>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_getDevicesOfGroup_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getDevicesOfGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getDevicesOfGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getDevicesOfGroup_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getDevicesOfGroup_presult__isset {
  _IFaceLog_getDevicesOfGroup_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getDevicesOfGroup_presult__isset;

class IFaceLog_getDevicesOfGroup_presult {
 public:


  virtual ~IFaceLog_getDevicesOfGroup_presult() throw();
  std::vector<int32_t> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_getDevicesOfGroup_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class IFaceLog_getFace_args {
 public:

  IFaceLog_getFace_args(const IFaceLog_getFace_args&);
  IFaceLog_getFace_args(IFaceLog_getFace_args&&);
  IFaceLog_getFace_args& operator=(const IFaceLog_getFace_args&);
  IFaceLog_getFace_args& operator=(IFaceLog_getFace_args&&);
  IFaceLog_getFace_args() : faceId(0) {
  }

  virtual ~IFaceLog_getFace_args() throw();
  int32_t faceId;

  void __set_faceId(const int32_t val);

  bool operator == (const IFaceLog_getFace_args & rhs) const
  {
    if (!(faceId == rhs.faceId))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getFace_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getFace_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getFace_pargs {
 public:


  virtual ~IFaceLog_getFace_pargs() throw();
  const int32_t* faceId;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getFace_result__isset {
  _IFaceLog_getFace_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getFace_result__isset;

class IFaceLog_getFace_result {
 public:

  IFaceLog_getFace_result(const IFaceLog_getFace_result&);
  IFaceLog_getFace_result(IFaceLog_getFace_result&&);
  IFaceLog_getFace_result& operator=(const IFaceLog_getFace_result&);
  IFaceLog_getFace_result& operator=(IFaceLog_getFace_result&&);
  IFaceLog_getFace_result() {
  }

  virtual ~IFaceLog_getFace_result() throw();
  FaceBean success;
  ServiceRuntimeException ex1;

  _IFaceLog_getFace_result__isset __isset;

  void __set_success(const FaceBean& val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getFace_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getFace_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getFace_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getFace_presult__isset {
  _IFaceLog_getFace_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getFace_presult__isset;

class IFaceLog_getFace_presult {
 public:


  virtual ~IFaceLog_getFace_presult() throw();
  FaceBean* success;
  ServiceRuntimeException ex1;

  _IFaceLog_getFace_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_getFacesOfFeature_args__isset {
  _IFaceLog_getFacesOfFeature_args__isset() : featureMd5(false) {}
  bool featureMd5 :1;
} _IFaceLog_getFacesOfFeature_args__isset;

class IFaceLog_getFacesOfFeature_args {
 public:

  IFaceLog_getFacesOfFeature_args(const IFaceLog_getFacesOfFeature_args&);
  IFaceLog_getFacesOfFeature_args(IFaceLog_getFacesOfFeature_args&&);
  IFaceLog_getFacesOfFeature_args& operator=(const IFaceLog_getFacesOfFeature_args&);
  IFaceLog_getFacesOfFeature_args& operator=(IFaceLog_getFacesOfFeature_args&&);
  IFaceLog_getFacesOfFeature_args() : featureMd5() {
  }

  virtual ~IFaceLog_getFacesOfFeature_args() throw();
  std::string featureMd5;

  _IFaceLog_getFacesOfFeature_args__isset __isset;

  void __set_featureMd5(const std::string& val);

  bool operator == (const IFaceLog_getFacesOfFeature_args & rhs) const
  {
    if (!(featureMd5 == rhs.featureMd5))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getFacesOfFeature_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getFacesOfFeature_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getFacesOfFeature_pargs {
 public:


  virtual ~IFaceLog_getFacesOfFeature_pargs() throw();
  const std::string* featureMd5;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getFacesOfFeature_result__isset {
  _IFaceLog_getFacesOfFeature_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getFacesOfFeature_result__isset;

class IFaceLog_getFacesOfFeature_result {
 public:

  IFaceLog_getFacesOfFeature_result(const IFaceLog_getFacesOfFeature_result&);
  IFaceLog_getFacesOfFeature_result(IFaceLog_getFacesOfFeature_result&&);
  IFaceLog_getFacesOfFeature_result& operator=(const IFaceLog_getFacesOfFeature_result&);
  IFaceLog_getFacesOfFeature_result& operator=(IFaceLog_getFacesOfFeature_result&&);
  IFaceLog_getFacesOfFeature_result() {
  }

  virtual ~IFaceLog_getFacesOfFeature_result() throw();
  std::vector<FaceBean>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_getFacesOfFeature_result__isset __isset;

  void __set_success(const std::vector<FaceBean> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getFacesOfFeature_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getFacesOfFeature_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getFacesOfFeature_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getFacesOfFeature_presult__isset {
  _IFaceLog_getFacesOfFeature_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getFacesOfFeature_presult__isset;

class IFaceLog_getFacesOfFeature_presult {
 public:


  virtual ~IFaceLog_getFacesOfFeature_presult() throw();
  std::vector<FaceBean> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_getFacesOfFeature_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_getFacesOfImage_args__isset {
  _IFaceLog_getFacesOfImage_args__isset() : imageMd5(false) {}
  bool imageMd5 :1;
} _IFaceLog_getFacesOfImage_args__isset;

class IFaceLog_getFacesOfImage_args {
 public:

  IFaceLog_getFacesOfImage_args(const IFaceLog_getFacesOfImage_args&);
  IFaceLog_getFacesOfImage_args(IFaceLog_getFacesOfImage_args&&);
  IFaceLog_getFacesOfImage_args& operator=(const IFaceLog_getFacesOfImage_args&);
  IFaceLog_getFacesOfImage_args& operator=(IFaceLog_getFacesOfImage_args&&);
  IFaceLog_getFacesOfImage_args() : imageMd5() {
  }

  virtual ~IFaceLog_getFacesOfImage_args() throw();
  std::string imageMd5;

  _IFaceLog_getFacesOfImage_args__isset __isset;

  void __set_imageMd5(const std::string& val);

  bool operator == (const IFaceLog_getFacesOfImage_args & rhs) const
  {
    if (!(imageMd5 == rhs.imageMd5))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getFacesOfImage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getFacesOfImage_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getFacesOfImage_pargs {
 public:


  virtual ~IFaceLog_getFacesOfImage_pargs() throw();
  const std::string* imageMd5;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getFacesOfImage_result__isset {
  _IFaceLog_getFacesOfImage_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getFacesOfImage_result__isset;

class IFaceLog_getFacesOfImage_result {
 public:

  IFaceLog_getFacesOfImage_result(const IFaceLog_getFacesOfImage_result&);
  IFaceLog_getFacesOfImage_result(IFaceLog_getFacesOfImage_result&&);
  IFaceLog_getFacesOfImage_result& operator=(const IFaceLog_getFacesOfImage_result&);
  IFaceLog_getFacesOfImage_result& operator=(IFaceLog_getFacesOfImage_result&&);
  IFaceLog_getFacesOfImage_result() {
  }

  virtual ~IFaceLog_getFacesOfImage_result() throw();
  std::vector<FaceBean>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_getFacesOfImage_result__isset __isset;

  void __set_success(const std::vector<FaceBean> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getFacesOfImage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getFacesOfImage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getFacesOfImage_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getFacesOfImage_presult__isset {
  _IFaceLog_getFacesOfImage_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getFacesOfImage_presult__isset;

class IFaceLog_getFacesOfImage_presult {
 public:


  virtual ~IFaceLog_getFacesOfImage_presult() throw();
  std::vector<FaceBean> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_getFacesOfImage_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_getFeature_args__isset {
  _IFaceLog_getFeature_args__isset() : md5(false) {}
  bool md5 :1;
} _IFaceLog_getFeature_args__isset;

class IFaceLog_getFeature_args {
 public:

  IFaceLog_getFeature_args(const IFaceLog_getFeature_args&);
  IFaceLog_getFeature_args(IFaceLog_getFeature_args&&);
  IFaceLog_getFeature_args& operator=(const IFaceLog_getFeature_args&);
  IFaceLog_getFeature_args& operator=(IFaceLog_getFeature_args&&);
  IFaceLog_getFeature_args() : md5() {
  }

  virtual ~IFaceLog_getFeature_args() throw();
  std::string md5;

  _IFaceLog_getFeature_args__isset __isset;

  void __set_md5(const std::string& val);

  bool operator == (const IFaceLog_getFeature_args & rhs) const
  {
    if (!(md5 == rhs.md5))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getFeature_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getFeature_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getFeature_pargs {
 public:


  virtual ~IFaceLog_getFeature_pargs() throw();
  const std::string* md5;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getFeature_result__isset {
  _IFaceLog_getFeature_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getFeature_result__isset;

class IFaceLog_getFeature_result {
 public:

  IFaceLog_getFeature_result(const IFaceLog_getFeature_result&);
  IFaceLog_getFeature_result(IFaceLog_getFeature_result&&);
  IFaceLog_getFeature_result& operator=(const IFaceLog_getFeature_result&);
  IFaceLog_getFeature_result& operator=(IFaceLog_getFeature_result&&);
  IFaceLog_getFeature_result() {
  }

  virtual ~IFaceLog_getFeature_result() throw();
  FeatureBean success;
  ServiceRuntimeException ex1;

  _IFaceLog_getFeature_result__isset __isset;

  void __set_success(const FeatureBean& val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getFeature_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getFeature_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getFeature_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getFeature_presult__isset {
  _IFaceLog_getFeature_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getFeature_presult__isset;

class IFaceLog_getFeature_presult {
 public:


  virtual ~IFaceLog_getFeature_presult() throw();
  FeatureBean* success;
  ServiceRuntimeException ex1;

  _IFaceLog_getFeature_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_getFeatureBytes_args__isset {
  _IFaceLog_getFeatureBytes_args__isset() : md5(false) {}
  bool md5 :1;
} _IFaceLog_getFeatureBytes_args__isset;

class IFaceLog_getFeatureBytes_args {
 public:

  IFaceLog_getFeatureBytes_args(const IFaceLog_getFeatureBytes_args&);
  IFaceLog_getFeatureBytes_args(IFaceLog_getFeatureBytes_args&&);
  IFaceLog_getFeatureBytes_args& operator=(const IFaceLog_getFeatureBytes_args&);
  IFaceLog_getFeatureBytes_args& operator=(IFaceLog_getFeatureBytes_args&&);
  IFaceLog_getFeatureBytes_args() : md5() {
  }

  virtual ~IFaceLog_getFeatureBytes_args() throw();
  std::string md5;

  _IFaceLog_getFeatureBytes_args__isset __isset;

  void __set_md5(const std::string& val);

  bool operator == (const IFaceLog_getFeatureBytes_args & rhs) const
  {
    if (!(md5 == rhs.md5))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getFeatureBytes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getFeatureBytes_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getFeatureBytes_pargs {
 public:


  virtual ~IFaceLog_getFeatureBytes_pargs() throw();
  const std::string* md5;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getFeatureBytes_result__isset {
  _IFaceLog_getFeatureBytes_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getFeatureBytes_result__isset;

class IFaceLog_getFeatureBytes_result {
 public:

  IFaceLog_getFeatureBytes_result(const IFaceLog_getFeatureBytes_result&);
  IFaceLog_getFeatureBytes_result(IFaceLog_getFeatureBytes_result&&);
  IFaceLog_getFeatureBytes_result& operator=(const IFaceLog_getFeatureBytes_result&);
  IFaceLog_getFeatureBytes_result& operator=(IFaceLog_getFeatureBytes_result&&);
  IFaceLog_getFeatureBytes_result() : success() {
  }

  virtual ~IFaceLog_getFeatureBytes_result() throw();
  std::string success;
  ServiceRuntimeException ex1;

  _IFaceLog_getFeatureBytes_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getFeatureBytes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getFeatureBytes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getFeatureBytes_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getFeatureBytes_presult__isset {
  _IFaceLog_getFeatureBytes_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getFeatureBytes_presult__isset;

class IFaceLog_getFeatureBytes_presult {
 public:


  virtual ~IFaceLog_getFeatureBytes_presult() throw();
  std::string* success;
  ServiceRuntimeException ex1;

  _IFaceLog_getFeatureBytes_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_getFeatures_args__isset {
  _IFaceLog_getFeatures_args__isset() : md5List(false) {}
  bool md5List :1;
} _IFaceLog_getFeatures_args__isset;

class IFaceLog_getFeatures_args {
 public:

  IFaceLog_getFeatures_args(const IFaceLog_getFeatures_args&);
  IFaceLog_getFeatures_args(IFaceLog_getFeatures_args&&);
  IFaceLog_getFeatures_args& operator=(const IFaceLog_getFeatures_args&);
  IFaceLog_getFeatures_args& operator=(IFaceLog_getFeatures_args&&);
  IFaceLog_getFeatures_args() {
  }

  virtual ~IFaceLog_getFeatures_args() throw();
  std::vector<std::string>  md5List;

  _IFaceLog_getFeatures_args__isset __isset;

  void __set_md5List(const std::vector<std::string> & val);

  bool operator == (const IFaceLog_getFeatures_args & rhs) const
  {
    if (!(md5List == rhs.md5List))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getFeatures_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getFeatures_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getFeatures_pargs {
 public:


  virtual ~IFaceLog_getFeatures_pargs() throw();
  const std::vector<std::string> * md5List;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getFeatures_result__isset {
  _IFaceLog_getFeatures_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getFeatures_result__isset;

class IFaceLog_getFeatures_result {
 public:

  IFaceLog_getFeatures_result(const IFaceLog_getFeatures_result&);
  IFaceLog_getFeatures_result(IFaceLog_getFeatures_result&&);
  IFaceLog_getFeatures_result& operator=(const IFaceLog_getFeatures_result&);
  IFaceLog_getFeatures_result& operator=(IFaceLog_getFeatures_result&&);
  IFaceLog_getFeatures_result() {
  }

  virtual ~IFaceLog_getFeatures_result() throw();
  std::vector<FeatureBean>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_getFeatures_result__isset __isset;

  void __set_success(const std::vector<FeatureBean> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getFeatures_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getFeatures_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getFeatures_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getFeatures_presult__isset {
  _IFaceLog_getFeatures_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getFeatures_presult__isset;

class IFaceLog_getFeatures_presult {
 public:


  virtual ~IFaceLog_getFeatures_presult() throw();
  std::vector<FeatureBean> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_getFeatures_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_getFeaturesByPersonIdAndSdkVersion_args__isset {
  _IFaceLog_getFeaturesByPersonIdAndSdkVersion_args__isset() : sdkVersion(false) {}
  bool sdkVersion :1;
} _IFaceLog_getFeaturesByPersonIdAndSdkVersion_args__isset;

class IFaceLog_getFeaturesByPersonIdAndSdkVersion_args {
 public:

  IFaceLog_getFeaturesByPersonIdAndSdkVersion_args(const IFaceLog_getFeaturesByPersonIdAndSdkVersion_args&);
  IFaceLog_getFeaturesByPersonIdAndSdkVersion_args(IFaceLog_getFeaturesByPersonIdAndSdkVersion_args&&);
  IFaceLog_getFeaturesByPersonIdAndSdkVersion_args& operator=(const IFaceLog_getFeaturesByPersonIdAndSdkVersion_args&);
  IFaceLog_getFeaturesByPersonIdAndSdkVersion_args& operator=(IFaceLog_getFeaturesByPersonIdAndSdkVersion_args&&);
  IFaceLog_getFeaturesByPersonIdAndSdkVersion_args() : personId(0), sdkVersion() {
  }

  virtual ~IFaceLog_getFeaturesByPersonIdAndSdkVersion_args() throw();
  int32_t personId;
  std::string sdkVersion;

  _IFaceLog_getFeaturesByPersonIdAndSdkVersion_args__isset __isset;

  void __set_personId(const int32_t val);

  void __set_sdkVersion(const std::string& val);

  bool operator == (const IFaceLog_getFeaturesByPersonIdAndSdkVersion_args & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    if (!(sdkVersion == rhs.sdkVersion))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getFeaturesByPersonIdAndSdkVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getFeaturesByPersonIdAndSdkVersion_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getFeaturesByPersonIdAndSdkVersion_pargs {
 public:


  virtual ~IFaceLog_getFeaturesByPersonIdAndSdkVersion_pargs() throw();
  const int32_t* personId;
  const std::string* sdkVersion;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getFeaturesByPersonIdAndSdkVersion_result__isset {
  _IFaceLog_getFeaturesByPersonIdAndSdkVersion_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getFeaturesByPersonIdAndSdkVersion_result__isset;

class IFaceLog_getFeaturesByPersonIdAndSdkVersion_result {
 public:

  IFaceLog_getFeaturesByPersonIdAndSdkVersion_result(const IFaceLog_getFeaturesByPersonIdAndSdkVersion_result&);
  IFaceLog_getFeaturesByPersonIdAndSdkVersion_result(IFaceLog_getFeaturesByPersonIdAndSdkVersion_result&&);
  IFaceLog_getFeaturesByPersonIdAndSdkVersion_result& operator=(const IFaceLog_getFeaturesByPersonIdAndSdkVersion_result&);
  IFaceLog_getFeaturesByPersonIdAndSdkVersion_result& operator=(IFaceLog_getFeaturesByPersonIdAndSdkVersion_result&&);
  IFaceLog_getFeaturesByPersonIdAndSdkVersion_result() {
  }

  virtual ~IFaceLog_getFeaturesByPersonIdAndSdkVersion_result() throw();
  std::vector<std::string>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_getFeaturesByPersonIdAndSdkVersion_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getFeaturesByPersonIdAndSdkVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getFeaturesByPersonIdAndSdkVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getFeaturesByPersonIdAndSdkVersion_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getFeaturesByPersonIdAndSdkVersion_presult__isset {
  _IFaceLog_getFeaturesByPersonIdAndSdkVersion_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getFeaturesByPersonIdAndSdkVersion_presult__isset;

class IFaceLog_getFeaturesByPersonIdAndSdkVersion_presult {
 public:


  virtual ~IFaceLog_getFeaturesByPersonIdAndSdkVersion_presult() throw();
  std::vector<std::string> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_getFeaturesByPersonIdAndSdkVersion_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_getFeaturesOfImage_args__isset {
  _IFaceLog_getFeaturesOfImage_args__isset() : imageMd5(false) {}
  bool imageMd5 :1;
} _IFaceLog_getFeaturesOfImage_args__isset;

class IFaceLog_getFeaturesOfImage_args {
 public:

  IFaceLog_getFeaturesOfImage_args(const IFaceLog_getFeaturesOfImage_args&);
  IFaceLog_getFeaturesOfImage_args(IFaceLog_getFeaturesOfImage_args&&);
  IFaceLog_getFeaturesOfImage_args& operator=(const IFaceLog_getFeaturesOfImage_args&);
  IFaceLog_getFeaturesOfImage_args& operator=(IFaceLog_getFeaturesOfImage_args&&);
  IFaceLog_getFeaturesOfImage_args() : imageMd5() {
  }

  virtual ~IFaceLog_getFeaturesOfImage_args() throw();
  std::string imageMd5;

  _IFaceLog_getFeaturesOfImage_args__isset __isset;

  void __set_imageMd5(const std::string& val);

  bool operator == (const IFaceLog_getFeaturesOfImage_args & rhs) const
  {
    if (!(imageMd5 == rhs.imageMd5))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getFeaturesOfImage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getFeaturesOfImage_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getFeaturesOfImage_pargs {
 public:


  virtual ~IFaceLog_getFeaturesOfImage_pargs() throw();
  const std::string* imageMd5;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getFeaturesOfImage_result__isset {
  _IFaceLog_getFeaturesOfImage_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getFeaturesOfImage_result__isset;

class IFaceLog_getFeaturesOfImage_result {
 public:

  IFaceLog_getFeaturesOfImage_result(const IFaceLog_getFeaturesOfImage_result&);
  IFaceLog_getFeaturesOfImage_result(IFaceLog_getFeaturesOfImage_result&&);
  IFaceLog_getFeaturesOfImage_result& operator=(const IFaceLog_getFeaturesOfImage_result&);
  IFaceLog_getFeaturesOfImage_result& operator=(IFaceLog_getFeaturesOfImage_result&&);
  IFaceLog_getFeaturesOfImage_result() {
  }

  virtual ~IFaceLog_getFeaturesOfImage_result() throw();
  std::vector<std::string>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_getFeaturesOfImage_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getFeaturesOfImage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getFeaturesOfImage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getFeaturesOfImage_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getFeaturesOfImage_presult__isset {
  _IFaceLog_getFeaturesOfImage_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getFeaturesOfImage_presult__isset;

class IFaceLog_getFeaturesOfImage_presult {
 public:


  virtual ~IFaceLog_getFeaturesOfImage_presult() throw();
  std::vector<std::string> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_getFeaturesOfImage_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class IFaceLog_getFeaturesOfPerson_args {
 public:

  IFaceLog_getFeaturesOfPerson_args(const IFaceLog_getFeaturesOfPerson_args&);
  IFaceLog_getFeaturesOfPerson_args(IFaceLog_getFeaturesOfPerson_args&&);
  IFaceLog_getFeaturesOfPerson_args& operator=(const IFaceLog_getFeaturesOfPerson_args&);
  IFaceLog_getFeaturesOfPerson_args& operator=(IFaceLog_getFeaturesOfPerson_args&&);
  IFaceLog_getFeaturesOfPerson_args() : personId(0) {
  }

  virtual ~IFaceLog_getFeaturesOfPerson_args() throw();
  int32_t personId;

  void __set_personId(const int32_t val);

  bool operator == (const IFaceLog_getFeaturesOfPerson_args & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getFeaturesOfPerson_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getFeaturesOfPerson_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getFeaturesOfPerson_pargs {
 public:


  virtual ~IFaceLog_getFeaturesOfPerson_pargs() throw();
  const int32_t* personId;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getFeaturesOfPerson_result__isset {
  _IFaceLog_getFeaturesOfPerson_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getFeaturesOfPerson_result__isset;

class IFaceLog_getFeaturesOfPerson_result {
 public:

  IFaceLog_getFeaturesOfPerson_result(const IFaceLog_getFeaturesOfPerson_result&);
  IFaceLog_getFeaturesOfPerson_result(IFaceLog_getFeaturesOfPerson_result&&);
  IFaceLog_getFeaturesOfPerson_result& operator=(const IFaceLog_getFeaturesOfPerson_result&);
  IFaceLog_getFeaturesOfPerson_result& operator=(IFaceLog_getFeaturesOfPerson_result&&);
  IFaceLog_getFeaturesOfPerson_result() {
  }

  virtual ~IFaceLog_getFeaturesOfPerson_result() throw();
  std::vector<std::string>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_getFeaturesOfPerson_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getFeaturesOfPerson_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getFeaturesOfPerson_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getFeaturesOfPerson_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getFeaturesOfPerson_presult__isset {
  _IFaceLog_getFeaturesOfPerson_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getFeaturesOfPerson_presult__isset;

class IFaceLog_getFeaturesOfPerson_presult {
 public:


  virtual ~IFaceLog_getFeaturesOfPerson_presult() throw();
  std::vector<std::string> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_getFeaturesOfPerson_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_getFeaturesPermittedOnDevice_args__isset {
  _IFaceLog_getFeaturesPermittedOnDevice_args__isset() : sdkVersion(false), excludeFeatureIds(false), timestamp(false) {}
  bool sdkVersion :1;
  bool excludeFeatureIds :1;
  bool timestamp :1;
} _IFaceLog_getFeaturesPermittedOnDevice_args__isset;

class IFaceLog_getFeaturesPermittedOnDevice_args {
 public:

  IFaceLog_getFeaturesPermittedOnDevice_args(const IFaceLog_getFeaturesPermittedOnDevice_args&);
  IFaceLog_getFeaturesPermittedOnDevice_args(IFaceLog_getFeaturesPermittedOnDevice_args&&);
  IFaceLog_getFeaturesPermittedOnDevice_args& operator=(const IFaceLog_getFeaturesPermittedOnDevice_args&);
  IFaceLog_getFeaturesPermittedOnDevice_args& operator=(IFaceLog_getFeaturesPermittedOnDevice_args&&);
  IFaceLog_getFeaturesPermittedOnDevice_args() : deviceId(0), ignoreSchedule(0), sdkVersion(), timestamp(0) {
  }

  virtual ~IFaceLog_getFeaturesPermittedOnDevice_args() throw();
  int32_t deviceId;
  bool ignoreSchedule;
  std::string sdkVersion;
  std::vector<std::string>  excludeFeatureIds;
  int64_t timestamp;

  _IFaceLog_getFeaturesPermittedOnDevice_args__isset __isset;

  void __set_deviceId(const int32_t val);

  void __set_ignoreSchedule(const bool val);

  void __set_sdkVersion(const std::string& val);

  void __set_excludeFeatureIds(const std::vector<std::string> & val);

  void __set_timestamp(const int64_t val);

  bool operator == (const IFaceLog_getFeaturesPermittedOnDevice_args & rhs) const
  {
    if (!(deviceId == rhs.deviceId))
      return false;
    if (!(ignoreSchedule == rhs.ignoreSchedule))
      return false;
    if (!(sdkVersion == rhs.sdkVersion))
      return false;
    if (!(excludeFeatureIds == rhs.excludeFeatureIds))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getFeaturesPermittedOnDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getFeaturesPermittedOnDevice_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getFeaturesPermittedOnDevice_pargs {
 public:


  virtual ~IFaceLog_getFeaturesPermittedOnDevice_pargs() throw();
  const int32_t* deviceId;
  const bool* ignoreSchedule;
  const std::string* sdkVersion;
  const std::vector<std::string> * excludeFeatureIds;
  const int64_t* timestamp;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getFeaturesPermittedOnDevice_result__isset {
  _IFaceLog_getFeaturesPermittedOnDevice_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getFeaturesPermittedOnDevice_result__isset;

class IFaceLog_getFeaturesPermittedOnDevice_result {
 public:

  IFaceLog_getFeaturesPermittedOnDevice_result(const IFaceLog_getFeaturesPermittedOnDevice_result&);
  IFaceLog_getFeaturesPermittedOnDevice_result(IFaceLog_getFeaturesPermittedOnDevice_result&&);
  IFaceLog_getFeaturesPermittedOnDevice_result& operator=(const IFaceLog_getFeaturesPermittedOnDevice_result&);
  IFaceLog_getFeaturesPermittedOnDevice_result& operator=(IFaceLog_getFeaturesPermittedOnDevice_result&&);
  IFaceLog_getFeaturesPermittedOnDevice_result() {
  }

  virtual ~IFaceLog_getFeaturesPermittedOnDevice_result() throw();
  std::vector<std::string>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_getFeaturesPermittedOnDevice_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getFeaturesPermittedOnDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getFeaturesPermittedOnDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getFeaturesPermittedOnDevice_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getFeaturesPermittedOnDevice_presult__isset {
  _IFaceLog_getFeaturesPermittedOnDevice_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getFeaturesPermittedOnDevice_presult__isset;

class IFaceLog_getFeaturesPermittedOnDevice_presult {
 public:


  virtual ~IFaceLog_getFeaturesPermittedOnDevice_presult() throw();
  std::vector<std::string> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_getFeaturesPermittedOnDevice_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class IFaceLog_getGroupPermit_args {
 public:

  IFaceLog_getGroupPermit_args(const IFaceLog_getGroupPermit_args&);
  IFaceLog_getGroupPermit_args(IFaceLog_getGroupPermit_args&&);
  IFaceLog_getGroupPermit_args& operator=(const IFaceLog_getGroupPermit_args&);
  IFaceLog_getGroupPermit_args& operator=(IFaceLog_getGroupPermit_args&&);
  IFaceLog_getGroupPermit_args() : deviceId(0), personGroupId(0) {
  }

  virtual ~IFaceLog_getGroupPermit_args() throw();
  int32_t deviceId;
  int32_t personGroupId;

  void __set_deviceId(const int32_t val);

  void __set_personGroupId(const int32_t val);

  bool operator == (const IFaceLog_getGroupPermit_args & rhs) const
  {
    if (!(deviceId == rhs.deviceId))
      return false;
    if (!(personGroupId == rhs.personGroupId))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getGroupPermit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getGroupPermit_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getGroupPermit_pargs {
 public:


  virtual ~IFaceLog_getGroupPermit_pargs() throw();
  const int32_t* deviceId;
  const int32_t* personGroupId;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getGroupPermit_result__isset {
  _IFaceLog_getGroupPermit_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getGroupPermit_result__isset;

class IFaceLog_getGroupPermit_result {
 public:

  IFaceLog_getGroupPermit_result(const IFaceLog_getGroupPermit_result&);
  IFaceLog_getGroupPermit_result(IFaceLog_getGroupPermit_result&&);
  IFaceLog_getGroupPermit_result& operator=(const IFaceLog_getGroupPermit_result&);
  IFaceLog_getGroupPermit_result& operator=(IFaceLog_getGroupPermit_result&&);
  IFaceLog_getGroupPermit_result() {
  }

  virtual ~IFaceLog_getGroupPermit_result() throw();
  PermitBean success;
  ServiceRuntimeException ex1;

  _IFaceLog_getGroupPermit_result__isset __isset;

  void __set_success(const PermitBean& val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getGroupPermit_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getGroupPermit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getGroupPermit_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getGroupPermit_presult__isset {
  _IFaceLog_getGroupPermit_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getGroupPermit_presult__isset;

class IFaceLog_getGroupPermit_presult {
 public:


  virtual ~IFaceLog_getGroupPermit_presult() throw();
  PermitBean* success;
  ServiceRuntimeException ex1;

  _IFaceLog_getGroupPermit_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class IFaceLog_getGroupPermitOnDeviceGroup_args {
 public:

  IFaceLog_getGroupPermitOnDeviceGroup_args(const IFaceLog_getGroupPermitOnDeviceGroup_args&);
  IFaceLog_getGroupPermitOnDeviceGroup_args(IFaceLog_getGroupPermitOnDeviceGroup_args&&);
  IFaceLog_getGroupPermitOnDeviceGroup_args& operator=(const IFaceLog_getGroupPermitOnDeviceGroup_args&);
  IFaceLog_getGroupPermitOnDeviceGroup_args& operator=(IFaceLog_getGroupPermitOnDeviceGroup_args&&);
  IFaceLog_getGroupPermitOnDeviceGroup_args() : deviceGroupId(0), personGroupId(0) {
  }

  virtual ~IFaceLog_getGroupPermitOnDeviceGroup_args() throw();
  int32_t deviceGroupId;
  int32_t personGroupId;

  void __set_deviceGroupId(const int32_t val);

  void __set_personGroupId(const int32_t val);

  bool operator == (const IFaceLog_getGroupPermitOnDeviceGroup_args & rhs) const
  {
    if (!(deviceGroupId == rhs.deviceGroupId))
      return false;
    if (!(personGroupId == rhs.personGroupId))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getGroupPermitOnDeviceGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getGroupPermitOnDeviceGroup_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getGroupPermitOnDeviceGroup_pargs {
 public:


  virtual ~IFaceLog_getGroupPermitOnDeviceGroup_pargs() throw();
  const int32_t* deviceGroupId;
  const int32_t* personGroupId;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getGroupPermitOnDeviceGroup_result__isset {
  _IFaceLog_getGroupPermitOnDeviceGroup_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getGroupPermitOnDeviceGroup_result__isset;

class IFaceLog_getGroupPermitOnDeviceGroup_result {
 public:

  IFaceLog_getGroupPermitOnDeviceGroup_result(const IFaceLog_getGroupPermitOnDeviceGroup_result&);
  IFaceLog_getGroupPermitOnDeviceGroup_result(IFaceLog_getGroupPermitOnDeviceGroup_result&&);
  IFaceLog_getGroupPermitOnDeviceGroup_result& operator=(const IFaceLog_getGroupPermitOnDeviceGroup_result&);
  IFaceLog_getGroupPermitOnDeviceGroup_result& operator=(IFaceLog_getGroupPermitOnDeviceGroup_result&&);
  IFaceLog_getGroupPermitOnDeviceGroup_result() {
  }

  virtual ~IFaceLog_getGroupPermitOnDeviceGroup_result() throw();
  PermitBean success;
  ServiceRuntimeException ex1;

  _IFaceLog_getGroupPermitOnDeviceGroup_result__isset __isset;

  void __set_success(const PermitBean& val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getGroupPermitOnDeviceGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getGroupPermitOnDeviceGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getGroupPermitOnDeviceGroup_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getGroupPermitOnDeviceGroup_presult__isset {
  _IFaceLog_getGroupPermitOnDeviceGroup_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getGroupPermitOnDeviceGroup_presult__isset;

class IFaceLog_getGroupPermitOnDeviceGroup_presult {
 public:


  virtual ~IFaceLog_getGroupPermitOnDeviceGroup_presult() throw();
  PermitBean* success;
  ServiceRuntimeException ex1;

  _IFaceLog_getGroupPermitOnDeviceGroup_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_getGroupPermits_args__isset {
  _IFaceLog_getGroupPermits_args__isset() : personGroupIdList(false) {}
  bool personGroupIdList :1;
} _IFaceLog_getGroupPermits_args__isset;

class IFaceLog_getGroupPermits_args {
 public:

  IFaceLog_getGroupPermits_args(const IFaceLog_getGroupPermits_args&);
  IFaceLog_getGroupPermits_args(IFaceLog_getGroupPermits_args&&);
  IFaceLog_getGroupPermits_args& operator=(const IFaceLog_getGroupPermits_args&);
  IFaceLog_getGroupPermits_args& operator=(IFaceLog_getGroupPermits_args&&);
  IFaceLog_getGroupPermits_args() : deviceId(0) {
  }

  virtual ~IFaceLog_getGroupPermits_args() throw();
  int32_t deviceId;
  std::vector<int32_t>  personGroupIdList;

  _IFaceLog_getGroupPermits_args__isset __isset;

  void __set_deviceId(const int32_t val);

  void __set_personGroupIdList(const std::vector<int32_t> & val);

  bool operator == (const IFaceLog_getGroupPermits_args & rhs) const
  {
    if (!(deviceId == rhs.deviceId))
      return false;
    if (!(personGroupIdList == rhs.personGroupIdList))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getGroupPermits_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getGroupPermits_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getGroupPermits_pargs {
 public:


  virtual ~IFaceLog_getGroupPermits_pargs() throw();
  const int32_t* deviceId;
  const std::vector<int32_t> * personGroupIdList;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getGroupPermits_result__isset {
  _IFaceLog_getGroupPermits_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getGroupPermits_result__isset;

class IFaceLog_getGroupPermits_result {
 public:

  IFaceLog_getGroupPermits_result(const IFaceLog_getGroupPermits_result&);
  IFaceLog_getGroupPermits_result(IFaceLog_getGroupPermits_result&&);
  IFaceLog_getGroupPermits_result& operator=(const IFaceLog_getGroupPermits_result&);
  IFaceLog_getGroupPermits_result& operator=(IFaceLog_getGroupPermits_result&&);
  IFaceLog_getGroupPermits_result() {
  }

  virtual ~IFaceLog_getGroupPermits_result() throw();
  std::vector<PermitBean>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_getGroupPermits_result__isset __isset;

  void __set_success(const std::vector<PermitBean> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getGroupPermits_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getGroupPermits_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getGroupPermits_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getGroupPermits_presult__isset {
  _IFaceLog_getGroupPermits_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getGroupPermits_presult__isset;

class IFaceLog_getGroupPermits_presult {
 public:


  virtual ~IFaceLog_getGroupPermits_presult() throw();
  std::vector<PermitBean> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_getGroupPermits_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_getImage_args__isset {
  _IFaceLog_getImage_args__isset() : imageMD5(false) {}
  bool imageMD5 :1;
} _IFaceLog_getImage_args__isset;

class IFaceLog_getImage_args {
 public:

  IFaceLog_getImage_args(const IFaceLog_getImage_args&);
  IFaceLog_getImage_args(IFaceLog_getImage_args&&);
  IFaceLog_getImage_args& operator=(const IFaceLog_getImage_args&);
  IFaceLog_getImage_args& operator=(IFaceLog_getImage_args&&);
  IFaceLog_getImage_args() : imageMD5() {
  }

  virtual ~IFaceLog_getImage_args() throw();
  std::string imageMD5;

  _IFaceLog_getImage_args__isset __isset;

  void __set_imageMD5(const std::string& val);

  bool operator == (const IFaceLog_getImage_args & rhs) const
  {
    if (!(imageMD5 == rhs.imageMD5))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getImage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getImage_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getImage_pargs {
 public:


  virtual ~IFaceLog_getImage_pargs() throw();
  const std::string* imageMD5;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getImage_result__isset {
  _IFaceLog_getImage_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getImage_result__isset;

class IFaceLog_getImage_result {
 public:

  IFaceLog_getImage_result(const IFaceLog_getImage_result&);
  IFaceLog_getImage_result(IFaceLog_getImage_result&&);
  IFaceLog_getImage_result& operator=(const IFaceLog_getImage_result&);
  IFaceLog_getImage_result& operator=(IFaceLog_getImage_result&&);
  IFaceLog_getImage_result() {
  }

  virtual ~IFaceLog_getImage_result() throw();
  ImageBean success;
  ServiceRuntimeException ex1;

  _IFaceLog_getImage_result__isset __isset;

  void __set_success(const ImageBean& val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getImage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getImage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getImage_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getImage_presult__isset {
  _IFaceLog_getImage_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getImage_presult__isset;

class IFaceLog_getImage_presult {
 public:


  virtual ~IFaceLog_getImage_presult() throw();
  ImageBean* success;
  ServiceRuntimeException ex1;

  _IFaceLog_getImage_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_getImageBytes_args__isset {
  _IFaceLog_getImageBytes_args__isset() : imageMD5(false) {}
  bool imageMD5 :1;
} _IFaceLog_getImageBytes_args__isset;

class IFaceLog_getImageBytes_args {
 public:

  IFaceLog_getImageBytes_args(const IFaceLog_getImageBytes_args&);
  IFaceLog_getImageBytes_args(IFaceLog_getImageBytes_args&&);
  IFaceLog_getImageBytes_args& operator=(const IFaceLog_getImageBytes_args&);
  IFaceLog_getImageBytes_args& operator=(IFaceLog_getImageBytes_args&&);
  IFaceLog_getImageBytes_args() : imageMD5() {
  }

  virtual ~IFaceLog_getImageBytes_args() throw();
  std::string imageMD5;

  _IFaceLog_getImageBytes_args__isset __isset;

  void __set_imageMD5(const std::string& val);

  bool operator == (const IFaceLog_getImageBytes_args & rhs) const
  {
    if (!(imageMD5 == rhs.imageMD5))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getImageBytes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getImageBytes_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getImageBytes_pargs {
 public:


  virtual ~IFaceLog_getImageBytes_pargs() throw();
  const std::string* imageMD5;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getImageBytes_result__isset {
  _IFaceLog_getImageBytes_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getImageBytes_result__isset;

class IFaceLog_getImageBytes_result {
 public:

  IFaceLog_getImageBytes_result(const IFaceLog_getImageBytes_result&);
  IFaceLog_getImageBytes_result(IFaceLog_getImageBytes_result&&);
  IFaceLog_getImageBytes_result& operator=(const IFaceLog_getImageBytes_result&);
  IFaceLog_getImageBytes_result& operator=(IFaceLog_getImageBytes_result&&);
  IFaceLog_getImageBytes_result() : success() {
  }

  virtual ~IFaceLog_getImageBytes_result() throw();
  std::string success;
  ServiceRuntimeException ex1;

  _IFaceLog_getImageBytes_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getImageBytes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getImageBytes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getImageBytes_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getImageBytes_presult__isset {
  _IFaceLog_getImageBytes_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getImageBytes_presult__isset;

class IFaceLog_getImageBytes_presult {
 public:


  virtual ~IFaceLog_getImageBytes_presult() throw();
  std::string* success;
  ServiceRuntimeException ex1;

  _IFaceLog_getImageBytes_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_getImageBytesRef_args__isset {
  _IFaceLog_getImageBytesRef_args__isset() : primaryKey(false), refType(false) {}
  bool primaryKey :1;
  bool refType :1;
} _IFaceLog_getImageBytesRef_args__isset;

class IFaceLog_getImageBytesRef_args {
 public:

  IFaceLog_getImageBytesRef_args(const IFaceLog_getImageBytesRef_args&);
  IFaceLog_getImageBytesRef_args(IFaceLog_getImageBytesRef_args&&);
  IFaceLog_getImageBytesRef_args& operator=(const IFaceLog_getImageBytesRef_args&);
  IFaceLog_getImageBytesRef_args& operator=(IFaceLog_getImageBytesRef_args&&);
  IFaceLog_getImageBytesRef_args() : primaryKey(), refType() {
  }

  virtual ~IFaceLog_getImageBytesRef_args() throw();
  std::string primaryKey;
  std::string refType;

  _IFaceLog_getImageBytesRef_args__isset __isset;

  void __set_primaryKey(const std::string& val);

  void __set_refType(const std::string& val);

  bool operator == (const IFaceLog_getImageBytesRef_args & rhs) const
  {
    if (!(primaryKey == rhs.primaryKey))
      return false;
    if (!(refType == rhs.refType))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getImageBytesRef_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getImageBytesRef_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getImageBytesRef_pargs {
 public:


  virtual ~IFaceLog_getImageBytesRef_pargs() throw();
  const std::string* primaryKey;
  const std::string* refType;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getImageBytesRef_result__isset {
  _IFaceLog_getImageBytesRef_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getImageBytesRef_result__isset;

class IFaceLog_getImageBytesRef_result {
 public:

  IFaceLog_getImageBytesRef_result(const IFaceLog_getImageBytesRef_result&);
  IFaceLog_getImageBytesRef_result(IFaceLog_getImageBytesRef_result&&);
  IFaceLog_getImageBytesRef_result& operator=(const IFaceLog_getImageBytesRef_result&);
  IFaceLog_getImageBytesRef_result& operator=(IFaceLog_getImageBytesRef_result&&);
  IFaceLog_getImageBytesRef_result() : success() {
  }

  virtual ~IFaceLog_getImageBytesRef_result() throw();
  std::string success;
  ServiceRuntimeException ex1;

  _IFaceLog_getImageBytesRef_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getImageBytesRef_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getImageBytesRef_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getImageBytesRef_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getImageBytesRef_presult__isset {
  _IFaceLog_getImageBytesRef_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getImageBytesRef_presult__isset;

class IFaceLog_getImageBytesRef_presult {
 public:


  virtual ~IFaceLog_getImageBytesRef_presult() throw();
  std::string* success;
  ServiceRuntimeException ex1;

  _IFaceLog_getImageBytesRef_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_getImagesAssociatedByFeature_args__isset {
  _IFaceLog_getImagesAssociatedByFeature_args__isset() : featureMd5(false) {}
  bool featureMd5 :1;
} _IFaceLog_getImagesAssociatedByFeature_args__isset;

class IFaceLog_getImagesAssociatedByFeature_args {
 public:

  IFaceLog_getImagesAssociatedByFeature_args(const IFaceLog_getImagesAssociatedByFeature_args&);
  IFaceLog_getImagesAssociatedByFeature_args(IFaceLog_getImagesAssociatedByFeature_args&&);
  IFaceLog_getImagesAssociatedByFeature_args& operator=(const IFaceLog_getImagesAssociatedByFeature_args&);
  IFaceLog_getImagesAssociatedByFeature_args& operator=(IFaceLog_getImagesAssociatedByFeature_args&&);
  IFaceLog_getImagesAssociatedByFeature_args() : featureMd5() {
  }

  virtual ~IFaceLog_getImagesAssociatedByFeature_args() throw();
  std::string featureMd5;

  _IFaceLog_getImagesAssociatedByFeature_args__isset __isset;

  void __set_featureMd5(const std::string& val);

  bool operator == (const IFaceLog_getImagesAssociatedByFeature_args & rhs) const
  {
    if (!(featureMd5 == rhs.featureMd5))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getImagesAssociatedByFeature_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getImagesAssociatedByFeature_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getImagesAssociatedByFeature_pargs {
 public:


  virtual ~IFaceLog_getImagesAssociatedByFeature_pargs() throw();
  const std::string* featureMd5;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getImagesAssociatedByFeature_result__isset {
  _IFaceLog_getImagesAssociatedByFeature_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getImagesAssociatedByFeature_result__isset;

class IFaceLog_getImagesAssociatedByFeature_result {
 public:

  IFaceLog_getImagesAssociatedByFeature_result(const IFaceLog_getImagesAssociatedByFeature_result&);
  IFaceLog_getImagesAssociatedByFeature_result(IFaceLog_getImagesAssociatedByFeature_result&&);
  IFaceLog_getImagesAssociatedByFeature_result& operator=(const IFaceLog_getImagesAssociatedByFeature_result&);
  IFaceLog_getImagesAssociatedByFeature_result& operator=(IFaceLog_getImagesAssociatedByFeature_result&&);
  IFaceLog_getImagesAssociatedByFeature_result() {
  }

  virtual ~IFaceLog_getImagesAssociatedByFeature_result() throw();
  std::vector<std::string>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_getImagesAssociatedByFeature_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getImagesAssociatedByFeature_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getImagesAssociatedByFeature_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getImagesAssociatedByFeature_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getImagesAssociatedByFeature_presult__isset {
  _IFaceLog_getImagesAssociatedByFeature_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getImagesAssociatedByFeature_presult__isset;

class IFaceLog_getImagesAssociatedByFeature_presult {
 public:


  virtual ~IFaceLog_getImagesAssociatedByFeature_presult() throw();
  std::vector<std::string> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_getImagesAssociatedByFeature_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class IFaceLog_getLogBeansByPersonId_args {
 public:

  IFaceLog_getLogBeansByPersonId_args(const IFaceLog_getLogBeansByPersonId_args&);
  IFaceLog_getLogBeansByPersonId_args(IFaceLog_getLogBeansByPersonId_args&&);
  IFaceLog_getLogBeansByPersonId_args& operator=(const IFaceLog_getLogBeansByPersonId_args&);
  IFaceLog_getLogBeansByPersonId_args& operator=(IFaceLog_getLogBeansByPersonId_args&&);
  IFaceLog_getLogBeansByPersonId_args() : personId(0) {
  }

  virtual ~IFaceLog_getLogBeansByPersonId_args() throw();
  int32_t personId;

  void __set_personId(const int32_t val);

  bool operator == (const IFaceLog_getLogBeansByPersonId_args & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getLogBeansByPersonId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getLogBeansByPersonId_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getLogBeansByPersonId_pargs {
 public:


  virtual ~IFaceLog_getLogBeansByPersonId_pargs() throw();
  const int32_t* personId;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getLogBeansByPersonId_result__isset {
  _IFaceLog_getLogBeansByPersonId_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getLogBeansByPersonId_result__isset;

class IFaceLog_getLogBeansByPersonId_result {
 public:

  IFaceLog_getLogBeansByPersonId_result(const IFaceLog_getLogBeansByPersonId_result&);
  IFaceLog_getLogBeansByPersonId_result(IFaceLog_getLogBeansByPersonId_result&&);
  IFaceLog_getLogBeansByPersonId_result& operator=(const IFaceLog_getLogBeansByPersonId_result&);
  IFaceLog_getLogBeansByPersonId_result& operator=(IFaceLog_getLogBeansByPersonId_result&&);
  IFaceLog_getLogBeansByPersonId_result() {
  }

  virtual ~IFaceLog_getLogBeansByPersonId_result() throw();
  std::vector<LogBean>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_getLogBeansByPersonId_result__isset __isset;

  void __set_success(const std::vector<LogBean> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getLogBeansByPersonId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getLogBeansByPersonId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getLogBeansByPersonId_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getLogBeansByPersonId_presult__isset {
  _IFaceLog_getLogBeansByPersonId_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getLogBeansByPersonId_presult__isset;

class IFaceLog_getLogBeansByPersonId_presult {
 public:


  virtual ~IFaceLog_getLogBeansByPersonId_presult() throw();
  std::vector<LogBean> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_getLogBeansByPersonId_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class IFaceLog_getPerson_args {
 public:

  IFaceLog_getPerson_args(const IFaceLog_getPerson_args&);
  IFaceLog_getPerson_args(IFaceLog_getPerson_args&&);
  IFaceLog_getPerson_args& operator=(const IFaceLog_getPerson_args&);
  IFaceLog_getPerson_args& operator=(IFaceLog_getPerson_args&&);
  IFaceLog_getPerson_args() : personId(0) {
  }

  virtual ~IFaceLog_getPerson_args() throw();
  int32_t personId;

  void __set_personId(const int32_t val);

  bool operator == (const IFaceLog_getPerson_args & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getPerson_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getPerson_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getPerson_pargs {
 public:


  virtual ~IFaceLog_getPerson_pargs() throw();
  const int32_t* personId;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getPerson_result__isset {
  _IFaceLog_getPerson_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getPerson_result__isset;

class IFaceLog_getPerson_result {
 public:

  IFaceLog_getPerson_result(const IFaceLog_getPerson_result&);
  IFaceLog_getPerson_result(IFaceLog_getPerson_result&&);
  IFaceLog_getPerson_result& operator=(const IFaceLog_getPerson_result&);
  IFaceLog_getPerson_result& operator=(IFaceLog_getPerson_result&&);
  IFaceLog_getPerson_result() {
  }

  virtual ~IFaceLog_getPerson_result() throw();
  PersonBean success;
  ServiceRuntimeException ex1;

  _IFaceLog_getPerson_result__isset __isset;

  void __set_success(const PersonBean& val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getPerson_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getPerson_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getPerson_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getPerson_presult__isset {
  _IFaceLog_getPerson_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getPerson_presult__isset;

class IFaceLog_getPerson_presult {
 public:


  virtual ~IFaceLog_getPerson_presult() throw();
  PersonBean* success;
  ServiceRuntimeException ex1;

  _IFaceLog_getPerson_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_getPersonByMobilePhone_args__isset {
  _IFaceLog_getPersonByMobilePhone_args__isset() : mobilePhone(false) {}
  bool mobilePhone :1;
} _IFaceLog_getPersonByMobilePhone_args__isset;

class IFaceLog_getPersonByMobilePhone_args {
 public:

  IFaceLog_getPersonByMobilePhone_args(const IFaceLog_getPersonByMobilePhone_args&);
  IFaceLog_getPersonByMobilePhone_args(IFaceLog_getPersonByMobilePhone_args&&);
  IFaceLog_getPersonByMobilePhone_args& operator=(const IFaceLog_getPersonByMobilePhone_args&);
  IFaceLog_getPersonByMobilePhone_args& operator=(IFaceLog_getPersonByMobilePhone_args&&);
  IFaceLog_getPersonByMobilePhone_args() : mobilePhone() {
  }

  virtual ~IFaceLog_getPersonByMobilePhone_args() throw();
  std::string mobilePhone;

  _IFaceLog_getPersonByMobilePhone_args__isset __isset;

  void __set_mobilePhone(const std::string& val);

  bool operator == (const IFaceLog_getPersonByMobilePhone_args & rhs) const
  {
    if (!(mobilePhone == rhs.mobilePhone))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getPersonByMobilePhone_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getPersonByMobilePhone_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getPersonByMobilePhone_pargs {
 public:


  virtual ~IFaceLog_getPersonByMobilePhone_pargs() throw();
  const std::string* mobilePhone;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getPersonByMobilePhone_result__isset {
  _IFaceLog_getPersonByMobilePhone_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getPersonByMobilePhone_result__isset;

class IFaceLog_getPersonByMobilePhone_result {
 public:

  IFaceLog_getPersonByMobilePhone_result(const IFaceLog_getPersonByMobilePhone_result&);
  IFaceLog_getPersonByMobilePhone_result(IFaceLog_getPersonByMobilePhone_result&&);
  IFaceLog_getPersonByMobilePhone_result& operator=(const IFaceLog_getPersonByMobilePhone_result&);
  IFaceLog_getPersonByMobilePhone_result& operator=(IFaceLog_getPersonByMobilePhone_result&&);
  IFaceLog_getPersonByMobilePhone_result() {
  }

  virtual ~IFaceLog_getPersonByMobilePhone_result() throw();
  PersonBean success;
  ServiceRuntimeException ex1;

  _IFaceLog_getPersonByMobilePhone_result__isset __isset;

  void __set_success(const PersonBean& val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getPersonByMobilePhone_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getPersonByMobilePhone_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getPersonByMobilePhone_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getPersonByMobilePhone_presult__isset {
  _IFaceLog_getPersonByMobilePhone_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getPersonByMobilePhone_presult__isset;

class IFaceLog_getPersonByMobilePhone_presult {
 public:


  virtual ~IFaceLog_getPersonByMobilePhone_presult() throw();
  PersonBean* success;
  ServiceRuntimeException ex1;

  _IFaceLog_getPersonByMobilePhone_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_getPersonByPapersNum_args__isset {
  _IFaceLog_getPersonByPapersNum_args__isset() : papersNum(false) {}
  bool papersNum :1;
} _IFaceLog_getPersonByPapersNum_args__isset;

class IFaceLog_getPersonByPapersNum_args {
 public:

  IFaceLog_getPersonByPapersNum_args(const IFaceLog_getPersonByPapersNum_args&);
  IFaceLog_getPersonByPapersNum_args(IFaceLog_getPersonByPapersNum_args&&);
  IFaceLog_getPersonByPapersNum_args& operator=(const IFaceLog_getPersonByPapersNum_args&);
  IFaceLog_getPersonByPapersNum_args& operator=(IFaceLog_getPersonByPapersNum_args&&);
  IFaceLog_getPersonByPapersNum_args() : papersNum() {
  }

  virtual ~IFaceLog_getPersonByPapersNum_args() throw();
  std::string papersNum;

  _IFaceLog_getPersonByPapersNum_args__isset __isset;

  void __set_papersNum(const std::string& val);

  bool operator == (const IFaceLog_getPersonByPapersNum_args & rhs) const
  {
    if (!(papersNum == rhs.papersNum))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getPersonByPapersNum_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getPersonByPapersNum_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getPersonByPapersNum_pargs {
 public:


  virtual ~IFaceLog_getPersonByPapersNum_pargs() throw();
  const std::string* papersNum;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getPersonByPapersNum_result__isset {
  _IFaceLog_getPersonByPapersNum_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getPersonByPapersNum_result__isset;

class IFaceLog_getPersonByPapersNum_result {
 public:

  IFaceLog_getPersonByPapersNum_result(const IFaceLog_getPersonByPapersNum_result&);
  IFaceLog_getPersonByPapersNum_result(IFaceLog_getPersonByPapersNum_result&&);
  IFaceLog_getPersonByPapersNum_result& operator=(const IFaceLog_getPersonByPapersNum_result&);
  IFaceLog_getPersonByPapersNum_result& operator=(IFaceLog_getPersonByPapersNum_result&&);
  IFaceLog_getPersonByPapersNum_result() {
  }

  virtual ~IFaceLog_getPersonByPapersNum_result() throw();
  PersonBean success;
  ServiceRuntimeException ex1;

  _IFaceLog_getPersonByPapersNum_result__isset __isset;

  void __set_success(const PersonBean& val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getPersonByPapersNum_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getPersonByPapersNum_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getPersonByPapersNum_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getPersonByPapersNum_presult__isset {
  _IFaceLog_getPersonByPapersNum_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getPersonByPapersNum_presult__isset;

class IFaceLog_getPersonByPapersNum_presult {
 public:


  virtual ~IFaceLog_getPersonByPapersNum_presult() throw();
  PersonBean* success;
  ServiceRuntimeException ex1;

  _IFaceLog_getPersonByPapersNum_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class IFaceLog_getPersonGroup_args {
 public:

  IFaceLog_getPersonGroup_args(const IFaceLog_getPersonGroup_args&);
  IFaceLog_getPersonGroup_args(IFaceLog_getPersonGroup_args&&);
  IFaceLog_getPersonGroup_args& operator=(const IFaceLog_getPersonGroup_args&);
  IFaceLog_getPersonGroup_args& operator=(IFaceLog_getPersonGroup_args&&);
  IFaceLog_getPersonGroup_args() : personGroupId(0) {
  }

  virtual ~IFaceLog_getPersonGroup_args() throw();
  int32_t personGroupId;

  void __set_personGroupId(const int32_t val);

  bool operator == (const IFaceLog_getPersonGroup_args & rhs) const
  {
    if (!(personGroupId == rhs.personGroupId))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getPersonGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getPersonGroup_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getPersonGroup_pargs {
 public:


  virtual ~IFaceLog_getPersonGroup_pargs() throw();
  const int32_t* personGroupId;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getPersonGroup_result__isset {
  _IFaceLog_getPersonGroup_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getPersonGroup_result__isset;

class IFaceLog_getPersonGroup_result {
 public:

  IFaceLog_getPersonGroup_result(const IFaceLog_getPersonGroup_result&);
  IFaceLog_getPersonGroup_result(IFaceLog_getPersonGroup_result&&);
  IFaceLog_getPersonGroup_result& operator=(const IFaceLog_getPersonGroup_result&);
  IFaceLog_getPersonGroup_result& operator=(IFaceLog_getPersonGroup_result&&);
  IFaceLog_getPersonGroup_result() {
  }

  virtual ~IFaceLog_getPersonGroup_result() throw();
  PersonGroupBean success;
  ServiceRuntimeException ex1;

  _IFaceLog_getPersonGroup_result__isset __isset;

  void __set_success(const PersonGroupBean& val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getPersonGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getPersonGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getPersonGroup_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getPersonGroup_presult__isset {
  _IFaceLog_getPersonGroup_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getPersonGroup_presult__isset;

class IFaceLog_getPersonGroup_presult {
 public:


  virtual ~IFaceLog_getPersonGroup_presult() throw();
  PersonGroupBean* success;
  ServiceRuntimeException ex1;

  _IFaceLog_getPersonGroup_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_getPersonGroups_args__isset {
  _IFaceLog_getPersonGroups_args__isset() : groupIdList(false) {}
  bool groupIdList :1;
} _IFaceLog_getPersonGroups_args__isset;

class IFaceLog_getPersonGroups_args {
 public:

  IFaceLog_getPersonGroups_args(const IFaceLog_getPersonGroups_args&);
  IFaceLog_getPersonGroups_args(IFaceLog_getPersonGroups_args&&);
  IFaceLog_getPersonGroups_args& operator=(const IFaceLog_getPersonGroups_args&);
  IFaceLog_getPersonGroups_args& operator=(IFaceLog_getPersonGroups_args&&);
  IFaceLog_getPersonGroups_args() {
  }

  virtual ~IFaceLog_getPersonGroups_args() throw();
  std::vector<int32_t>  groupIdList;

  _IFaceLog_getPersonGroups_args__isset __isset;

  void __set_groupIdList(const std::vector<int32_t> & val);

  bool operator == (const IFaceLog_getPersonGroups_args & rhs) const
  {
    if (!(groupIdList == rhs.groupIdList))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getPersonGroups_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getPersonGroups_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getPersonGroups_pargs {
 public:


  virtual ~IFaceLog_getPersonGroups_pargs() throw();
  const std::vector<int32_t> * groupIdList;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getPersonGroups_result__isset {
  _IFaceLog_getPersonGroups_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getPersonGroups_result__isset;

class IFaceLog_getPersonGroups_result {
 public:

  IFaceLog_getPersonGroups_result(const IFaceLog_getPersonGroups_result&);
  IFaceLog_getPersonGroups_result(IFaceLog_getPersonGroups_result&&);
  IFaceLog_getPersonGroups_result& operator=(const IFaceLog_getPersonGroups_result&);
  IFaceLog_getPersonGroups_result& operator=(IFaceLog_getPersonGroups_result&&);
  IFaceLog_getPersonGroups_result() {
  }

  virtual ~IFaceLog_getPersonGroups_result() throw();
  std::vector<PersonGroupBean>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_getPersonGroups_result__isset __isset;

  void __set_success(const std::vector<PersonGroupBean> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getPersonGroups_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getPersonGroups_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getPersonGroups_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getPersonGroups_presult__isset {
  _IFaceLog_getPersonGroups_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getPersonGroups_presult__isset;

class IFaceLog_getPersonGroups_presult {
 public:


  virtual ~IFaceLog_getPersonGroups_presult() throw();
  std::vector<PersonGroupBean> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_getPersonGroups_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class IFaceLog_getPersonGroupsBelongs_args {
 public:

  IFaceLog_getPersonGroupsBelongs_args(const IFaceLog_getPersonGroupsBelongs_args&);
  IFaceLog_getPersonGroupsBelongs_args(IFaceLog_getPersonGroupsBelongs_args&&);
  IFaceLog_getPersonGroupsBelongs_args& operator=(const IFaceLog_getPersonGroupsBelongs_args&);
  IFaceLog_getPersonGroupsBelongs_args& operator=(IFaceLog_getPersonGroupsBelongs_args&&);
  IFaceLog_getPersonGroupsBelongs_args() : personId(0) {
  }

  virtual ~IFaceLog_getPersonGroupsBelongs_args() throw();
  int32_t personId;

  void __set_personId(const int32_t val);

  bool operator == (const IFaceLog_getPersonGroupsBelongs_args & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getPersonGroupsBelongs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getPersonGroupsBelongs_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getPersonGroupsBelongs_pargs {
 public:


  virtual ~IFaceLog_getPersonGroupsBelongs_pargs() throw();
  const int32_t* personId;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getPersonGroupsBelongs_result__isset {
  _IFaceLog_getPersonGroupsBelongs_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getPersonGroupsBelongs_result__isset;

class IFaceLog_getPersonGroupsBelongs_result {
 public:

  IFaceLog_getPersonGroupsBelongs_result(const IFaceLog_getPersonGroupsBelongs_result&);
  IFaceLog_getPersonGroupsBelongs_result(IFaceLog_getPersonGroupsBelongs_result&&);
  IFaceLog_getPersonGroupsBelongs_result& operator=(const IFaceLog_getPersonGroupsBelongs_result&);
  IFaceLog_getPersonGroupsBelongs_result& operator=(IFaceLog_getPersonGroupsBelongs_result&&);
  IFaceLog_getPersonGroupsBelongs_result() {
  }

  virtual ~IFaceLog_getPersonGroupsBelongs_result() throw();
  std::vector<int32_t>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_getPersonGroupsBelongs_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getPersonGroupsBelongs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getPersonGroupsBelongs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getPersonGroupsBelongs_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getPersonGroupsBelongs_presult__isset {
  _IFaceLog_getPersonGroupsBelongs_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getPersonGroupsBelongs_presult__isset;

class IFaceLog_getPersonGroupsBelongs_presult {
 public:


  virtual ~IFaceLog_getPersonGroupsBelongs_presult() throw();
  std::vector<int32_t> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_getPersonGroupsBelongs_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class IFaceLog_getPersonGroupsPermittedBy_args {
 public:

  IFaceLog_getPersonGroupsPermittedBy_args(const IFaceLog_getPersonGroupsPermittedBy_args&);
  IFaceLog_getPersonGroupsPermittedBy_args(IFaceLog_getPersonGroupsPermittedBy_args&&);
  IFaceLog_getPersonGroupsPermittedBy_args& operator=(const IFaceLog_getPersonGroupsPermittedBy_args&);
  IFaceLog_getPersonGroupsPermittedBy_args& operator=(IFaceLog_getPersonGroupsPermittedBy_args&&);
  IFaceLog_getPersonGroupsPermittedBy_args() : deviceGroupId(0) {
  }

  virtual ~IFaceLog_getPersonGroupsPermittedBy_args() throw();
  int32_t deviceGroupId;

  void __set_deviceGroupId(const int32_t val);

  bool operator == (const IFaceLog_getPersonGroupsPermittedBy_args & rhs) const
  {
    if (!(deviceGroupId == rhs.deviceGroupId))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getPersonGroupsPermittedBy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getPersonGroupsPermittedBy_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getPersonGroupsPermittedBy_pargs {
 public:


  virtual ~IFaceLog_getPersonGroupsPermittedBy_pargs() throw();
  const int32_t* deviceGroupId;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getPersonGroupsPermittedBy_result__isset {
  _IFaceLog_getPersonGroupsPermittedBy_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getPersonGroupsPermittedBy_result__isset;

class IFaceLog_getPersonGroupsPermittedBy_result {
 public:

  IFaceLog_getPersonGroupsPermittedBy_result(const IFaceLog_getPersonGroupsPermittedBy_result&);
  IFaceLog_getPersonGroupsPermittedBy_result(IFaceLog_getPersonGroupsPermittedBy_result&&);
  IFaceLog_getPersonGroupsPermittedBy_result& operator=(const IFaceLog_getPersonGroupsPermittedBy_result&);
  IFaceLog_getPersonGroupsPermittedBy_result& operator=(IFaceLog_getPersonGroupsPermittedBy_result&&);
  IFaceLog_getPersonGroupsPermittedBy_result() {
  }

  virtual ~IFaceLog_getPersonGroupsPermittedBy_result() throw();
  std::vector<int32_t>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_getPersonGroupsPermittedBy_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getPersonGroupsPermittedBy_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getPersonGroupsPermittedBy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getPersonGroupsPermittedBy_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getPersonGroupsPermittedBy_presult__isset {
  _IFaceLog_getPersonGroupsPermittedBy_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getPersonGroupsPermittedBy_presult__isset;

class IFaceLog_getPersonGroupsPermittedBy_presult {
 public:


  virtual ~IFaceLog_getPersonGroupsPermittedBy_presult() throw();
  std::vector<int32_t> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_getPersonGroupsPermittedBy_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class IFaceLog_getPersonPermit_args {
 public:

  IFaceLog_getPersonPermit_args(const IFaceLog_getPersonPermit_args&);
  IFaceLog_getPersonPermit_args(IFaceLog_getPersonPermit_args&&);
  IFaceLog_getPersonPermit_args& operator=(const IFaceLog_getPersonPermit_args&);
  IFaceLog_getPersonPermit_args& operator=(IFaceLog_getPersonPermit_args&&);
  IFaceLog_getPersonPermit_args() : deviceId(0), personId(0) {
  }

  virtual ~IFaceLog_getPersonPermit_args() throw();
  int32_t deviceId;
  int32_t personId;

  void __set_deviceId(const int32_t val);

  void __set_personId(const int32_t val);

  bool operator == (const IFaceLog_getPersonPermit_args & rhs) const
  {
    if (!(deviceId == rhs.deviceId))
      return false;
    if (!(personId == rhs.personId))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getPersonPermit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getPersonPermit_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getPersonPermit_pargs {
 public:


  virtual ~IFaceLog_getPersonPermit_pargs() throw();
  const int32_t* deviceId;
  const int32_t* personId;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getPersonPermit_result__isset {
  _IFaceLog_getPersonPermit_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getPersonPermit_result__isset;

class IFaceLog_getPersonPermit_result {
 public:

  IFaceLog_getPersonPermit_result(const IFaceLog_getPersonPermit_result&);
  IFaceLog_getPersonPermit_result(IFaceLog_getPersonPermit_result&&);
  IFaceLog_getPersonPermit_result& operator=(const IFaceLog_getPersonPermit_result&);
  IFaceLog_getPersonPermit_result& operator=(IFaceLog_getPersonPermit_result&&);
  IFaceLog_getPersonPermit_result() {
  }

  virtual ~IFaceLog_getPersonPermit_result() throw();
  PermitBean success;
  ServiceRuntimeException ex1;

  _IFaceLog_getPersonPermit_result__isset __isset;

  void __set_success(const PermitBean& val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getPersonPermit_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getPersonPermit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getPersonPermit_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getPersonPermit_presult__isset {
  _IFaceLog_getPersonPermit_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getPersonPermit_presult__isset;

class IFaceLog_getPersonPermit_presult {
 public:


  virtual ~IFaceLog_getPersonPermit_presult() throw();
  PermitBean* success;
  ServiceRuntimeException ex1;

  _IFaceLog_getPersonPermit_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_getPersonPermits_args__isset {
  _IFaceLog_getPersonPermits_args__isset() : personIdList(false) {}
  bool personIdList :1;
} _IFaceLog_getPersonPermits_args__isset;

class IFaceLog_getPersonPermits_args {
 public:

  IFaceLog_getPersonPermits_args(const IFaceLog_getPersonPermits_args&);
  IFaceLog_getPersonPermits_args(IFaceLog_getPersonPermits_args&&);
  IFaceLog_getPersonPermits_args& operator=(const IFaceLog_getPersonPermits_args&);
  IFaceLog_getPersonPermits_args& operator=(IFaceLog_getPersonPermits_args&&);
  IFaceLog_getPersonPermits_args() : deviceId(0) {
  }

  virtual ~IFaceLog_getPersonPermits_args() throw();
  int32_t deviceId;
  std::vector<int32_t>  personIdList;

  _IFaceLog_getPersonPermits_args__isset __isset;

  void __set_deviceId(const int32_t val);

  void __set_personIdList(const std::vector<int32_t> & val);

  bool operator == (const IFaceLog_getPersonPermits_args & rhs) const
  {
    if (!(deviceId == rhs.deviceId))
      return false;
    if (!(personIdList == rhs.personIdList))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getPersonPermits_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getPersonPermits_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getPersonPermits_pargs {
 public:


  virtual ~IFaceLog_getPersonPermits_pargs() throw();
  const int32_t* deviceId;
  const std::vector<int32_t> * personIdList;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getPersonPermits_result__isset {
  _IFaceLog_getPersonPermits_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getPersonPermits_result__isset;

class IFaceLog_getPersonPermits_result {
 public:

  IFaceLog_getPersonPermits_result(const IFaceLog_getPersonPermits_result&);
  IFaceLog_getPersonPermits_result(IFaceLog_getPersonPermits_result&&);
  IFaceLog_getPersonPermits_result& operator=(const IFaceLog_getPersonPermits_result&);
  IFaceLog_getPersonPermits_result& operator=(IFaceLog_getPersonPermits_result&&);
  IFaceLog_getPersonPermits_result() {
  }

  virtual ~IFaceLog_getPersonPermits_result() throw();
  std::vector<PermitBean>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_getPersonPermits_result__isset __isset;

  void __set_success(const std::vector<PermitBean> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getPersonPermits_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getPersonPermits_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getPersonPermits_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getPersonPermits_presult__isset {
  _IFaceLog_getPersonPermits_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getPersonPermits_presult__isset;

class IFaceLog_getPersonPermits_presult {
 public:


  virtual ~IFaceLog_getPersonPermits_presult() throw();
  std::vector<PermitBean> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_getPersonPermits_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_getPersons_args__isset {
  _IFaceLog_getPersons_args__isset() : idList(false) {}
  bool idList :1;
} _IFaceLog_getPersons_args__isset;

class IFaceLog_getPersons_args {
 public:

  IFaceLog_getPersons_args(const IFaceLog_getPersons_args&);
  IFaceLog_getPersons_args(IFaceLog_getPersons_args&&);
  IFaceLog_getPersons_args& operator=(const IFaceLog_getPersons_args&);
  IFaceLog_getPersons_args& operator=(IFaceLog_getPersons_args&&);
  IFaceLog_getPersons_args() {
  }

  virtual ~IFaceLog_getPersons_args() throw();
  std::vector<int32_t>  idList;

  _IFaceLog_getPersons_args__isset __isset;

  void __set_idList(const std::vector<int32_t> & val);

  bool operator == (const IFaceLog_getPersons_args & rhs) const
  {
    if (!(idList == rhs.idList))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getPersons_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getPersons_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getPersons_pargs {
 public:


  virtual ~IFaceLog_getPersons_pargs() throw();
  const std::vector<int32_t> * idList;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getPersons_result__isset {
  _IFaceLog_getPersons_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getPersons_result__isset;

class IFaceLog_getPersons_result {
 public:

  IFaceLog_getPersons_result(const IFaceLog_getPersons_result&);
  IFaceLog_getPersons_result(IFaceLog_getPersons_result&&);
  IFaceLog_getPersons_result& operator=(const IFaceLog_getPersons_result&);
  IFaceLog_getPersons_result& operator=(IFaceLog_getPersons_result&&);
  IFaceLog_getPersons_result() {
  }

  virtual ~IFaceLog_getPersons_result() throw();
  std::vector<PersonBean>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_getPersons_result__isset __isset;

  void __set_success(const std::vector<PersonBean> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getPersons_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getPersons_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getPersons_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getPersons_presult__isset {
  _IFaceLog_getPersons_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getPersons_presult__isset;

class IFaceLog_getPersons_presult {
 public:


  virtual ~IFaceLog_getPersons_presult() throw();
  std::vector<PersonBean> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_getPersons_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class IFaceLog_getPersonsOfGroup_args {
 public:

  IFaceLog_getPersonsOfGroup_args(const IFaceLog_getPersonsOfGroup_args&);
  IFaceLog_getPersonsOfGroup_args(IFaceLog_getPersonsOfGroup_args&&);
  IFaceLog_getPersonsOfGroup_args& operator=(const IFaceLog_getPersonsOfGroup_args&);
  IFaceLog_getPersonsOfGroup_args& operator=(IFaceLog_getPersonsOfGroup_args&&);
  IFaceLog_getPersonsOfGroup_args() : personGroupId(0) {
  }

  virtual ~IFaceLog_getPersonsOfGroup_args() throw();
  int32_t personGroupId;

  void __set_personGroupId(const int32_t val);

  bool operator == (const IFaceLog_getPersonsOfGroup_args & rhs) const
  {
    if (!(personGroupId == rhs.personGroupId))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getPersonsOfGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getPersonsOfGroup_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getPersonsOfGroup_pargs {
 public:


  virtual ~IFaceLog_getPersonsOfGroup_pargs() throw();
  const int32_t* personGroupId;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getPersonsOfGroup_result__isset {
  _IFaceLog_getPersonsOfGroup_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getPersonsOfGroup_result__isset;

class IFaceLog_getPersonsOfGroup_result {
 public:

  IFaceLog_getPersonsOfGroup_result(const IFaceLog_getPersonsOfGroup_result&);
  IFaceLog_getPersonsOfGroup_result(IFaceLog_getPersonsOfGroup_result&&);
  IFaceLog_getPersonsOfGroup_result& operator=(const IFaceLog_getPersonsOfGroup_result&);
  IFaceLog_getPersonsOfGroup_result& operator=(IFaceLog_getPersonsOfGroup_result&&);
  IFaceLog_getPersonsOfGroup_result() {
  }

  virtual ~IFaceLog_getPersonsOfGroup_result() throw();
  std::vector<int32_t>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_getPersonsOfGroup_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getPersonsOfGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getPersonsOfGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getPersonsOfGroup_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getPersonsOfGroup_presult__isset {
  _IFaceLog_getPersonsOfGroup_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getPersonsOfGroup_presult__isset;

class IFaceLog_getPersonsOfGroup_presult {
 public:


  virtual ~IFaceLog_getPersonsOfGroup_presult() throw();
  std::vector<int32_t> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_getPersonsOfGroup_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_getPersonsPermittedOnDevice_args__isset {
  _IFaceLog_getPersonsPermittedOnDevice_args__isset() : excludePersonIds(false), timestamp(false) {}
  bool excludePersonIds :1;
  bool timestamp :1;
} _IFaceLog_getPersonsPermittedOnDevice_args__isset;

class IFaceLog_getPersonsPermittedOnDevice_args {
 public:

  IFaceLog_getPersonsPermittedOnDevice_args(const IFaceLog_getPersonsPermittedOnDevice_args&);
  IFaceLog_getPersonsPermittedOnDevice_args(IFaceLog_getPersonsPermittedOnDevice_args&&);
  IFaceLog_getPersonsPermittedOnDevice_args& operator=(const IFaceLog_getPersonsPermittedOnDevice_args&);
  IFaceLog_getPersonsPermittedOnDevice_args& operator=(IFaceLog_getPersonsPermittedOnDevice_args&&);
  IFaceLog_getPersonsPermittedOnDevice_args() : deviceId(0), ignoreSchedule(0), timestamp(0) {
  }

  virtual ~IFaceLog_getPersonsPermittedOnDevice_args() throw();
  int32_t deviceId;
  bool ignoreSchedule;
  std::vector<int32_t>  excludePersonIds;
  int64_t timestamp;

  _IFaceLog_getPersonsPermittedOnDevice_args__isset __isset;

  void __set_deviceId(const int32_t val);

  void __set_ignoreSchedule(const bool val);

  void __set_excludePersonIds(const std::vector<int32_t> & val);

  void __set_timestamp(const int64_t val);

  bool operator == (const IFaceLog_getPersonsPermittedOnDevice_args & rhs) const
  {
    if (!(deviceId == rhs.deviceId))
      return false;
    if (!(ignoreSchedule == rhs.ignoreSchedule))
      return false;
    if (!(excludePersonIds == rhs.excludePersonIds))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getPersonsPermittedOnDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getPersonsPermittedOnDevice_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getPersonsPermittedOnDevice_pargs {
 public:


  virtual ~IFaceLog_getPersonsPermittedOnDevice_pargs() throw();
  const int32_t* deviceId;
  const bool* ignoreSchedule;
  const std::vector<int32_t> * excludePersonIds;
  const int64_t* timestamp;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getPersonsPermittedOnDevice_result__isset {
  _IFaceLog_getPersonsPermittedOnDevice_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getPersonsPermittedOnDevice_result__isset;

class IFaceLog_getPersonsPermittedOnDevice_result {
 public:

  IFaceLog_getPersonsPermittedOnDevice_result(const IFaceLog_getPersonsPermittedOnDevice_result&);
  IFaceLog_getPersonsPermittedOnDevice_result(IFaceLog_getPersonsPermittedOnDevice_result&&);
  IFaceLog_getPersonsPermittedOnDevice_result& operator=(const IFaceLog_getPersonsPermittedOnDevice_result&);
  IFaceLog_getPersonsPermittedOnDevice_result& operator=(IFaceLog_getPersonsPermittedOnDevice_result&&);
  IFaceLog_getPersonsPermittedOnDevice_result() {
  }

  virtual ~IFaceLog_getPersonsPermittedOnDevice_result() throw();
  std::vector<int32_t>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_getPersonsPermittedOnDevice_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getPersonsPermittedOnDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getPersonsPermittedOnDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getPersonsPermittedOnDevice_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getPersonsPermittedOnDevice_presult__isset {
  _IFaceLog_getPersonsPermittedOnDevice_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getPersonsPermittedOnDevice_presult__isset;

class IFaceLog_getPersonsPermittedOnDevice_presult {
 public:


  virtual ~IFaceLog_getPersonsPermittedOnDevice_presult() throw();
  std::vector<int32_t> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_getPersonsPermittedOnDevice_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_getProperties_args__isset {
  _IFaceLog_getProperties_args__isset() : prefix(false), token(false) {}
  bool prefix :1;
  bool token :1;
} _IFaceLog_getProperties_args__isset;

class IFaceLog_getProperties_args {
 public:

  IFaceLog_getProperties_args(const IFaceLog_getProperties_args&);
  IFaceLog_getProperties_args(IFaceLog_getProperties_args&&);
  IFaceLog_getProperties_args& operator=(const IFaceLog_getProperties_args&);
  IFaceLog_getProperties_args& operator=(IFaceLog_getProperties_args&&);
  IFaceLog_getProperties_args() : prefix() {
  }

  virtual ~IFaceLog_getProperties_args() throw();
  std::string prefix;
  Token token;

  _IFaceLog_getProperties_args__isset __isset;

  void __set_prefix(const std::string& val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_getProperties_args & rhs) const
  {
    if (!(prefix == rhs.prefix))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getProperties_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getProperties_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getProperties_pargs {
 public:


  virtual ~IFaceLog_getProperties_pargs() throw();
  const std::string* prefix;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getProperties_result__isset {
  _IFaceLog_getProperties_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getProperties_result__isset;

class IFaceLog_getProperties_result {
 public:

  IFaceLog_getProperties_result(const IFaceLog_getProperties_result&);
  IFaceLog_getProperties_result(IFaceLog_getProperties_result&&);
  IFaceLog_getProperties_result& operator=(const IFaceLog_getProperties_result&);
  IFaceLog_getProperties_result& operator=(IFaceLog_getProperties_result&&);
  IFaceLog_getProperties_result() {
  }

  virtual ~IFaceLog_getProperties_result() throw();
  std::map<std::string, std::string>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_getProperties_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getProperties_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getProperties_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getProperties_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getProperties_presult__isset {
  _IFaceLog_getProperties_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getProperties_presult__isset;

class IFaceLog_getProperties_presult {
 public:


  virtual ~IFaceLog_getProperties_presult() throw();
  std::map<std::string, std::string> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_getProperties_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_getProperty_args__isset {
  _IFaceLog_getProperty_args__isset() : key(false), token(false) {}
  bool key :1;
  bool token :1;
} _IFaceLog_getProperty_args__isset;

class IFaceLog_getProperty_args {
 public:

  IFaceLog_getProperty_args(const IFaceLog_getProperty_args&);
  IFaceLog_getProperty_args(IFaceLog_getProperty_args&&);
  IFaceLog_getProperty_args& operator=(const IFaceLog_getProperty_args&);
  IFaceLog_getProperty_args& operator=(IFaceLog_getProperty_args&&);
  IFaceLog_getProperty_args() : key() {
  }

  virtual ~IFaceLog_getProperty_args() throw();
  std::string key;
  Token token;

  _IFaceLog_getProperty_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_getProperty_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getProperty_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getProperty_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getProperty_pargs {
 public:


  virtual ~IFaceLog_getProperty_pargs() throw();
  const std::string* key;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getProperty_result__isset {
  _IFaceLog_getProperty_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getProperty_result__isset;

class IFaceLog_getProperty_result {
 public:

  IFaceLog_getProperty_result(const IFaceLog_getProperty_result&);
  IFaceLog_getProperty_result(IFaceLog_getProperty_result&&);
  IFaceLog_getProperty_result& operator=(const IFaceLog_getProperty_result&);
  IFaceLog_getProperty_result& operator=(IFaceLog_getProperty_result&&);
  IFaceLog_getProperty_result() : success() {
  }

  virtual ~IFaceLog_getProperty_result() throw();
  std::string success;
  ServiceRuntimeException ex1;

  _IFaceLog_getProperty_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getProperty_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getProperty_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getProperty_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getProperty_presult__isset {
  _IFaceLog_getProperty_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getProperty_presult__isset;

class IFaceLog_getProperty_presult {
 public:


  virtual ~IFaceLog_getProperty_presult() throw();
  std::string* success;
  ServiceRuntimeException ex1;

  _IFaceLog_getProperty_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_getRedisParameters_args__isset {
  _IFaceLog_getRedisParameters_args__isset() : token(false) {}
  bool token :1;
} _IFaceLog_getRedisParameters_args__isset;

class IFaceLog_getRedisParameters_args {
 public:

  IFaceLog_getRedisParameters_args(const IFaceLog_getRedisParameters_args&);
  IFaceLog_getRedisParameters_args(IFaceLog_getRedisParameters_args&&);
  IFaceLog_getRedisParameters_args& operator=(const IFaceLog_getRedisParameters_args&);
  IFaceLog_getRedisParameters_args& operator=(IFaceLog_getRedisParameters_args&&);
  IFaceLog_getRedisParameters_args() {
  }

  virtual ~IFaceLog_getRedisParameters_args() throw();
  Token token;

  _IFaceLog_getRedisParameters_args__isset __isset;

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_getRedisParameters_args & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getRedisParameters_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getRedisParameters_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getRedisParameters_pargs {
 public:


  virtual ~IFaceLog_getRedisParameters_pargs() throw();
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getRedisParameters_result__isset {
  _IFaceLog_getRedisParameters_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getRedisParameters_result__isset;

class IFaceLog_getRedisParameters_result {
 public:

  IFaceLog_getRedisParameters_result(const IFaceLog_getRedisParameters_result&);
  IFaceLog_getRedisParameters_result(IFaceLog_getRedisParameters_result&&);
  IFaceLog_getRedisParameters_result& operator=(const IFaceLog_getRedisParameters_result&);
  IFaceLog_getRedisParameters_result& operator=(IFaceLog_getRedisParameters_result&&);
  IFaceLog_getRedisParameters_result() {
  }

  virtual ~IFaceLog_getRedisParameters_result() throw();
  std::map<MQParam::type, std::string>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_getRedisParameters_result__isset __isset;

  void __set_success(const std::map<MQParam::type, std::string> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getRedisParameters_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getRedisParameters_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getRedisParameters_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getRedisParameters_presult__isset {
  _IFaceLog_getRedisParameters_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getRedisParameters_presult__isset;

class IFaceLog_getRedisParameters_presult {
 public:


  virtual ~IFaceLog_getRedisParameters_presult() throw();
  std::map<MQParam::type, std::string> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_getRedisParameters_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_getServiceConfig_args__isset {
  _IFaceLog_getServiceConfig_args__isset() : token(false) {}
  bool token :1;
} _IFaceLog_getServiceConfig_args__isset;

class IFaceLog_getServiceConfig_args {
 public:

  IFaceLog_getServiceConfig_args(const IFaceLog_getServiceConfig_args&);
  IFaceLog_getServiceConfig_args(IFaceLog_getServiceConfig_args&&);
  IFaceLog_getServiceConfig_args& operator=(const IFaceLog_getServiceConfig_args&);
  IFaceLog_getServiceConfig_args& operator=(IFaceLog_getServiceConfig_args&&);
  IFaceLog_getServiceConfig_args() {
  }

  virtual ~IFaceLog_getServiceConfig_args() throw();
  Token token;

  _IFaceLog_getServiceConfig_args__isset __isset;

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_getServiceConfig_args & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getServiceConfig_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getServiceConfig_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getServiceConfig_pargs {
 public:


  virtual ~IFaceLog_getServiceConfig_pargs() throw();
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getServiceConfig_result__isset {
  _IFaceLog_getServiceConfig_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getServiceConfig_result__isset;

class IFaceLog_getServiceConfig_result {
 public:

  IFaceLog_getServiceConfig_result(const IFaceLog_getServiceConfig_result&);
  IFaceLog_getServiceConfig_result(IFaceLog_getServiceConfig_result&&);
  IFaceLog_getServiceConfig_result& operator=(const IFaceLog_getServiceConfig_result&);
  IFaceLog_getServiceConfig_result& operator=(IFaceLog_getServiceConfig_result&&);
  IFaceLog_getServiceConfig_result() {
  }

  virtual ~IFaceLog_getServiceConfig_result() throw();
  std::map<std::string, std::string>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_getServiceConfig_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getServiceConfig_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getServiceConfig_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getServiceConfig_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getServiceConfig_presult__isset {
  _IFaceLog_getServiceConfig_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getServiceConfig_presult__isset;

class IFaceLog_getServiceConfig_presult {
 public:


  virtual ~IFaceLog_getServiceConfig_presult() throw();
  std::map<std::string, std::string> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_getServiceConfig_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class IFaceLog_getSubDeviceGroup_args {
 public:

  IFaceLog_getSubDeviceGroup_args(const IFaceLog_getSubDeviceGroup_args&);
  IFaceLog_getSubDeviceGroup_args(IFaceLog_getSubDeviceGroup_args&&);
  IFaceLog_getSubDeviceGroup_args& operator=(const IFaceLog_getSubDeviceGroup_args&);
  IFaceLog_getSubDeviceGroup_args& operator=(IFaceLog_getSubDeviceGroup_args&&);
  IFaceLog_getSubDeviceGroup_args() : deviceGroupId(0) {
  }

  virtual ~IFaceLog_getSubDeviceGroup_args() throw();
  int32_t deviceGroupId;

  void __set_deviceGroupId(const int32_t val);

  bool operator == (const IFaceLog_getSubDeviceGroup_args & rhs) const
  {
    if (!(deviceGroupId == rhs.deviceGroupId))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getSubDeviceGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getSubDeviceGroup_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getSubDeviceGroup_pargs {
 public:


  virtual ~IFaceLog_getSubDeviceGroup_pargs() throw();
  const int32_t* deviceGroupId;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getSubDeviceGroup_result__isset {
  _IFaceLog_getSubDeviceGroup_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getSubDeviceGroup_result__isset;

class IFaceLog_getSubDeviceGroup_result {
 public:

  IFaceLog_getSubDeviceGroup_result(const IFaceLog_getSubDeviceGroup_result&);
  IFaceLog_getSubDeviceGroup_result(IFaceLog_getSubDeviceGroup_result&&);
  IFaceLog_getSubDeviceGroup_result& operator=(const IFaceLog_getSubDeviceGroup_result&);
  IFaceLog_getSubDeviceGroup_result& operator=(IFaceLog_getSubDeviceGroup_result&&);
  IFaceLog_getSubDeviceGroup_result() {
  }

  virtual ~IFaceLog_getSubDeviceGroup_result() throw();
  std::vector<int32_t>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_getSubDeviceGroup_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getSubDeviceGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getSubDeviceGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getSubDeviceGroup_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getSubDeviceGroup_presult__isset {
  _IFaceLog_getSubDeviceGroup_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getSubDeviceGroup_presult__isset;

class IFaceLog_getSubDeviceGroup_presult {
 public:


  virtual ~IFaceLog_getSubDeviceGroup_presult() throw();
  std::vector<int32_t> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_getSubDeviceGroup_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class IFaceLog_getSubPersonGroup_args {
 public:

  IFaceLog_getSubPersonGroup_args(const IFaceLog_getSubPersonGroup_args&);
  IFaceLog_getSubPersonGroup_args(IFaceLog_getSubPersonGroup_args&&);
  IFaceLog_getSubPersonGroup_args& operator=(const IFaceLog_getSubPersonGroup_args&);
  IFaceLog_getSubPersonGroup_args& operator=(IFaceLog_getSubPersonGroup_args&&);
  IFaceLog_getSubPersonGroup_args() : personGroupId(0) {
  }

  virtual ~IFaceLog_getSubPersonGroup_args() throw();
  int32_t personGroupId;

  void __set_personGroupId(const int32_t val);

  bool operator == (const IFaceLog_getSubPersonGroup_args & rhs) const
  {
    if (!(personGroupId == rhs.personGroupId))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getSubPersonGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getSubPersonGroup_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_getSubPersonGroup_pargs {
 public:


  virtual ~IFaceLog_getSubPersonGroup_pargs() throw();
  const int32_t* personGroupId;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getSubPersonGroup_result__isset {
  _IFaceLog_getSubPersonGroup_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getSubPersonGroup_result__isset;

class IFaceLog_getSubPersonGroup_result {
 public:

  IFaceLog_getSubPersonGroup_result(const IFaceLog_getSubPersonGroup_result&);
  IFaceLog_getSubPersonGroup_result(IFaceLog_getSubPersonGroup_result&&);
  IFaceLog_getSubPersonGroup_result& operator=(const IFaceLog_getSubPersonGroup_result&);
  IFaceLog_getSubPersonGroup_result& operator=(IFaceLog_getSubPersonGroup_result&&);
  IFaceLog_getSubPersonGroup_result() {
  }

  virtual ~IFaceLog_getSubPersonGroup_result() throw();
  std::vector<int32_t>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_getSubPersonGroup_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_getSubPersonGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_getSubPersonGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_getSubPersonGroup_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_getSubPersonGroup_presult__isset {
  _IFaceLog_getSubPersonGroup_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_getSubPersonGroup_presult__isset;

class IFaceLog_getSubPersonGroup_presult {
 public:


  virtual ~IFaceLog_getSubPersonGroup_presult() throw();
  std::vector<int32_t> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_getSubPersonGroup_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class IFaceLog_isDisable_args {
 public:

  IFaceLog_isDisable_args(const IFaceLog_isDisable_args&);
  IFaceLog_isDisable_args(IFaceLog_isDisable_args&&);
  IFaceLog_isDisable_args& operator=(const IFaceLog_isDisable_args&);
  IFaceLog_isDisable_args& operator=(IFaceLog_isDisable_args&&);
  IFaceLog_isDisable_args() : personId(0) {
  }

  virtual ~IFaceLog_isDisable_args() throw();
  int32_t personId;

  void __set_personId(const int32_t val);

  bool operator == (const IFaceLog_isDisable_args & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_isDisable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_isDisable_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_isDisable_pargs {
 public:


  virtual ~IFaceLog_isDisable_pargs() throw();
  const int32_t* personId;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_isDisable_result__isset {
  _IFaceLog_isDisable_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_isDisable_result__isset;

class IFaceLog_isDisable_result {
 public:

  IFaceLog_isDisable_result(const IFaceLog_isDisable_result&);
  IFaceLog_isDisable_result(IFaceLog_isDisable_result&&);
  IFaceLog_isDisable_result& operator=(const IFaceLog_isDisable_result&);
  IFaceLog_isDisable_result& operator=(IFaceLog_isDisable_result&&);
  IFaceLog_isDisable_result() : success(0) {
  }

  virtual ~IFaceLog_isDisable_result() throw();
  bool success;
  ServiceRuntimeException ex1;

  _IFaceLog_isDisable_result__isset __isset;

  void __set_success(const bool val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_isDisable_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_isDisable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_isDisable_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_isDisable_presult__isset {
  _IFaceLog_isDisable_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_isDisable_presult__isset;

class IFaceLog_isDisable_presult {
 public:


  virtual ~IFaceLog_isDisable_presult() throw();
  bool* success;
  ServiceRuntimeException ex1;

  _IFaceLog_isDisable_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class IFaceLog_isLocal_args {
 public:

  IFaceLog_isLocal_args(const IFaceLog_isLocal_args&);
  IFaceLog_isLocal_args(IFaceLog_isLocal_args&&);
  IFaceLog_isLocal_args& operator=(const IFaceLog_isLocal_args&);
  IFaceLog_isLocal_args& operator=(IFaceLog_isLocal_args&&);
  IFaceLog_isLocal_args() {
  }

  virtual ~IFaceLog_isLocal_args() throw();

  bool operator == (const IFaceLog_isLocal_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const IFaceLog_isLocal_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_isLocal_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_isLocal_pargs {
 public:


  virtual ~IFaceLog_isLocal_pargs() throw();

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_isLocal_result__isset {
  _IFaceLog_isLocal_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_isLocal_result__isset;

class IFaceLog_isLocal_result {
 public:

  IFaceLog_isLocal_result(const IFaceLog_isLocal_result&);
  IFaceLog_isLocal_result(IFaceLog_isLocal_result&&);
  IFaceLog_isLocal_result& operator=(const IFaceLog_isLocal_result&);
  IFaceLog_isLocal_result& operator=(IFaceLog_isLocal_result&&);
  IFaceLog_isLocal_result() : success(0) {
  }

  virtual ~IFaceLog_isLocal_result() throw();
  bool success;
  ServiceRuntimeException ex1;

  _IFaceLog_isLocal_result__isset __isset;

  void __set_success(const bool val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_isLocal_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_isLocal_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_isLocal_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_isLocal_presult__isset {
  _IFaceLog_isLocal_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_isLocal_presult__isset;

class IFaceLog_isLocal_presult {
 public:


  virtual ~IFaceLog_isLocal_presult() throw();
  bool* success;
  ServiceRuntimeException ex1;

  _IFaceLog_isLocal_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_isValidAckChannel_args__isset {
  _IFaceLog_isValidAckChannel_args__isset() : ackChannel(false) {}
  bool ackChannel :1;
} _IFaceLog_isValidAckChannel_args__isset;

class IFaceLog_isValidAckChannel_args {
 public:

  IFaceLog_isValidAckChannel_args(const IFaceLog_isValidAckChannel_args&);
  IFaceLog_isValidAckChannel_args(IFaceLog_isValidAckChannel_args&&);
  IFaceLog_isValidAckChannel_args& operator=(const IFaceLog_isValidAckChannel_args&);
  IFaceLog_isValidAckChannel_args& operator=(IFaceLog_isValidAckChannel_args&&);
  IFaceLog_isValidAckChannel_args() : ackChannel() {
  }

  virtual ~IFaceLog_isValidAckChannel_args() throw();
  std::string ackChannel;

  _IFaceLog_isValidAckChannel_args__isset __isset;

  void __set_ackChannel(const std::string& val);

  bool operator == (const IFaceLog_isValidAckChannel_args & rhs) const
  {
    if (!(ackChannel == rhs.ackChannel))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_isValidAckChannel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_isValidAckChannel_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_isValidAckChannel_pargs {
 public:


  virtual ~IFaceLog_isValidAckChannel_pargs() throw();
  const std::string* ackChannel;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_isValidAckChannel_result__isset {
  _IFaceLog_isValidAckChannel_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_isValidAckChannel_result__isset;

class IFaceLog_isValidAckChannel_result {
 public:

  IFaceLog_isValidAckChannel_result(const IFaceLog_isValidAckChannel_result&);
  IFaceLog_isValidAckChannel_result(IFaceLog_isValidAckChannel_result&&);
  IFaceLog_isValidAckChannel_result& operator=(const IFaceLog_isValidAckChannel_result&);
  IFaceLog_isValidAckChannel_result& operator=(IFaceLog_isValidAckChannel_result&&);
  IFaceLog_isValidAckChannel_result() : success(0) {
  }

  virtual ~IFaceLog_isValidAckChannel_result() throw();
  bool success;
  ServiceRuntimeException ex1;

  _IFaceLog_isValidAckChannel_result__isset __isset;

  void __set_success(const bool val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_isValidAckChannel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_isValidAckChannel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_isValidAckChannel_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_isValidAckChannel_presult__isset {
  _IFaceLog_isValidAckChannel_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_isValidAckChannel_presult__isset;

class IFaceLog_isValidAckChannel_presult {
 public:


  virtual ~IFaceLog_isValidAckChannel_presult() throw();
  bool* success;
  ServiceRuntimeException ex1;

  _IFaceLog_isValidAckChannel_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class IFaceLog_isValidCmdSn_args {
 public:

  IFaceLog_isValidCmdSn_args(const IFaceLog_isValidCmdSn_args&);
  IFaceLog_isValidCmdSn_args(IFaceLog_isValidCmdSn_args&&);
  IFaceLog_isValidCmdSn_args& operator=(const IFaceLog_isValidCmdSn_args&);
  IFaceLog_isValidCmdSn_args& operator=(IFaceLog_isValidCmdSn_args&&);
  IFaceLog_isValidCmdSn_args() : cmdSn(0) {
  }

  virtual ~IFaceLog_isValidCmdSn_args() throw();
  int32_t cmdSn;

  void __set_cmdSn(const int32_t val);

  bool operator == (const IFaceLog_isValidCmdSn_args & rhs) const
  {
    if (!(cmdSn == rhs.cmdSn))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_isValidCmdSn_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_isValidCmdSn_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_isValidCmdSn_pargs {
 public:


  virtual ~IFaceLog_isValidCmdSn_pargs() throw();
  const int32_t* cmdSn;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_isValidCmdSn_result__isset {
  _IFaceLog_isValidCmdSn_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_isValidCmdSn_result__isset;

class IFaceLog_isValidCmdSn_result {
 public:

  IFaceLog_isValidCmdSn_result(const IFaceLog_isValidCmdSn_result&);
  IFaceLog_isValidCmdSn_result(IFaceLog_isValidCmdSn_result&&);
  IFaceLog_isValidCmdSn_result& operator=(const IFaceLog_isValidCmdSn_result&);
  IFaceLog_isValidCmdSn_result& operator=(IFaceLog_isValidCmdSn_result&&);
  IFaceLog_isValidCmdSn_result() : success(0) {
  }

  virtual ~IFaceLog_isValidCmdSn_result() throw();
  bool success;
  ServiceRuntimeException ex1;

  _IFaceLog_isValidCmdSn_result__isset __isset;

  void __set_success(const bool val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_isValidCmdSn_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_isValidCmdSn_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_isValidCmdSn_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_isValidCmdSn_presult__isset {
  _IFaceLog_isValidCmdSn_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_isValidCmdSn_presult__isset;

class IFaceLog_isValidCmdSn_presult {
 public:


  virtual ~IFaceLog_isValidCmdSn_presult() throw();
  bool* success;
  ServiceRuntimeException ex1;

  _IFaceLog_isValidCmdSn_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_isValidDeviceToken_args__isset {
  _IFaceLog_isValidDeviceToken_args__isset() : token(false) {}
  bool token :1;
} _IFaceLog_isValidDeviceToken_args__isset;

class IFaceLog_isValidDeviceToken_args {
 public:

  IFaceLog_isValidDeviceToken_args(const IFaceLog_isValidDeviceToken_args&);
  IFaceLog_isValidDeviceToken_args(IFaceLog_isValidDeviceToken_args&&);
  IFaceLog_isValidDeviceToken_args& operator=(const IFaceLog_isValidDeviceToken_args&);
  IFaceLog_isValidDeviceToken_args& operator=(IFaceLog_isValidDeviceToken_args&&);
  IFaceLog_isValidDeviceToken_args() {
  }

  virtual ~IFaceLog_isValidDeviceToken_args() throw();
  Token token;

  _IFaceLog_isValidDeviceToken_args__isset __isset;

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_isValidDeviceToken_args & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_isValidDeviceToken_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_isValidDeviceToken_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_isValidDeviceToken_pargs {
 public:


  virtual ~IFaceLog_isValidDeviceToken_pargs() throw();
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_isValidDeviceToken_result__isset {
  _IFaceLog_isValidDeviceToken_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_isValidDeviceToken_result__isset;

class IFaceLog_isValidDeviceToken_result {
 public:

  IFaceLog_isValidDeviceToken_result(const IFaceLog_isValidDeviceToken_result&);
  IFaceLog_isValidDeviceToken_result(IFaceLog_isValidDeviceToken_result&&);
  IFaceLog_isValidDeviceToken_result& operator=(const IFaceLog_isValidDeviceToken_result&);
  IFaceLog_isValidDeviceToken_result& operator=(IFaceLog_isValidDeviceToken_result&&);
  IFaceLog_isValidDeviceToken_result() : success(0) {
  }

  virtual ~IFaceLog_isValidDeviceToken_result() throw();
  bool success;
  ServiceRuntimeException ex1;

  _IFaceLog_isValidDeviceToken_result__isset __isset;

  void __set_success(const bool val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_isValidDeviceToken_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_isValidDeviceToken_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_isValidDeviceToken_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_isValidDeviceToken_presult__isset {
  _IFaceLog_isValidDeviceToken_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_isValidDeviceToken_presult__isset;

class IFaceLog_isValidDeviceToken_presult {
 public:


  virtual ~IFaceLog_isValidDeviceToken_presult() throw();
  bool* success;
  ServiceRuntimeException ex1;

  _IFaceLog_isValidDeviceToken_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_isValidPassword_args__isset {
  _IFaceLog_isValidPassword_args__isset() : userId(false), password(false) {}
  bool userId :1;
  bool password :1;
} _IFaceLog_isValidPassword_args__isset;

class IFaceLog_isValidPassword_args {
 public:

  IFaceLog_isValidPassword_args(const IFaceLog_isValidPassword_args&);
  IFaceLog_isValidPassword_args(IFaceLog_isValidPassword_args&&);
  IFaceLog_isValidPassword_args& operator=(const IFaceLog_isValidPassword_args&);
  IFaceLog_isValidPassword_args& operator=(IFaceLog_isValidPassword_args&&);
  IFaceLog_isValidPassword_args() : userId(), password(), isMd5(0) {
  }

  virtual ~IFaceLog_isValidPassword_args() throw();
  std::string userId;
  std::string password;
  bool isMd5;

  _IFaceLog_isValidPassword_args__isset __isset;

  void __set_userId(const std::string& val);

  void __set_password(const std::string& val);

  void __set_isMd5(const bool val);

  bool operator == (const IFaceLog_isValidPassword_args & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(isMd5 == rhs.isMd5))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_isValidPassword_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_isValidPassword_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_isValidPassword_pargs {
 public:


  virtual ~IFaceLog_isValidPassword_pargs() throw();
  const std::string* userId;
  const std::string* password;
  const bool* isMd5;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_isValidPassword_result__isset {
  _IFaceLog_isValidPassword_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_isValidPassword_result__isset;

class IFaceLog_isValidPassword_result {
 public:

  IFaceLog_isValidPassword_result(const IFaceLog_isValidPassword_result&);
  IFaceLog_isValidPassword_result(IFaceLog_isValidPassword_result&&);
  IFaceLog_isValidPassword_result& operator=(const IFaceLog_isValidPassword_result&);
  IFaceLog_isValidPassword_result& operator=(IFaceLog_isValidPassword_result&&);
  IFaceLog_isValidPassword_result() : success(0) {
  }

  virtual ~IFaceLog_isValidPassword_result() throw();
  bool success;
  ServiceRuntimeException ex1;

  _IFaceLog_isValidPassword_result__isset __isset;

  void __set_success(const bool val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_isValidPassword_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_isValidPassword_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_isValidPassword_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_isValidPassword_presult__isset {
  _IFaceLog_isValidPassword_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_isValidPassword_presult__isset;

class IFaceLog_isValidPassword_presult {
 public:


  virtual ~IFaceLog_isValidPassword_presult() throw();
  bool* success;
  ServiceRuntimeException ex1;

  _IFaceLog_isValidPassword_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_isValidPersonToken_args__isset {
  _IFaceLog_isValidPersonToken_args__isset() : token(false) {}
  bool token :1;
} _IFaceLog_isValidPersonToken_args__isset;

class IFaceLog_isValidPersonToken_args {
 public:

  IFaceLog_isValidPersonToken_args(const IFaceLog_isValidPersonToken_args&);
  IFaceLog_isValidPersonToken_args(IFaceLog_isValidPersonToken_args&&);
  IFaceLog_isValidPersonToken_args& operator=(const IFaceLog_isValidPersonToken_args&);
  IFaceLog_isValidPersonToken_args& operator=(IFaceLog_isValidPersonToken_args&&);
  IFaceLog_isValidPersonToken_args() {
  }

  virtual ~IFaceLog_isValidPersonToken_args() throw();
  Token token;

  _IFaceLog_isValidPersonToken_args__isset __isset;

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_isValidPersonToken_args & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_isValidPersonToken_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_isValidPersonToken_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_isValidPersonToken_pargs {
 public:


  virtual ~IFaceLog_isValidPersonToken_pargs() throw();
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_isValidPersonToken_result__isset {
  _IFaceLog_isValidPersonToken_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_isValidPersonToken_result__isset;

class IFaceLog_isValidPersonToken_result {
 public:

  IFaceLog_isValidPersonToken_result(const IFaceLog_isValidPersonToken_result&);
  IFaceLog_isValidPersonToken_result(IFaceLog_isValidPersonToken_result&&);
  IFaceLog_isValidPersonToken_result& operator=(const IFaceLog_isValidPersonToken_result&);
  IFaceLog_isValidPersonToken_result& operator=(IFaceLog_isValidPersonToken_result&&);
  IFaceLog_isValidPersonToken_result() : success(0) {
  }

  virtual ~IFaceLog_isValidPersonToken_result() throw();
  bool success;
  ServiceRuntimeException ex1;

  _IFaceLog_isValidPersonToken_result__isset __isset;

  void __set_success(const bool val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_isValidPersonToken_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_isValidPersonToken_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_isValidPersonToken_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_isValidPersonToken_presult__isset {
  _IFaceLog_isValidPersonToken_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_isValidPersonToken_presult__isset;

class IFaceLog_isValidPersonToken_presult {
 public:


  virtual ~IFaceLog_isValidPersonToken_presult() throw();
  bool* success;
  ServiceRuntimeException ex1;

  _IFaceLog_isValidPersonToken_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_isValidRootToken_args__isset {
  _IFaceLog_isValidRootToken_args__isset() : token(false) {}
  bool token :1;
} _IFaceLog_isValidRootToken_args__isset;

class IFaceLog_isValidRootToken_args {
 public:

  IFaceLog_isValidRootToken_args(const IFaceLog_isValidRootToken_args&);
  IFaceLog_isValidRootToken_args(IFaceLog_isValidRootToken_args&&);
  IFaceLog_isValidRootToken_args& operator=(const IFaceLog_isValidRootToken_args&);
  IFaceLog_isValidRootToken_args& operator=(IFaceLog_isValidRootToken_args&&);
  IFaceLog_isValidRootToken_args() {
  }

  virtual ~IFaceLog_isValidRootToken_args() throw();
  Token token;

  _IFaceLog_isValidRootToken_args__isset __isset;

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_isValidRootToken_args & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_isValidRootToken_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_isValidRootToken_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_isValidRootToken_pargs {
 public:


  virtual ~IFaceLog_isValidRootToken_pargs() throw();
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_isValidRootToken_result__isset {
  _IFaceLog_isValidRootToken_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_isValidRootToken_result__isset;

class IFaceLog_isValidRootToken_result {
 public:

  IFaceLog_isValidRootToken_result(const IFaceLog_isValidRootToken_result&);
  IFaceLog_isValidRootToken_result(IFaceLog_isValidRootToken_result&&);
  IFaceLog_isValidRootToken_result& operator=(const IFaceLog_isValidRootToken_result&);
  IFaceLog_isValidRootToken_result& operator=(IFaceLog_isValidRootToken_result&&);
  IFaceLog_isValidRootToken_result() : success(0) {
  }

  virtual ~IFaceLog_isValidRootToken_result() throw();
  bool success;
  ServiceRuntimeException ex1;

  _IFaceLog_isValidRootToken_result__isset __isset;

  void __set_success(const bool val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_isValidRootToken_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_isValidRootToken_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_isValidRootToken_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_isValidRootToken_presult__isset {
  _IFaceLog_isValidRootToken_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_isValidRootToken_presult__isset;

class IFaceLog_isValidRootToken_presult {
 public:


  virtual ~IFaceLog_isValidRootToken_presult() throw();
  bool* success;
  ServiceRuntimeException ex1;

  _IFaceLog_isValidRootToken_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_isValidToken_args__isset {
  _IFaceLog_isValidToken_args__isset() : token(false) {}
  bool token :1;
} _IFaceLog_isValidToken_args__isset;

class IFaceLog_isValidToken_args {
 public:

  IFaceLog_isValidToken_args(const IFaceLog_isValidToken_args&);
  IFaceLog_isValidToken_args(IFaceLog_isValidToken_args&&);
  IFaceLog_isValidToken_args& operator=(const IFaceLog_isValidToken_args&);
  IFaceLog_isValidToken_args& operator=(IFaceLog_isValidToken_args&&);
  IFaceLog_isValidToken_args() {
  }

  virtual ~IFaceLog_isValidToken_args() throw();
  Token token;

  _IFaceLog_isValidToken_args__isset __isset;

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_isValidToken_args & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_isValidToken_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_isValidToken_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_isValidToken_pargs {
 public:


  virtual ~IFaceLog_isValidToken_pargs() throw();
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_isValidToken_result__isset {
  _IFaceLog_isValidToken_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_isValidToken_result__isset;

class IFaceLog_isValidToken_result {
 public:

  IFaceLog_isValidToken_result(const IFaceLog_isValidToken_result&);
  IFaceLog_isValidToken_result(IFaceLog_isValidToken_result&&);
  IFaceLog_isValidToken_result& operator=(const IFaceLog_isValidToken_result&);
  IFaceLog_isValidToken_result& operator=(IFaceLog_isValidToken_result&&);
  IFaceLog_isValidToken_result() : success(0) {
  }

  virtual ~IFaceLog_isValidToken_result() throw();
  bool success;
  ServiceRuntimeException ex1;

  _IFaceLog_isValidToken_result__isset __isset;

  void __set_success(const bool val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_isValidToken_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_isValidToken_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_isValidToken_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_isValidToken_presult__isset {
  _IFaceLog_isValidToken_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_isValidToken_presult__isset;

class IFaceLog_isValidToken_presult {
 public:


  virtual ~IFaceLog_isValidToken_presult() throw();
  bool* success;
  ServiceRuntimeException ex1;

  _IFaceLog_isValidToken_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_isValidUserToken_args__isset {
  _IFaceLog_isValidUserToken_args__isset() : token(false) {}
  bool token :1;
} _IFaceLog_isValidUserToken_args__isset;

class IFaceLog_isValidUserToken_args {
 public:

  IFaceLog_isValidUserToken_args(const IFaceLog_isValidUserToken_args&);
  IFaceLog_isValidUserToken_args(IFaceLog_isValidUserToken_args&&);
  IFaceLog_isValidUserToken_args& operator=(const IFaceLog_isValidUserToken_args&);
  IFaceLog_isValidUserToken_args& operator=(IFaceLog_isValidUserToken_args&&);
  IFaceLog_isValidUserToken_args() {
  }

  virtual ~IFaceLog_isValidUserToken_args() throw();
  Token token;

  _IFaceLog_isValidUserToken_args__isset __isset;

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_isValidUserToken_args & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_isValidUserToken_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_isValidUserToken_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_isValidUserToken_pargs {
 public:


  virtual ~IFaceLog_isValidUserToken_pargs() throw();
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_isValidUserToken_result__isset {
  _IFaceLog_isValidUserToken_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_isValidUserToken_result__isset;

class IFaceLog_isValidUserToken_result {
 public:

  IFaceLog_isValidUserToken_result(const IFaceLog_isValidUserToken_result&);
  IFaceLog_isValidUserToken_result(IFaceLog_isValidUserToken_result&&);
  IFaceLog_isValidUserToken_result& operator=(const IFaceLog_isValidUserToken_result&);
  IFaceLog_isValidUserToken_result& operator=(IFaceLog_isValidUserToken_result&&);
  IFaceLog_isValidUserToken_result() : success(0) {
  }

  virtual ~IFaceLog_isValidUserToken_result() throw();
  bool success;
  ServiceRuntimeException ex1;

  _IFaceLog_isValidUserToken_result__isset __isset;

  void __set_success(const bool val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_isValidUserToken_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_isValidUserToken_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_isValidUserToken_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_isValidUserToken_presult__isset {
  _IFaceLog_isValidUserToken_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_isValidUserToken_presult__isset;

class IFaceLog_isValidUserToken_presult {
 public:


  virtual ~IFaceLog_isValidUserToken_presult() throw();
  bool* success;
  ServiceRuntimeException ex1;

  _IFaceLog_isValidUserToken_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class IFaceLog_listOfParentForDeviceGroup_args {
 public:

  IFaceLog_listOfParentForDeviceGroup_args(const IFaceLog_listOfParentForDeviceGroup_args&);
  IFaceLog_listOfParentForDeviceGroup_args(IFaceLog_listOfParentForDeviceGroup_args&&);
  IFaceLog_listOfParentForDeviceGroup_args& operator=(const IFaceLog_listOfParentForDeviceGroup_args&);
  IFaceLog_listOfParentForDeviceGroup_args& operator=(IFaceLog_listOfParentForDeviceGroup_args&&);
  IFaceLog_listOfParentForDeviceGroup_args() : deviceGroupId(0) {
  }

  virtual ~IFaceLog_listOfParentForDeviceGroup_args() throw();
  int32_t deviceGroupId;

  void __set_deviceGroupId(const int32_t val);

  bool operator == (const IFaceLog_listOfParentForDeviceGroup_args & rhs) const
  {
    if (!(deviceGroupId == rhs.deviceGroupId))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_listOfParentForDeviceGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_listOfParentForDeviceGroup_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_listOfParentForDeviceGroup_pargs {
 public:


  virtual ~IFaceLog_listOfParentForDeviceGroup_pargs() throw();
  const int32_t* deviceGroupId;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_listOfParentForDeviceGroup_result__isset {
  _IFaceLog_listOfParentForDeviceGroup_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_listOfParentForDeviceGroup_result__isset;

class IFaceLog_listOfParentForDeviceGroup_result {
 public:

  IFaceLog_listOfParentForDeviceGroup_result(const IFaceLog_listOfParentForDeviceGroup_result&);
  IFaceLog_listOfParentForDeviceGroup_result(IFaceLog_listOfParentForDeviceGroup_result&&);
  IFaceLog_listOfParentForDeviceGroup_result& operator=(const IFaceLog_listOfParentForDeviceGroup_result&);
  IFaceLog_listOfParentForDeviceGroup_result& operator=(IFaceLog_listOfParentForDeviceGroup_result&&);
  IFaceLog_listOfParentForDeviceGroup_result() {
  }

  virtual ~IFaceLog_listOfParentForDeviceGroup_result() throw();
  std::vector<int32_t>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_listOfParentForDeviceGroup_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_listOfParentForDeviceGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_listOfParentForDeviceGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_listOfParentForDeviceGroup_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_listOfParentForDeviceGroup_presult__isset {
  _IFaceLog_listOfParentForDeviceGroup_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_listOfParentForDeviceGroup_presult__isset;

class IFaceLog_listOfParentForDeviceGroup_presult {
 public:


  virtual ~IFaceLog_listOfParentForDeviceGroup_presult() throw();
  std::vector<int32_t> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_listOfParentForDeviceGroup_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class IFaceLog_listOfParentForPersonGroup_args {
 public:

  IFaceLog_listOfParentForPersonGroup_args(const IFaceLog_listOfParentForPersonGroup_args&);
  IFaceLog_listOfParentForPersonGroup_args(IFaceLog_listOfParentForPersonGroup_args&&);
  IFaceLog_listOfParentForPersonGroup_args& operator=(const IFaceLog_listOfParentForPersonGroup_args&);
  IFaceLog_listOfParentForPersonGroup_args& operator=(IFaceLog_listOfParentForPersonGroup_args&&);
  IFaceLog_listOfParentForPersonGroup_args() : personGroupId(0) {
  }

  virtual ~IFaceLog_listOfParentForPersonGroup_args() throw();
  int32_t personGroupId;

  void __set_personGroupId(const int32_t val);

  bool operator == (const IFaceLog_listOfParentForPersonGroup_args & rhs) const
  {
    if (!(personGroupId == rhs.personGroupId))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_listOfParentForPersonGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_listOfParentForPersonGroup_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_listOfParentForPersonGroup_pargs {
 public:


  virtual ~IFaceLog_listOfParentForPersonGroup_pargs() throw();
  const int32_t* personGroupId;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_listOfParentForPersonGroup_result__isset {
  _IFaceLog_listOfParentForPersonGroup_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_listOfParentForPersonGroup_result__isset;

class IFaceLog_listOfParentForPersonGroup_result {
 public:

  IFaceLog_listOfParentForPersonGroup_result(const IFaceLog_listOfParentForPersonGroup_result&);
  IFaceLog_listOfParentForPersonGroup_result(IFaceLog_listOfParentForPersonGroup_result&&);
  IFaceLog_listOfParentForPersonGroup_result& operator=(const IFaceLog_listOfParentForPersonGroup_result&);
  IFaceLog_listOfParentForPersonGroup_result& operator=(IFaceLog_listOfParentForPersonGroup_result&&);
  IFaceLog_listOfParentForPersonGroup_result() {
  }

  virtual ~IFaceLog_listOfParentForPersonGroup_result() throw();
  std::vector<int32_t>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_listOfParentForPersonGroup_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_listOfParentForPersonGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_listOfParentForPersonGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_listOfParentForPersonGroup_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_listOfParentForPersonGroup_presult__isset {
  _IFaceLog_listOfParentForPersonGroup_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_listOfParentForPersonGroup_presult__isset;

class IFaceLog_listOfParentForPersonGroup_presult {
 public:


  virtual ~IFaceLog_listOfParentForPersonGroup_presult() throw();
  std::vector<int32_t> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_listOfParentForPersonGroup_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class IFaceLog_loadAllPerson_args {
 public:

  IFaceLog_loadAllPerson_args(const IFaceLog_loadAllPerson_args&);
  IFaceLog_loadAllPerson_args(IFaceLog_loadAllPerson_args&&);
  IFaceLog_loadAllPerson_args& operator=(const IFaceLog_loadAllPerson_args&);
  IFaceLog_loadAllPerson_args& operator=(IFaceLog_loadAllPerson_args&&);
  IFaceLog_loadAllPerson_args() {
  }

  virtual ~IFaceLog_loadAllPerson_args() throw();

  bool operator == (const IFaceLog_loadAllPerson_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const IFaceLog_loadAllPerson_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadAllPerson_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_loadAllPerson_pargs {
 public:


  virtual ~IFaceLog_loadAllPerson_pargs() throw();

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadAllPerson_result__isset {
  _IFaceLog_loadAllPerson_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadAllPerson_result__isset;

class IFaceLog_loadAllPerson_result {
 public:

  IFaceLog_loadAllPerson_result(const IFaceLog_loadAllPerson_result&);
  IFaceLog_loadAllPerson_result(IFaceLog_loadAllPerson_result&&);
  IFaceLog_loadAllPerson_result& operator=(const IFaceLog_loadAllPerson_result&);
  IFaceLog_loadAllPerson_result& operator=(IFaceLog_loadAllPerson_result&&);
  IFaceLog_loadAllPerson_result() {
  }

  virtual ~IFaceLog_loadAllPerson_result() throw();
  std::vector<int32_t>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadAllPerson_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_loadAllPerson_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadAllPerson_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadAllPerson_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadAllPerson_presult__isset {
  _IFaceLog_loadAllPerson_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadAllPerson_presult__isset;

class IFaceLog_loadAllPerson_presult {
 public:


  virtual ~IFaceLog_loadAllPerson_presult() throw();
  std::vector<int32_t> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadAllPerson_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_loadDeviceByWhere_args__isset {
  _IFaceLog_loadDeviceByWhere_args__isset() : where(false) {}
  bool where :1;
} _IFaceLog_loadDeviceByWhere_args__isset;

class IFaceLog_loadDeviceByWhere_args {
 public:

  IFaceLog_loadDeviceByWhere_args(const IFaceLog_loadDeviceByWhere_args&);
  IFaceLog_loadDeviceByWhere_args(IFaceLog_loadDeviceByWhere_args&&);
  IFaceLog_loadDeviceByWhere_args& operator=(const IFaceLog_loadDeviceByWhere_args&);
  IFaceLog_loadDeviceByWhere_args& operator=(IFaceLog_loadDeviceByWhere_args&&);
  IFaceLog_loadDeviceByWhere_args() : where(), startRow(0), numRows(0) {
  }

  virtual ~IFaceLog_loadDeviceByWhere_args() throw();
  std::string where;
  int32_t startRow;
  int32_t numRows;

  _IFaceLog_loadDeviceByWhere_args__isset __isset;

  void __set_where(const std::string& val);

  void __set_startRow(const int32_t val);

  void __set_numRows(const int32_t val);

  bool operator == (const IFaceLog_loadDeviceByWhere_args & rhs) const
  {
    if (!(where == rhs.where))
      return false;
    if (!(startRow == rhs.startRow))
      return false;
    if (!(numRows == rhs.numRows))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadDeviceByWhere_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadDeviceByWhere_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_loadDeviceByWhere_pargs {
 public:


  virtual ~IFaceLog_loadDeviceByWhere_pargs() throw();
  const std::string* where;
  const int32_t* startRow;
  const int32_t* numRows;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadDeviceByWhere_result__isset {
  _IFaceLog_loadDeviceByWhere_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadDeviceByWhere_result__isset;

class IFaceLog_loadDeviceByWhere_result {
 public:

  IFaceLog_loadDeviceByWhere_result(const IFaceLog_loadDeviceByWhere_result&);
  IFaceLog_loadDeviceByWhere_result(IFaceLog_loadDeviceByWhere_result&&);
  IFaceLog_loadDeviceByWhere_result& operator=(const IFaceLog_loadDeviceByWhere_result&);
  IFaceLog_loadDeviceByWhere_result& operator=(IFaceLog_loadDeviceByWhere_result&&);
  IFaceLog_loadDeviceByWhere_result() {
  }

  virtual ~IFaceLog_loadDeviceByWhere_result() throw();
  std::vector<DeviceBean>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadDeviceByWhere_result__isset __isset;

  void __set_success(const std::vector<DeviceBean> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_loadDeviceByWhere_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadDeviceByWhere_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadDeviceByWhere_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadDeviceByWhere_presult__isset {
  _IFaceLog_loadDeviceByWhere_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadDeviceByWhere_presult__isset;

class IFaceLog_loadDeviceByWhere_presult {
 public:


  virtual ~IFaceLog_loadDeviceByWhere_presult() throw();
  std::vector<DeviceBean> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadDeviceByWhere_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_loadDeviceGroupByWhere_args__isset {
  _IFaceLog_loadDeviceGroupByWhere_args__isset() : where(false) {}
  bool where :1;
} _IFaceLog_loadDeviceGroupByWhere_args__isset;

class IFaceLog_loadDeviceGroupByWhere_args {
 public:

  IFaceLog_loadDeviceGroupByWhere_args(const IFaceLog_loadDeviceGroupByWhere_args&);
  IFaceLog_loadDeviceGroupByWhere_args(IFaceLog_loadDeviceGroupByWhere_args&&);
  IFaceLog_loadDeviceGroupByWhere_args& operator=(const IFaceLog_loadDeviceGroupByWhere_args&);
  IFaceLog_loadDeviceGroupByWhere_args& operator=(IFaceLog_loadDeviceGroupByWhere_args&&);
  IFaceLog_loadDeviceGroupByWhere_args() : where(), startRow(0), numRows(0) {
  }

  virtual ~IFaceLog_loadDeviceGroupByWhere_args() throw();
  std::string where;
  int32_t startRow;
  int32_t numRows;

  _IFaceLog_loadDeviceGroupByWhere_args__isset __isset;

  void __set_where(const std::string& val);

  void __set_startRow(const int32_t val);

  void __set_numRows(const int32_t val);

  bool operator == (const IFaceLog_loadDeviceGroupByWhere_args & rhs) const
  {
    if (!(where == rhs.where))
      return false;
    if (!(startRow == rhs.startRow))
      return false;
    if (!(numRows == rhs.numRows))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadDeviceGroupByWhere_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadDeviceGroupByWhere_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_loadDeviceGroupByWhere_pargs {
 public:


  virtual ~IFaceLog_loadDeviceGroupByWhere_pargs() throw();
  const std::string* where;
  const int32_t* startRow;
  const int32_t* numRows;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadDeviceGroupByWhere_result__isset {
  _IFaceLog_loadDeviceGroupByWhere_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadDeviceGroupByWhere_result__isset;

class IFaceLog_loadDeviceGroupByWhere_result {
 public:

  IFaceLog_loadDeviceGroupByWhere_result(const IFaceLog_loadDeviceGroupByWhere_result&);
  IFaceLog_loadDeviceGroupByWhere_result(IFaceLog_loadDeviceGroupByWhere_result&&);
  IFaceLog_loadDeviceGroupByWhere_result& operator=(const IFaceLog_loadDeviceGroupByWhere_result&);
  IFaceLog_loadDeviceGroupByWhere_result& operator=(IFaceLog_loadDeviceGroupByWhere_result&&);
  IFaceLog_loadDeviceGroupByWhere_result() {
  }

  virtual ~IFaceLog_loadDeviceGroupByWhere_result() throw();
  std::vector<int32_t>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadDeviceGroupByWhere_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_loadDeviceGroupByWhere_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadDeviceGroupByWhere_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadDeviceGroupByWhere_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadDeviceGroupByWhere_presult__isset {
  _IFaceLog_loadDeviceGroupByWhere_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadDeviceGroupByWhere_presult__isset;

class IFaceLog_loadDeviceGroupByWhere_presult {
 public:


  virtual ~IFaceLog_loadDeviceGroupByWhere_presult() throw();
  std::vector<int32_t> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadDeviceGroupByWhere_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_loadDeviceGroupIdByWhere_args__isset {
  _IFaceLog_loadDeviceGroupIdByWhere_args__isset() : where(false) {}
  bool where :1;
} _IFaceLog_loadDeviceGroupIdByWhere_args__isset;

class IFaceLog_loadDeviceGroupIdByWhere_args {
 public:

  IFaceLog_loadDeviceGroupIdByWhere_args(const IFaceLog_loadDeviceGroupIdByWhere_args&);
  IFaceLog_loadDeviceGroupIdByWhere_args(IFaceLog_loadDeviceGroupIdByWhere_args&&);
  IFaceLog_loadDeviceGroupIdByWhere_args& operator=(const IFaceLog_loadDeviceGroupIdByWhere_args&);
  IFaceLog_loadDeviceGroupIdByWhere_args& operator=(IFaceLog_loadDeviceGroupIdByWhere_args&&);
  IFaceLog_loadDeviceGroupIdByWhere_args() : where() {
  }

  virtual ~IFaceLog_loadDeviceGroupIdByWhere_args() throw();
  std::string where;

  _IFaceLog_loadDeviceGroupIdByWhere_args__isset __isset;

  void __set_where(const std::string& val);

  bool operator == (const IFaceLog_loadDeviceGroupIdByWhere_args & rhs) const
  {
    if (!(where == rhs.where))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadDeviceGroupIdByWhere_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadDeviceGroupIdByWhere_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_loadDeviceGroupIdByWhere_pargs {
 public:


  virtual ~IFaceLog_loadDeviceGroupIdByWhere_pargs() throw();
  const std::string* where;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadDeviceGroupIdByWhere_result__isset {
  _IFaceLog_loadDeviceGroupIdByWhere_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadDeviceGroupIdByWhere_result__isset;

class IFaceLog_loadDeviceGroupIdByWhere_result {
 public:

  IFaceLog_loadDeviceGroupIdByWhere_result(const IFaceLog_loadDeviceGroupIdByWhere_result&);
  IFaceLog_loadDeviceGroupIdByWhere_result(IFaceLog_loadDeviceGroupIdByWhere_result&&);
  IFaceLog_loadDeviceGroupIdByWhere_result& operator=(const IFaceLog_loadDeviceGroupIdByWhere_result&);
  IFaceLog_loadDeviceGroupIdByWhere_result& operator=(IFaceLog_loadDeviceGroupIdByWhere_result&&);
  IFaceLog_loadDeviceGroupIdByWhere_result() {
  }

  virtual ~IFaceLog_loadDeviceGroupIdByWhere_result() throw();
  std::vector<int32_t>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadDeviceGroupIdByWhere_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_loadDeviceGroupIdByWhere_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadDeviceGroupIdByWhere_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadDeviceGroupIdByWhere_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadDeviceGroupIdByWhere_presult__isset {
  _IFaceLog_loadDeviceGroupIdByWhere_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadDeviceGroupIdByWhere_presult__isset;

class IFaceLog_loadDeviceGroupIdByWhere_presult {
 public:


  virtual ~IFaceLog_loadDeviceGroupIdByWhere_presult() throw();
  std::vector<int32_t> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadDeviceGroupIdByWhere_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_loadDeviceIdByWhere_args__isset {
  _IFaceLog_loadDeviceIdByWhere_args__isset() : where(false) {}
  bool where :1;
} _IFaceLog_loadDeviceIdByWhere_args__isset;

class IFaceLog_loadDeviceIdByWhere_args {
 public:

  IFaceLog_loadDeviceIdByWhere_args(const IFaceLog_loadDeviceIdByWhere_args&);
  IFaceLog_loadDeviceIdByWhere_args(IFaceLog_loadDeviceIdByWhere_args&&);
  IFaceLog_loadDeviceIdByWhere_args& operator=(const IFaceLog_loadDeviceIdByWhere_args&);
  IFaceLog_loadDeviceIdByWhere_args& operator=(IFaceLog_loadDeviceIdByWhere_args&&);
  IFaceLog_loadDeviceIdByWhere_args() : where() {
  }

  virtual ~IFaceLog_loadDeviceIdByWhere_args() throw();
  std::string where;

  _IFaceLog_loadDeviceIdByWhere_args__isset __isset;

  void __set_where(const std::string& val);

  bool operator == (const IFaceLog_loadDeviceIdByWhere_args & rhs) const
  {
    if (!(where == rhs.where))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadDeviceIdByWhere_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadDeviceIdByWhere_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_loadDeviceIdByWhere_pargs {
 public:


  virtual ~IFaceLog_loadDeviceIdByWhere_pargs() throw();
  const std::string* where;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadDeviceIdByWhere_result__isset {
  _IFaceLog_loadDeviceIdByWhere_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadDeviceIdByWhere_result__isset;

class IFaceLog_loadDeviceIdByWhere_result {
 public:

  IFaceLog_loadDeviceIdByWhere_result(const IFaceLog_loadDeviceIdByWhere_result&);
  IFaceLog_loadDeviceIdByWhere_result(IFaceLog_loadDeviceIdByWhere_result&&);
  IFaceLog_loadDeviceIdByWhere_result& operator=(const IFaceLog_loadDeviceIdByWhere_result&);
  IFaceLog_loadDeviceIdByWhere_result& operator=(IFaceLog_loadDeviceIdByWhere_result&&);
  IFaceLog_loadDeviceIdByWhere_result() {
  }

  virtual ~IFaceLog_loadDeviceIdByWhere_result() throw();
  std::vector<int32_t>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadDeviceIdByWhere_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_loadDeviceIdByWhere_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadDeviceIdByWhere_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadDeviceIdByWhere_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadDeviceIdByWhere_presult__isset {
  _IFaceLog_loadDeviceIdByWhere_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadDeviceIdByWhere_presult__isset;

class IFaceLog_loadDeviceIdByWhere_presult {
 public:


  virtual ~IFaceLog_loadDeviceIdByWhere_presult() throw();
  std::vector<int32_t> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadDeviceIdByWhere_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_loadDistinctIntegerColumn_args__isset {
  _IFaceLog_loadDistinctIntegerColumn_args__isset() : table(false), column(false), where(false) {}
  bool table :1;
  bool column :1;
  bool where :1;
} _IFaceLog_loadDistinctIntegerColumn_args__isset;

class IFaceLog_loadDistinctIntegerColumn_args {
 public:

  IFaceLog_loadDistinctIntegerColumn_args(const IFaceLog_loadDistinctIntegerColumn_args&);
  IFaceLog_loadDistinctIntegerColumn_args(IFaceLog_loadDistinctIntegerColumn_args&&);
  IFaceLog_loadDistinctIntegerColumn_args& operator=(const IFaceLog_loadDistinctIntegerColumn_args&);
  IFaceLog_loadDistinctIntegerColumn_args& operator=(IFaceLog_loadDistinctIntegerColumn_args&&);
  IFaceLog_loadDistinctIntegerColumn_args() : table(), column(), where() {
  }

  virtual ~IFaceLog_loadDistinctIntegerColumn_args() throw();
  std::string table;
  std::string column;
  std::string where;

  _IFaceLog_loadDistinctIntegerColumn_args__isset __isset;

  void __set_table(const std::string& val);

  void __set_column(const std::string& val);

  void __set_where(const std::string& val);

  bool operator == (const IFaceLog_loadDistinctIntegerColumn_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(column == rhs.column))
      return false;
    if (!(where == rhs.where))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadDistinctIntegerColumn_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadDistinctIntegerColumn_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_loadDistinctIntegerColumn_pargs {
 public:


  virtual ~IFaceLog_loadDistinctIntegerColumn_pargs() throw();
  const std::string* table;
  const std::string* column;
  const std::string* where;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadDistinctIntegerColumn_result__isset {
  _IFaceLog_loadDistinctIntegerColumn_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadDistinctIntegerColumn_result__isset;

class IFaceLog_loadDistinctIntegerColumn_result {
 public:

  IFaceLog_loadDistinctIntegerColumn_result(const IFaceLog_loadDistinctIntegerColumn_result&);
  IFaceLog_loadDistinctIntegerColumn_result(IFaceLog_loadDistinctIntegerColumn_result&&);
  IFaceLog_loadDistinctIntegerColumn_result& operator=(const IFaceLog_loadDistinctIntegerColumn_result&);
  IFaceLog_loadDistinctIntegerColumn_result& operator=(IFaceLog_loadDistinctIntegerColumn_result&&);
  IFaceLog_loadDistinctIntegerColumn_result() {
  }

  virtual ~IFaceLog_loadDistinctIntegerColumn_result() throw();
  std::vector<int32_t>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadDistinctIntegerColumn_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_loadDistinctIntegerColumn_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadDistinctIntegerColumn_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadDistinctIntegerColumn_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadDistinctIntegerColumn_presult__isset {
  _IFaceLog_loadDistinctIntegerColumn_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadDistinctIntegerColumn_presult__isset;

class IFaceLog_loadDistinctIntegerColumn_presult {
 public:


  virtual ~IFaceLog_loadDistinctIntegerColumn_presult() throw();
  std::vector<int32_t> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadDistinctIntegerColumn_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_loadDistinctStringColumn_args__isset {
  _IFaceLog_loadDistinctStringColumn_args__isset() : table(false), column(false), where(false) {}
  bool table :1;
  bool column :1;
  bool where :1;
} _IFaceLog_loadDistinctStringColumn_args__isset;

class IFaceLog_loadDistinctStringColumn_args {
 public:

  IFaceLog_loadDistinctStringColumn_args(const IFaceLog_loadDistinctStringColumn_args&);
  IFaceLog_loadDistinctStringColumn_args(IFaceLog_loadDistinctStringColumn_args&&);
  IFaceLog_loadDistinctStringColumn_args& operator=(const IFaceLog_loadDistinctStringColumn_args&);
  IFaceLog_loadDistinctStringColumn_args& operator=(IFaceLog_loadDistinctStringColumn_args&&);
  IFaceLog_loadDistinctStringColumn_args() : table(), column(), where() {
  }

  virtual ~IFaceLog_loadDistinctStringColumn_args() throw();
  std::string table;
  std::string column;
  std::string where;

  _IFaceLog_loadDistinctStringColumn_args__isset __isset;

  void __set_table(const std::string& val);

  void __set_column(const std::string& val);

  void __set_where(const std::string& val);

  bool operator == (const IFaceLog_loadDistinctStringColumn_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(column == rhs.column))
      return false;
    if (!(where == rhs.where))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadDistinctStringColumn_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadDistinctStringColumn_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_loadDistinctStringColumn_pargs {
 public:


  virtual ~IFaceLog_loadDistinctStringColumn_pargs() throw();
  const std::string* table;
  const std::string* column;
  const std::string* where;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadDistinctStringColumn_result__isset {
  _IFaceLog_loadDistinctStringColumn_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadDistinctStringColumn_result__isset;

class IFaceLog_loadDistinctStringColumn_result {
 public:

  IFaceLog_loadDistinctStringColumn_result(const IFaceLog_loadDistinctStringColumn_result&);
  IFaceLog_loadDistinctStringColumn_result(IFaceLog_loadDistinctStringColumn_result&&);
  IFaceLog_loadDistinctStringColumn_result& operator=(const IFaceLog_loadDistinctStringColumn_result&);
  IFaceLog_loadDistinctStringColumn_result& operator=(IFaceLog_loadDistinctStringColumn_result&&);
  IFaceLog_loadDistinctStringColumn_result() {
  }

  virtual ~IFaceLog_loadDistinctStringColumn_result() throw();
  std::vector<std::string>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadDistinctStringColumn_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_loadDistinctStringColumn_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadDistinctStringColumn_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadDistinctStringColumn_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadDistinctStringColumn_presult__isset {
  _IFaceLog_loadDistinctStringColumn_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadDistinctStringColumn_presult__isset;

class IFaceLog_loadDistinctStringColumn_presult {
 public:


  virtual ~IFaceLog_loadDistinctStringColumn_presult() throw();
  std::vector<std::string> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadDistinctStringColumn_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class IFaceLog_loadFeatureMd5ByUpdate_args {
 public:

  IFaceLog_loadFeatureMd5ByUpdate_args(const IFaceLog_loadFeatureMd5ByUpdate_args&);
  IFaceLog_loadFeatureMd5ByUpdate_args(IFaceLog_loadFeatureMd5ByUpdate_args&&);
  IFaceLog_loadFeatureMd5ByUpdate_args& operator=(const IFaceLog_loadFeatureMd5ByUpdate_args&);
  IFaceLog_loadFeatureMd5ByUpdate_args& operator=(IFaceLog_loadFeatureMd5ByUpdate_args&&);
  IFaceLog_loadFeatureMd5ByUpdate_args() : timestamp(0) {
  }

  virtual ~IFaceLog_loadFeatureMd5ByUpdate_args() throw();
  int64_t timestamp;

  void __set_timestamp(const int64_t val);

  bool operator == (const IFaceLog_loadFeatureMd5ByUpdate_args & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadFeatureMd5ByUpdate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadFeatureMd5ByUpdate_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_loadFeatureMd5ByUpdate_pargs {
 public:


  virtual ~IFaceLog_loadFeatureMd5ByUpdate_pargs() throw();
  const int64_t* timestamp;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadFeatureMd5ByUpdate_result__isset {
  _IFaceLog_loadFeatureMd5ByUpdate_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadFeatureMd5ByUpdate_result__isset;

class IFaceLog_loadFeatureMd5ByUpdate_result {
 public:

  IFaceLog_loadFeatureMd5ByUpdate_result(const IFaceLog_loadFeatureMd5ByUpdate_result&);
  IFaceLog_loadFeatureMd5ByUpdate_result(IFaceLog_loadFeatureMd5ByUpdate_result&&);
  IFaceLog_loadFeatureMd5ByUpdate_result& operator=(const IFaceLog_loadFeatureMd5ByUpdate_result&);
  IFaceLog_loadFeatureMd5ByUpdate_result& operator=(IFaceLog_loadFeatureMd5ByUpdate_result&&);
  IFaceLog_loadFeatureMd5ByUpdate_result() {
  }

  virtual ~IFaceLog_loadFeatureMd5ByUpdate_result() throw();
  std::vector<std::string>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadFeatureMd5ByUpdate_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_loadFeatureMd5ByUpdate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadFeatureMd5ByUpdate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadFeatureMd5ByUpdate_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadFeatureMd5ByUpdate_presult__isset {
  _IFaceLog_loadFeatureMd5ByUpdate_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadFeatureMd5ByUpdate_presult__isset;

class IFaceLog_loadFeatureMd5ByUpdate_presult {
 public:


  virtual ~IFaceLog_loadFeatureMd5ByUpdate_presult() throw();
  std::vector<std::string> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadFeatureMd5ByUpdate_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_loadFeatureMd5ByUpdateTimeStr_args__isset {
  _IFaceLog_loadFeatureMd5ByUpdateTimeStr_args__isset() : timestamp(false) {}
  bool timestamp :1;
} _IFaceLog_loadFeatureMd5ByUpdateTimeStr_args__isset;

class IFaceLog_loadFeatureMd5ByUpdateTimeStr_args {
 public:

  IFaceLog_loadFeatureMd5ByUpdateTimeStr_args(const IFaceLog_loadFeatureMd5ByUpdateTimeStr_args&);
  IFaceLog_loadFeatureMd5ByUpdateTimeStr_args(IFaceLog_loadFeatureMd5ByUpdateTimeStr_args&&);
  IFaceLog_loadFeatureMd5ByUpdateTimeStr_args& operator=(const IFaceLog_loadFeatureMd5ByUpdateTimeStr_args&);
  IFaceLog_loadFeatureMd5ByUpdateTimeStr_args& operator=(IFaceLog_loadFeatureMd5ByUpdateTimeStr_args&&);
  IFaceLog_loadFeatureMd5ByUpdateTimeStr_args() : timestamp() {
  }

  virtual ~IFaceLog_loadFeatureMd5ByUpdateTimeStr_args() throw();
  std::string timestamp;

  _IFaceLog_loadFeatureMd5ByUpdateTimeStr_args__isset __isset;

  void __set_timestamp(const std::string& val);

  bool operator == (const IFaceLog_loadFeatureMd5ByUpdateTimeStr_args & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadFeatureMd5ByUpdateTimeStr_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadFeatureMd5ByUpdateTimeStr_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_loadFeatureMd5ByUpdateTimeStr_pargs {
 public:


  virtual ~IFaceLog_loadFeatureMd5ByUpdateTimeStr_pargs() throw();
  const std::string* timestamp;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadFeatureMd5ByUpdateTimeStr_result__isset {
  _IFaceLog_loadFeatureMd5ByUpdateTimeStr_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadFeatureMd5ByUpdateTimeStr_result__isset;

class IFaceLog_loadFeatureMd5ByUpdateTimeStr_result {
 public:

  IFaceLog_loadFeatureMd5ByUpdateTimeStr_result(const IFaceLog_loadFeatureMd5ByUpdateTimeStr_result&);
  IFaceLog_loadFeatureMd5ByUpdateTimeStr_result(IFaceLog_loadFeatureMd5ByUpdateTimeStr_result&&);
  IFaceLog_loadFeatureMd5ByUpdateTimeStr_result& operator=(const IFaceLog_loadFeatureMd5ByUpdateTimeStr_result&);
  IFaceLog_loadFeatureMd5ByUpdateTimeStr_result& operator=(IFaceLog_loadFeatureMd5ByUpdateTimeStr_result&&);
  IFaceLog_loadFeatureMd5ByUpdateTimeStr_result() {
  }

  virtual ~IFaceLog_loadFeatureMd5ByUpdateTimeStr_result() throw();
  std::vector<std::string>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadFeatureMd5ByUpdateTimeStr_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_loadFeatureMd5ByUpdateTimeStr_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadFeatureMd5ByUpdateTimeStr_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadFeatureMd5ByUpdateTimeStr_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadFeatureMd5ByUpdateTimeStr_presult__isset {
  _IFaceLog_loadFeatureMd5ByUpdateTimeStr_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadFeatureMd5ByUpdateTimeStr_presult__isset;

class IFaceLog_loadFeatureMd5ByUpdateTimeStr_presult {
 public:


  virtual ~IFaceLog_loadFeatureMd5ByUpdateTimeStr_presult() throw();
  std::vector<std::string> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadFeatureMd5ByUpdateTimeStr_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_loadLogByWhere_args__isset {
  _IFaceLog_loadLogByWhere_args__isset() : where(false) {}
  bool where :1;
} _IFaceLog_loadLogByWhere_args__isset;

class IFaceLog_loadLogByWhere_args {
 public:

  IFaceLog_loadLogByWhere_args(const IFaceLog_loadLogByWhere_args&);
  IFaceLog_loadLogByWhere_args(IFaceLog_loadLogByWhere_args&&);
  IFaceLog_loadLogByWhere_args& operator=(const IFaceLog_loadLogByWhere_args&);
  IFaceLog_loadLogByWhere_args& operator=(IFaceLog_loadLogByWhere_args&&);
  IFaceLog_loadLogByWhere_args() : where(), startRow(0), numRows(0) {
  }

  virtual ~IFaceLog_loadLogByWhere_args() throw();
  std::string where;
  int32_t startRow;
  int32_t numRows;

  _IFaceLog_loadLogByWhere_args__isset __isset;

  void __set_where(const std::string& val);

  void __set_startRow(const int32_t val);

  void __set_numRows(const int32_t val);

  bool operator == (const IFaceLog_loadLogByWhere_args & rhs) const
  {
    if (!(where == rhs.where))
      return false;
    if (!(startRow == rhs.startRow))
      return false;
    if (!(numRows == rhs.numRows))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadLogByWhere_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadLogByWhere_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_loadLogByWhere_pargs {
 public:


  virtual ~IFaceLog_loadLogByWhere_pargs() throw();
  const std::string* where;
  const int32_t* startRow;
  const int32_t* numRows;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadLogByWhere_result__isset {
  _IFaceLog_loadLogByWhere_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadLogByWhere_result__isset;

class IFaceLog_loadLogByWhere_result {
 public:

  IFaceLog_loadLogByWhere_result(const IFaceLog_loadLogByWhere_result&);
  IFaceLog_loadLogByWhere_result(IFaceLog_loadLogByWhere_result&&);
  IFaceLog_loadLogByWhere_result& operator=(const IFaceLog_loadLogByWhere_result&);
  IFaceLog_loadLogByWhere_result& operator=(IFaceLog_loadLogByWhere_result&&);
  IFaceLog_loadLogByWhere_result() {
  }

  virtual ~IFaceLog_loadLogByWhere_result() throw();
  std::vector<LogBean>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadLogByWhere_result__isset __isset;

  void __set_success(const std::vector<LogBean> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_loadLogByWhere_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadLogByWhere_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadLogByWhere_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadLogByWhere_presult__isset {
  _IFaceLog_loadLogByWhere_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadLogByWhere_presult__isset;

class IFaceLog_loadLogByWhere_presult {
 public:


  virtual ~IFaceLog_loadLogByWhere_presult() throw();
  std::vector<LogBean> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadLogByWhere_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class IFaceLog_loadLogLightByVerifyTime_args {
 public:

  IFaceLog_loadLogLightByVerifyTime_args(const IFaceLog_loadLogLightByVerifyTime_args&);
  IFaceLog_loadLogLightByVerifyTime_args(IFaceLog_loadLogLightByVerifyTime_args&&);
  IFaceLog_loadLogLightByVerifyTime_args& operator=(const IFaceLog_loadLogLightByVerifyTime_args&);
  IFaceLog_loadLogLightByVerifyTime_args& operator=(IFaceLog_loadLogLightByVerifyTime_args&&);
  IFaceLog_loadLogLightByVerifyTime_args() : timestamp(0), startRow(0), numRows(0) {
  }

  virtual ~IFaceLog_loadLogLightByVerifyTime_args() throw();
  int64_t timestamp;
  int32_t startRow;
  int32_t numRows;

  void __set_timestamp(const int64_t val);

  void __set_startRow(const int32_t val);

  void __set_numRows(const int32_t val);

  bool operator == (const IFaceLog_loadLogLightByVerifyTime_args & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(startRow == rhs.startRow))
      return false;
    if (!(numRows == rhs.numRows))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadLogLightByVerifyTime_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadLogLightByVerifyTime_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_loadLogLightByVerifyTime_pargs {
 public:


  virtual ~IFaceLog_loadLogLightByVerifyTime_pargs() throw();
  const int64_t* timestamp;
  const int32_t* startRow;
  const int32_t* numRows;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadLogLightByVerifyTime_result__isset {
  _IFaceLog_loadLogLightByVerifyTime_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadLogLightByVerifyTime_result__isset;

class IFaceLog_loadLogLightByVerifyTime_result {
 public:

  IFaceLog_loadLogLightByVerifyTime_result(const IFaceLog_loadLogLightByVerifyTime_result&);
  IFaceLog_loadLogLightByVerifyTime_result(IFaceLog_loadLogLightByVerifyTime_result&&);
  IFaceLog_loadLogLightByVerifyTime_result& operator=(const IFaceLog_loadLogLightByVerifyTime_result&);
  IFaceLog_loadLogLightByVerifyTime_result& operator=(IFaceLog_loadLogLightByVerifyTime_result&&);
  IFaceLog_loadLogLightByVerifyTime_result() {
  }

  virtual ~IFaceLog_loadLogLightByVerifyTime_result() throw();
  std::vector<LogLightBean>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadLogLightByVerifyTime_result__isset __isset;

  void __set_success(const std::vector<LogLightBean> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_loadLogLightByVerifyTime_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadLogLightByVerifyTime_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadLogLightByVerifyTime_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadLogLightByVerifyTime_presult__isset {
  _IFaceLog_loadLogLightByVerifyTime_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadLogLightByVerifyTime_presult__isset;

class IFaceLog_loadLogLightByVerifyTime_presult {
 public:


  virtual ~IFaceLog_loadLogLightByVerifyTime_presult() throw();
  std::vector<LogLightBean> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadLogLightByVerifyTime_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_loadLogLightByVerifyTimeTimestr_args__isset {
  _IFaceLog_loadLogLightByVerifyTimeTimestr_args__isset() : timestamp(false) {}
  bool timestamp :1;
} _IFaceLog_loadLogLightByVerifyTimeTimestr_args__isset;

class IFaceLog_loadLogLightByVerifyTimeTimestr_args {
 public:

  IFaceLog_loadLogLightByVerifyTimeTimestr_args(const IFaceLog_loadLogLightByVerifyTimeTimestr_args&);
  IFaceLog_loadLogLightByVerifyTimeTimestr_args(IFaceLog_loadLogLightByVerifyTimeTimestr_args&&);
  IFaceLog_loadLogLightByVerifyTimeTimestr_args& operator=(const IFaceLog_loadLogLightByVerifyTimeTimestr_args&);
  IFaceLog_loadLogLightByVerifyTimeTimestr_args& operator=(IFaceLog_loadLogLightByVerifyTimeTimestr_args&&);
  IFaceLog_loadLogLightByVerifyTimeTimestr_args() : timestamp(), startRow(0), numRows(0) {
  }

  virtual ~IFaceLog_loadLogLightByVerifyTimeTimestr_args() throw();
  std::string timestamp;
  int32_t startRow;
  int32_t numRows;

  _IFaceLog_loadLogLightByVerifyTimeTimestr_args__isset __isset;

  void __set_timestamp(const std::string& val);

  void __set_startRow(const int32_t val);

  void __set_numRows(const int32_t val);

  bool operator == (const IFaceLog_loadLogLightByVerifyTimeTimestr_args & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(startRow == rhs.startRow))
      return false;
    if (!(numRows == rhs.numRows))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadLogLightByVerifyTimeTimestr_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadLogLightByVerifyTimeTimestr_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_loadLogLightByVerifyTimeTimestr_pargs {
 public:


  virtual ~IFaceLog_loadLogLightByVerifyTimeTimestr_pargs() throw();
  const std::string* timestamp;
  const int32_t* startRow;
  const int32_t* numRows;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadLogLightByVerifyTimeTimestr_result__isset {
  _IFaceLog_loadLogLightByVerifyTimeTimestr_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadLogLightByVerifyTimeTimestr_result__isset;

class IFaceLog_loadLogLightByVerifyTimeTimestr_result {
 public:

  IFaceLog_loadLogLightByVerifyTimeTimestr_result(const IFaceLog_loadLogLightByVerifyTimeTimestr_result&);
  IFaceLog_loadLogLightByVerifyTimeTimestr_result(IFaceLog_loadLogLightByVerifyTimeTimestr_result&&);
  IFaceLog_loadLogLightByVerifyTimeTimestr_result& operator=(const IFaceLog_loadLogLightByVerifyTimeTimestr_result&);
  IFaceLog_loadLogLightByVerifyTimeTimestr_result& operator=(IFaceLog_loadLogLightByVerifyTimeTimestr_result&&);
  IFaceLog_loadLogLightByVerifyTimeTimestr_result() {
  }

  virtual ~IFaceLog_loadLogLightByVerifyTimeTimestr_result() throw();
  std::vector<LogLightBean>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadLogLightByVerifyTimeTimestr_result__isset __isset;

  void __set_success(const std::vector<LogLightBean> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_loadLogLightByVerifyTimeTimestr_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadLogLightByVerifyTimeTimestr_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadLogLightByVerifyTimeTimestr_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadLogLightByVerifyTimeTimestr_presult__isset {
  _IFaceLog_loadLogLightByVerifyTimeTimestr_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadLogLightByVerifyTimeTimestr_presult__isset;

class IFaceLog_loadLogLightByVerifyTimeTimestr_presult {
 public:


  virtual ~IFaceLog_loadLogLightByVerifyTimeTimestr_presult() throw();
  std::vector<LogLightBean> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadLogLightByVerifyTimeTimestr_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_loadLogLightByWhere_args__isset {
  _IFaceLog_loadLogLightByWhere_args__isset() : where(false) {}
  bool where :1;
} _IFaceLog_loadLogLightByWhere_args__isset;

class IFaceLog_loadLogLightByWhere_args {
 public:

  IFaceLog_loadLogLightByWhere_args(const IFaceLog_loadLogLightByWhere_args&);
  IFaceLog_loadLogLightByWhere_args(IFaceLog_loadLogLightByWhere_args&&);
  IFaceLog_loadLogLightByWhere_args& operator=(const IFaceLog_loadLogLightByWhere_args&);
  IFaceLog_loadLogLightByWhere_args& operator=(IFaceLog_loadLogLightByWhere_args&&);
  IFaceLog_loadLogLightByWhere_args() : where(), startRow(0), numRows(0) {
  }

  virtual ~IFaceLog_loadLogLightByWhere_args() throw();
  std::string where;
  int32_t startRow;
  int32_t numRows;

  _IFaceLog_loadLogLightByWhere_args__isset __isset;

  void __set_where(const std::string& val);

  void __set_startRow(const int32_t val);

  void __set_numRows(const int32_t val);

  bool operator == (const IFaceLog_loadLogLightByWhere_args & rhs) const
  {
    if (!(where == rhs.where))
      return false;
    if (!(startRow == rhs.startRow))
      return false;
    if (!(numRows == rhs.numRows))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadLogLightByWhere_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadLogLightByWhere_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_loadLogLightByWhere_pargs {
 public:


  virtual ~IFaceLog_loadLogLightByWhere_pargs() throw();
  const std::string* where;
  const int32_t* startRow;
  const int32_t* numRows;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadLogLightByWhere_result__isset {
  _IFaceLog_loadLogLightByWhere_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadLogLightByWhere_result__isset;

class IFaceLog_loadLogLightByWhere_result {
 public:

  IFaceLog_loadLogLightByWhere_result(const IFaceLog_loadLogLightByWhere_result&);
  IFaceLog_loadLogLightByWhere_result(IFaceLog_loadLogLightByWhere_result&&);
  IFaceLog_loadLogLightByWhere_result& operator=(const IFaceLog_loadLogLightByWhere_result&);
  IFaceLog_loadLogLightByWhere_result& operator=(IFaceLog_loadLogLightByWhere_result&&);
  IFaceLog_loadLogLightByWhere_result() {
  }

  virtual ~IFaceLog_loadLogLightByWhere_result() throw();
  std::vector<LogLightBean>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadLogLightByWhere_result__isset __isset;

  void __set_success(const std::vector<LogLightBean> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_loadLogLightByWhere_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadLogLightByWhere_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadLogLightByWhere_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadLogLightByWhere_presult__isset {
  _IFaceLog_loadLogLightByWhere_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadLogLightByWhere_presult__isset;

class IFaceLog_loadLogLightByWhere_presult {
 public:


  virtual ~IFaceLog_loadLogLightByWhere_presult() throw();
  std::vector<LogLightBean> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadLogLightByWhere_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class IFaceLog_loadPermitByUpdate_args {
 public:

  IFaceLog_loadPermitByUpdate_args(const IFaceLog_loadPermitByUpdate_args&);
  IFaceLog_loadPermitByUpdate_args(IFaceLog_loadPermitByUpdate_args&&);
  IFaceLog_loadPermitByUpdate_args& operator=(const IFaceLog_loadPermitByUpdate_args&);
  IFaceLog_loadPermitByUpdate_args& operator=(IFaceLog_loadPermitByUpdate_args&&);
  IFaceLog_loadPermitByUpdate_args() : timestamp(0) {
  }

  virtual ~IFaceLog_loadPermitByUpdate_args() throw();
  int64_t timestamp;

  void __set_timestamp(const int64_t val);

  bool operator == (const IFaceLog_loadPermitByUpdate_args & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadPermitByUpdate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadPermitByUpdate_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_loadPermitByUpdate_pargs {
 public:


  virtual ~IFaceLog_loadPermitByUpdate_pargs() throw();
  const int64_t* timestamp;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadPermitByUpdate_result__isset {
  _IFaceLog_loadPermitByUpdate_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadPermitByUpdate_result__isset;

class IFaceLog_loadPermitByUpdate_result {
 public:

  IFaceLog_loadPermitByUpdate_result(const IFaceLog_loadPermitByUpdate_result&);
  IFaceLog_loadPermitByUpdate_result(IFaceLog_loadPermitByUpdate_result&&);
  IFaceLog_loadPermitByUpdate_result& operator=(const IFaceLog_loadPermitByUpdate_result&);
  IFaceLog_loadPermitByUpdate_result& operator=(IFaceLog_loadPermitByUpdate_result&&);
  IFaceLog_loadPermitByUpdate_result() {
  }

  virtual ~IFaceLog_loadPermitByUpdate_result() throw();
  std::vector<PermitBean>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadPermitByUpdate_result__isset __isset;

  void __set_success(const std::vector<PermitBean> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_loadPermitByUpdate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadPermitByUpdate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadPermitByUpdate_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadPermitByUpdate_presult__isset {
  _IFaceLog_loadPermitByUpdate_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadPermitByUpdate_presult__isset;

class IFaceLog_loadPermitByUpdate_presult {
 public:


  virtual ~IFaceLog_loadPermitByUpdate_presult() throw();
  std::vector<PermitBean> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadPermitByUpdate_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_loadPermitByUpdateTimestr_args__isset {
  _IFaceLog_loadPermitByUpdateTimestr_args__isset() : timestamp(false) {}
  bool timestamp :1;
} _IFaceLog_loadPermitByUpdateTimestr_args__isset;

class IFaceLog_loadPermitByUpdateTimestr_args {
 public:

  IFaceLog_loadPermitByUpdateTimestr_args(const IFaceLog_loadPermitByUpdateTimestr_args&);
  IFaceLog_loadPermitByUpdateTimestr_args(IFaceLog_loadPermitByUpdateTimestr_args&&);
  IFaceLog_loadPermitByUpdateTimestr_args& operator=(const IFaceLog_loadPermitByUpdateTimestr_args&);
  IFaceLog_loadPermitByUpdateTimestr_args& operator=(IFaceLog_loadPermitByUpdateTimestr_args&&);
  IFaceLog_loadPermitByUpdateTimestr_args() : timestamp() {
  }

  virtual ~IFaceLog_loadPermitByUpdateTimestr_args() throw();
  std::string timestamp;

  _IFaceLog_loadPermitByUpdateTimestr_args__isset __isset;

  void __set_timestamp(const std::string& val);

  bool operator == (const IFaceLog_loadPermitByUpdateTimestr_args & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadPermitByUpdateTimestr_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadPermitByUpdateTimestr_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_loadPermitByUpdateTimestr_pargs {
 public:


  virtual ~IFaceLog_loadPermitByUpdateTimestr_pargs() throw();
  const std::string* timestamp;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadPermitByUpdateTimestr_result__isset {
  _IFaceLog_loadPermitByUpdateTimestr_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadPermitByUpdateTimestr_result__isset;

class IFaceLog_loadPermitByUpdateTimestr_result {
 public:

  IFaceLog_loadPermitByUpdateTimestr_result(const IFaceLog_loadPermitByUpdateTimestr_result&);
  IFaceLog_loadPermitByUpdateTimestr_result(IFaceLog_loadPermitByUpdateTimestr_result&&);
  IFaceLog_loadPermitByUpdateTimestr_result& operator=(const IFaceLog_loadPermitByUpdateTimestr_result&);
  IFaceLog_loadPermitByUpdateTimestr_result& operator=(IFaceLog_loadPermitByUpdateTimestr_result&&);
  IFaceLog_loadPermitByUpdateTimestr_result() {
  }

  virtual ~IFaceLog_loadPermitByUpdateTimestr_result() throw();
  std::vector<PermitBean>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadPermitByUpdateTimestr_result__isset __isset;

  void __set_success(const std::vector<PermitBean> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_loadPermitByUpdateTimestr_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadPermitByUpdateTimestr_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadPermitByUpdateTimestr_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadPermitByUpdateTimestr_presult__isset {
  _IFaceLog_loadPermitByUpdateTimestr_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadPermitByUpdateTimestr_presult__isset;

class IFaceLog_loadPermitByUpdateTimestr_presult {
 public:


  virtual ~IFaceLog_loadPermitByUpdateTimestr_presult() throw();
  std::vector<PermitBean> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadPermitByUpdateTimestr_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_loadPersonByWhere_args__isset {
  _IFaceLog_loadPersonByWhere_args__isset() : where(false) {}
  bool where :1;
} _IFaceLog_loadPersonByWhere_args__isset;

class IFaceLog_loadPersonByWhere_args {
 public:

  IFaceLog_loadPersonByWhere_args(const IFaceLog_loadPersonByWhere_args&);
  IFaceLog_loadPersonByWhere_args(IFaceLog_loadPersonByWhere_args&&);
  IFaceLog_loadPersonByWhere_args& operator=(const IFaceLog_loadPersonByWhere_args&);
  IFaceLog_loadPersonByWhere_args& operator=(IFaceLog_loadPersonByWhere_args&&);
  IFaceLog_loadPersonByWhere_args() : where(), startRow(0), numRows(0) {
  }

  virtual ~IFaceLog_loadPersonByWhere_args() throw();
  std::string where;
  int32_t startRow;
  int32_t numRows;

  _IFaceLog_loadPersonByWhere_args__isset __isset;

  void __set_where(const std::string& val);

  void __set_startRow(const int32_t val);

  void __set_numRows(const int32_t val);

  bool operator == (const IFaceLog_loadPersonByWhere_args & rhs) const
  {
    if (!(where == rhs.where))
      return false;
    if (!(startRow == rhs.startRow))
      return false;
    if (!(numRows == rhs.numRows))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadPersonByWhere_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadPersonByWhere_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_loadPersonByWhere_pargs {
 public:


  virtual ~IFaceLog_loadPersonByWhere_pargs() throw();
  const std::string* where;
  const int32_t* startRow;
  const int32_t* numRows;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadPersonByWhere_result__isset {
  _IFaceLog_loadPersonByWhere_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadPersonByWhere_result__isset;

class IFaceLog_loadPersonByWhere_result {
 public:

  IFaceLog_loadPersonByWhere_result(const IFaceLog_loadPersonByWhere_result&);
  IFaceLog_loadPersonByWhere_result(IFaceLog_loadPersonByWhere_result&&);
  IFaceLog_loadPersonByWhere_result& operator=(const IFaceLog_loadPersonByWhere_result&);
  IFaceLog_loadPersonByWhere_result& operator=(IFaceLog_loadPersonByWhere_result&&);
  IFaceLog_loadPersonByWhere_result() {
  }

  virtual ~IFaceLog_loadPersonByWhere_result() throw();
  std::vector<PersonBean>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadPersonByWhere_result__isset __isset;

  void __set_success(const std::vector<PersonBean> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_loadPersonByWhere_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadPersonByWhere_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadPersonByWhere_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadPersonByWhere_presult__isset {
  _IFaceLog_loadPersonByWhere_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadPersonByWhere_presult__isset;

class IFaceLog_loadPersonByWhere_presult {
 public:


  virtual ~IFaceLog_loadPersonByWhere_presult() throw();
  std::vector<PersonBean> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadPersonByWhere_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_loadPersonGroupByWhere_args__isset {
  _IFaceLog_loadPersonGroupByWhere_args__isset() : where(false) {}
  bool where :1;
} _IFaceLog_loadPersonGroupByWhere_args__isset;

class IFaceLog_loadPersonGroupByWhere_args {
 public:

  IFaceLog_loadPersonGroupByWhere_args(const IFaceLog_loadPersonGroupByWhere_args&);
  IFaceLog_loadPersonGroupByWhere_args(IFaceLog_loadPersonGroupByWhere_args&&);
  IFaceLog_loadPersonGroupByWhere_args& operator=(const IFaceLog_loadPersonGroupByWhere_args&);
  IFaceLog_loadPersonGroupByWhere_args& operator=(IFaceLog_loadPersonGroupByWhere_args&&);
  IFaceLog_loadPersonGroupByWhere_args() : where(), startRow(0), numRows(0) {
  }

  virtual ~IFaceLog_loadPersonGroupByWhere_args() throw();
  std::string where;
  int32_t startRow;
  int32_t numRows;

  _IFaceLog_loadPersonGroupByWhere_args__isset __isset;

  void __set_where(const std::string& val);

  void __set_startRow(const int32_t val);

  void __set_numRows(const int32_t val);

  bool operator == (const IFaceLog_loadPersonGroupByWhere_args & rhs) const
  {
    if (!(where == rhs.where))
      return false;
    if (!(startRow == rhs.startRow))
      return false;
    if (!(numRows == rhs.numRows))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadPersonGroupByWhere_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadPersonGroupByWhere_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_loadPersonGroupByWhere_pargs {
 public:


  virtual ~IFaceLog_loadPersonGroupByWhere_pargs() throw();
  const std::string* where;
  const int32_t* startRow;
  const int32_t* numRows;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadPersonGroupByWhere_result__isset {
  _IFaceLog_loadPersonGroupByWhere_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadPersonGroupByWhere_result__isset;

class IFaceLog_loadPersonGroupByWhere_result {
 public:

  IFaceLog_loadPersonGroupByWhere_result(const IFaceLog_loadPersonGroupByWhere_result&);
  IFaceLog_loadPersonGroupByWhere_result(IFaceLog_loadPersonGroupByWhere_result&&);
  IFaceLog_loadPersonGroupByWhere_result& operator=(const IFaceLog_loadPersonGroupByWhere_result&);
  IFaceLog_loadPersonGroupByWhere_result& operator=(IFaceLog_loadPersonGroupByWhere_result&&);
  IFaceLog_loadPersonGroupByWhere_result() {
  }

  virtual ~IFaceLog_loadPersonGroupByWhere_result() throw();
  std::vector<int32_t>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadPersonGroupByWhere_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_loadPersonGroupByWhere_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadPersonGroupByWhere_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadPersonGroupByWhere_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadPersonGroupByWhere_presult__isset {
  _IFaceLog_loadPersonGroupByWhere_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadPersonGroupByWhere_presult__isset;

class IFaceLog_loadPersonGroupByWhere_presult {
 public:


  virtual ~IFaceLog_loadPersonGroupByWhere_presult() throw();
  std::vector<int32_t> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadPersonGroupByWhere_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_loadPersonGroupIdByWhere_args__isset {
  _IFaceLog_loadPersonGroupIdByWhere_args__isset() : where(false) {}
  bool where :1;
} _IFaceLog_loadPersonGroupIdByWhere_args__isset;

class IFaceLog_loadPersonGroupIdByWhere_args {
 public:

  IFaceLog_loadPersonGroupIdByWhere_args(const IFaceLog_loadPersonGroupIdByWhere_args&);
  IFaceLog_loadPersonGroupIdByWhere_args(IFaceLog_loadPersonGroupIdByWhere_args&&);
  IFaceLog_loadPersonGroupIdByWhere_args& operator=(const IFaceLog_loadPersonGroupIdByWhere_args&);
  IFaceLog_loadPersonGroupIdByWhere_args& operator=(IFaceLog_loadPersonGroupIdByWhere_args&&);
  IFaceLog_loadPersonGroupIdByWhere_args() : where() {
  }

  virtual ~IFaceLog_loadPersonGroupIdByWhere_args() throw();
  std::string where;

  _IFaceLog_loadPersonGroupIdByWhere_args__isset __isset;

  void __set_where(const std::string& val);

  bool operator == (const IFaceLog_loadPersonGroupIdByWhere_args & rhs) const
  {
    if (!(where == rhs.where))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadPersonGroupIdByWhere_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadPersonGroupIdByWhere_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_loadPersonGroupIdByWhere_pargs {
 public:


  virtual ~IFaceLog_loadPersonGroupIdByWhere_pargs() throw();
  const std::string* where;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadPersonGroupIdByWhere_result__isset {
  _IFaceLog_loadPersonGroupIdByWhere_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadPersonGroupIdByWhere_result__isset;

class IFaceLog_loadPersonGroupIdByWhere_result {
 public:

  IFaceLog_loadPersonGroupIdByWhere_result(const IFaceLog_loadPersonGroupIdByWhere_result&);
  IFaceLog_loadPersonGroupIdByWhere_result(IFaceLog_loadPersonGroupIdByWhere_result&&);
  IFaceLog_loadPersonGroupIdByWhere_result& operator=(const IFaceLog_loadPersonGroupIdByWhere_result&);
  IFaceLog_loadPersonGroupIdByWhere_result& operator=(IFaceLog_loadPersonGroupIdByWhere_result&&);
  IFaceLog_loadPersonGroupIdByWhere_result() {
  }

  virtual ~IFaceLog_loadPersonGroupIdByWhere_result() throw();
  std::vector<int32_t>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadPersonGroupIdByWhere_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_loadPersonGroupIdByWhere_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadPersonGroupIdByWhere_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadPersonGroupIdByWhere_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadPersonGroupIdByWhere_presult__isset {
  _IFaceLog_loadPersonGroupIdByWhere_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadPersonGroupIdByWhere_presult__isset;

class IFaceLog_loadPersonGroupIdByWhere_presult {
 public:


  virtual ~IFaceLog_loadPersonGroupIdByWhere_presult() throw();
  std::vector<int32_t> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadPersonGroupIdByWhere_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class IFaceLog_loadPersonIdByUpdateTime_args {
 public:

  IFaceLog_loadPersonIdByUpdateTime_args(const IFaceLog_loadPersonIdByUpdateTime_args&);
  IFaceLog_loadPersonIdByUpdateTime_args(IFaceLog_loadPersonIdByUpdateTime_args&&);
  IFaceLog_loadPersonIdByUpdateTime_args& operator=(const IFaceLog_loadPersonIdByUpdateTime_args&);
  IFaceLog_loadPersonIdByUpdateTime_args& operator=(IFaceLog_loadPersonIdByUpdateTime_args&&);
  IFaceLog_loadPersonIdByUpdateTime_args() : timestamp(0) {
  }

  virtual ~IFaceLog_loadPersonIdByUpdateTime_args() throw();
  int64_t timestamp;

  void __set_timestamp(const int64_t val);

  bool operator == (const IFaceLog_loadPersonIdByUpdateTime_args & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadPersonIdByUpdateTime_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadPersonIdByUpdateTime_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_loadPersonIdByUpdateTime_pargs {
 public:


  virtual ~IFaceLog_loadPersonIdByUpdateTime_pargs() throw();
  const int64_t* timestamp;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadPersonIdByUpdateTime_result__isset {
  _IFaceLog_loadPersonIdByUpdateTime_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadPersonIdByUpdateTime_result__isset;

class IFaceLog_loadPersonIdByUpdateTime_result {
 public:

  IFaceLog_loadPersonIdByUpdateTime_result(const IFaceLog_loadPersonIdByUpdateTime_result&);
  IFaceLog_loadPersonIdByUpdateTime_result(IFaceLog_loadPersonIdByUpdateTime_result&&);
  IFaceLog_loadPersonIdByUpdateTime_result& operator=(const IFaceLog_loadPersonIdByUpdateTime_result&);
  IFaceLog_loadPersonIdByUpdateTime_result& operator=(IFaceLog_loadPersonIdByUpdateTime_result&&);
  IFaceLog_loadPersonIdByUpdateTime_result() {
  }

  virtual ~IFaceLog_loadPersonIdByUpdateTime_result() throw();
  std::vector<int32_t>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadPersonIdByUpdateTime_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_loadPersonIdByUpdateTime_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadPersonIdByUpdateTime_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadPersonIdByUpdateTime_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadPersonIdByUpdateTime_presult__isset {
  _IFaceLog_loadPersonIdByUpdateTime_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadPersonIdByUpdateTime_presult__isset;

class IFaceLog_loadPersonIdByUpdateTime_presult {
 public:


  virtual ~IFaceLog_loadPersonIdByUpdateTime_presult() throw();
  std::vector<int32_t> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadPersonIdByUpdateTime_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_loadPersonIdByUpdateTimeTimeStr_args__isset {
  _IFaceLog_loadPersonIdByUpdateTimeTimeStr_args__isset() : timestamp(false) {}
  bool timestamp :1;
} _IFaceLog_loadPersonIdByUpdateTimeTimeStr_args__isset;

class IFaceLog_loadPersonIdByUpdateTimeTimeStr_args {
 public:

  IFaceLog_loadPersonIdByUpdateTimeTimeStr_args(const IFaceLog_loadPersonIdByUpdateTimeTimeStr_args&);
  IFaceLog_loadPersonIdByUpdateTimeTimeStr_args(IFaceLog_loadPersonIdByUpdateTimeTimeStr_args&&);
  IFaceLog_loadPersonIdByUpdateTimeTimeStr_args& operator=(const IFaceLog_loadPersonIdByUpdateTimeTimeStr_args&);
  IFaceLog_loadPersonIdByUpdateTimeTimeStr_args& operator=(IFaceLog_loadPersonIdByUpdateTimeTimeStr_args&&);
  IFaceLog_loadPersonIdByUpdateTimeTimeStr_args() : timestamp() {
  }

  virtual ~IFaceLog_loadPersonIdByUpdateTimeTimeStr_args() throw();
  std::string timestamp;

  _IFaceLog_loadPersonIdByUpdateTimeTimeStr_args__isset __isset;

  void __set_timestamp(const std::string& val);

  bool operator == (const IFaceLog_loadPersonIdByUpdateTimeTimeStr_args & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadPersonIdByUpdateTimeTimeStr_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadPersonIdByUpdateTimeTimeStr_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_loadPersonIdByUpdateTimeTimeStr_pargs {
 public:


  virtual ~IFaceLog_loadPersonIdByUpdateTimeTimeStr_pargs() throw();
  const std::string* timestamp;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadPersonIdByUpdateTimeTimeStr_result__isset {
  _IFaceLog_loadPersonIdByUpdateTimeTimeStr_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadPersonIdByUpdateTimeTimeStr_result__isset;

class IFaceLog_loadPersonIdByUpdateTimeTimeStr_result {
 public:

  IFaceLog_loadPersonIdByUpdateTimeTimeStr_result(const IFaceLog_loadPersonIdByUpdateTimeTimeStr_result&);
  IFaceLog_loadPersonIdByUpdateTimeTimeStr_result(IFaceLog_loadPersonIdByUpdateTimeTimeStr_result&&);
  IFaceLog_loadPersonIdByUpdateTimeTimeStr_result& operator=(const IFaceLog_loadPersonIdByUpdateTimeTimeStr_result&);
  IFaceLog_loadPersonIdByUpdateTimeTimeStr_result& operator=(IFaceLog_loadPersonIdByUpdateTimeTimeStr_result&&);
  IFaceLog_loadPersonIdByUpdateTimeTimeStr_result() {
  }

  virtual ~IFaceLog_loadPersonIdByUpdateTimeTimeStr_result() throw();
  std::vector<int32_t>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadPersonIdByUpdateTimeTimeStr_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_loadPersonIdByUpdateTimeTimeStr_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadPersonIdByUpdateTimeTimeStr_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadPersonIdByUpdateTimeTimeStr_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadPersonIdByUpdateTimeTimeStr_presult__isset {
  _IFaceLog_loadPersonIdByUpdateTimeTimeStr_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadPersonIdByUpdateTimeTimeStr_presult__isset;

class IFaceLog_loadPersonIdByUpdateTimeTimeStr_presult {
 public:


  virtual ~IFaceLog_loadPersonIdByUpdateTimeTimeStr_presult() throw();
  std::vector<int32_t> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadPersonIdByUpdateTimeTimeStr_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_loadPersonIdByWhere_args__isset {
  _IFaceLog_loadPersonIdByWhere_args__isset() : where(false) {}
  bool where :1;
} _IFaceLog_loadPersonIdByWhere_args__isset;

class IFaceLog_loadPersonIdByWhere_args {
 public:

  IFaceLog_loadPersonIdByWhere_args(const IFaceLog_loadPersonIdByWhere_args&);
  IFaceLog_loadPersonIdByWhere_args(IFaceLog_loadPersonIdByWhere_args&&);
  IFaceLog_loadPersonIdByWhere_args& operator=(const IFaceLog_loadPersonIdByWhere_args&);
  IFaceLog_loadPersonIdByWhere_args& operator=(IFaceLog_loadPersonIdByWhere_args&&);
  IFaceLog_loadPersonIdByWhere_args() : where() {
  }

  virtual ~IFaceLog_loadPersonIdByWhere_args() throw();
  std::string where;

  _IFaceLog_loadPersonIdByWhere_args__isset __isset;

  void __set_where(const std::string& val);

  bool operator == (const IFaceLog_loadPersonIdByWhere_args & rhs) const
  {
    if (!(where == rhs.where))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadPersonIdByWhere_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadPersonIdByWhere_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_loadPersonIdByWhere_pargs {
 public:


  virtual ~IFaceLog_loadPersonIdByWhere_pargs() throw();
  const std::string* where;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadPersonIdByWhere_result__isset {
  _IFaceLog_loadPersonIdByWhere_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadPersonIdByWhere_result__isset;

class IFaceLog_loadPersonIdByWhere_result {
 public:

  IFaceLog_loadPersonIdByWhere_result(const IFaceLog_loadPersonIdByWhere_result&);
  IFaceLog_loadPersonIdByWhere_result(IFaceLog_loadPersonIdByWhere_result&&);
  IFaceLog_loadPersonIdByWhere_result& operator=(const IFaceLog_loadPersonIdByWhere_result&);
  IFaceLog_loadPersonIdByWhere_result& operator=(IFaceLog_loadPersonIdByWhere_result&&);
  IFaceLog_loadPersonIdByWhere_result() {
  }

  virtual ~IFaceLog_loadPersonIdByWhere_result() throw();
  std::vector<int32_t>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadPersonIdByWhere_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_loadPersonIdByWhere_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadPersonIdByWhere_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadPersonIdByWhere_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadPersonIdByWhere_presult__isset {
  _IFaceLog_loadPersonIdByWhere_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadPersonIdByWhere_presult__isset;

class IFaceLog_loadPersonIdByWhere_presult {
 public:


  virtual ~IFaceLog_loadPersonIdByWhere_presult() throw();
  std::vector<int32_t> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadPersonIdByWhere_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class IFaceLog_loadUpdatedPersons_args {
 public:

  IFaceLog_loadUpdatedPersons_args(const IFaceLog_loadUpdatedPersons_args&);
  IFaceLog_loadUpdatedPersons_args(IFaceLog_loadUpdatedPersons_args&&);
  IFaceLog_loadUpdatedPersons_args& operator=(const IFaceLog_loadUpdatedPersons_args&);
  IFaceLog_loadUpdatedPersons_args& operator=(IFaceLog_loadUpdatedPersons_args&&);
  IFaceLog_loadUpdatedPersons_args() : timestamp(0) {
  }

  virtual ~IFaceLog_loadUpdatedPersons_args() throw();
  int64_t timestamp;

  void __set_timestamp(const int64_t val);

  bool operator == (const IFaceLog_loadUpdatedPersons_args & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadUpdatedPersons_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadUpdatedPersons_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_loadUpdatedPersons_pargs {
 public:


  virtual ~IFaceLog_loadUpdatedPersons_pargs() throw();
  const int64_t* timestamp;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadUpdatedPersons_result__isset {
  _IFaceLog_loadUpdatedPersons_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadUpdatedPersons_result__isset;

class IFaceLog_loadUpdatedPersons_result {
 public:

  IFaceLog_loadUpdatedPersons_result(const IFaceLog_loadUpdatedPersons_result&);
  IFaceLog_loadUpdatedPersons_result(IFaceLog_loadUpdatedPersons_result&&);
  IFaceLog_loadUpdatedPersons_result& operator=(const IFaceLog_loadUpdatedPersons_result&);
  IFaceLog_loadUpdatedPersons_result& operator=(IFaceLog_loadUpdatedPersons_result&&);
  IFaceLog_loadUpdatedPersons_result() {
  }

  virtual ~IFaceLog_loadUpdatedPersons_result() throw();
  std::vector<int32_t>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadUpdatedPersons_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_loadUpdatedPersons_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadUpdatedPersons_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadUpdatedPersons_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadUpdatedPersons_presult__isset {
  _IFaceLog_loadUpdatedPersons_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadUpdatedPersons_presult__isset;

class IFaceLog_loadUpdatedPersons_presult {
 public:


  virtual ~IFaceLog_loadUpdatedPersons_presult() throw();
  std::vector<int32_t> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadUpdatedPersons_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_loadUpdatedPersonsTimestr_args__isset {
  _IFaceLog_loadUpdatedPersonsTimestr_args__isset() : timestamp(false) {}
  bool timestamp :1;
} _IFaceLog_loadUpdatedPersonsTimestr_args__isset;

class IFaceLog_loadUpdatedPersonsTimestr_args {
 public:

  IFaceLog_loadUpdatedPersonsTimestr_args(const IFaceLog_loadUpdatedPersonsTimestr_args&);
  IFaceLog_loadUpdatedPersonsTimestr_args(IFaceLog_loadUpdatedPersonsTimestr_args&&);
  IFaceLog_loadUpdatedPersonsTimestr_args& operator=(const IFaceLog_loadUpdatedPersonsTimestr_args&);
  IFaceLog_loadUpdatedPersonsTimestr_args& operator=(IFaceLog_loadUpdatedPersonsTimestr_args&&);
  IFaceLog_loadUpdatedPersonsTimestr_args() : timestamp() {
  }

  virtual ~IFaceLog_loadUpdatedPersonsTimestr_args() throw();
  std::string timestamp;

  _IFaceLog_loadUpdatedPersonsTimestr_args__isset __isset;

  void __set_timestamp(const std::string& val);

  bool operator == (const IFaceLog_loadUpdatedPersonsTimestr_args & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadUpdatedPersonsTimestr_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadUpdatedPersonsTimestr_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_loadUpdatedPersonsTimestr_pargs {
 public:


  virtual ~IFaceLog_loadUpdatedPersonsTimestr_pargs() throw();
  const std::string* timestamp;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadUpdatedPersonsTimestr_result__isset {
  _IFaceLog_loadUpdatedPersonsTimestr_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadUpdatedPersonsTimestr_result__isset;

class IFaceLog_loadUpdatedPersonsTimestr_result {
 public:

  IFaceLog_loadUpdatedPersonsTimestr_result(const IFaceLog_loadUpdatedPersonsTimestr_result&);
  IFaceLog_loadUpdatedPersonsTimestr_result(IFaceLog_loadUpdatedPersonsTimestr_result&&);
  IFaceLog_loadUpdatedPersonsTimestr_result& operator=(const IFaceLog_loadUpdatedPersonsTimestr_result&);
  IFaceLog_loadUpdatedPersonsTimestr_result& operator=(IFaceLog_loadUpdatedPersonsTimestr_result&&);
  IFaceLog_loadUpdatedPersonsTimestr_result() {
  }

  virtual ~IFaceLog_loadUpdatedPersonsTimestr_result() throw();
  std::vector<int32_t>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadUpdatedPersonsTimestr_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_loadUpdatedPersonsTimestr_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_loadUpdatedPersonsTimestr_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_loadUpdatedPersonsTimestr_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_loadUpdatedPersonsTimestr_presult__isset {
  _IFaceLog_loadUpdatedPersonsTimestr_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_loadUpdatedPersonsTimestr_presult__isset;

class IFaceLog_loadUpdatedPersonsTimestr_presult {
 public:


  virtual ~IFaceLog_loadUpdatedPersonsTimestr_presult() throw();
  std::vector<int32_t> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_loadUpdatedPersonsTimestr_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_offline_args__isset {
  _IFaceLog_offline_args__isset() : token(false) {}
  bool token :1;
} _IFaceLog_offline_args__isset;

class IFaceLog_offline_args {
 public:

  IFaceLog_offline_args(const IFaceLog_offline_args&);
  IFaceLog_offline_args(IFaceLog_offline_args&&);
  IFaceLog_offline_args& operator=(const IFaceLog_offline_args&);
  IFaceLog_offline_args& operator=(IFaceLog_offline_args&&);
  IFaceLog_offline_args() {
  }

  virtual ~IFaceLog_offline_args() throw();
  Token token;

  _IFaceLog_offline_args__isset __isset;

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_offline_args & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_offline_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_offline_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_offline_pargs {
 public:


  virtual ~IFaceLog_offline_pargs() throw();
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_offline_result__isset {
  _IFaceLog_offline_result__isset() : ex1(false), ex2(false) {}
  bool ex1 :1;
  bool ex2 :1;
} _IFaceLog_offline_result__isset;

class IFaceLog_offline_result {
 public:

  IFaceLog_offline_result(const IFaceLog_offline_result&);
  IFaceLog_offline_result(IFaceLog_offline_result&&);
  IFaceLog_offline_result& operator=(const IFaceLog_offline_result&);
  IFaceLog_offline_result& operator=(IFaceLog_offline_result&&);
  IFaceLog_offline_result() {
  }

  virtual ~IFaceLog_offline_result() throw();
  ServiceSecurityException ex1;
  ServiceRuntimeException ex2;

  _IFaceLog_offline_result__isset __isset;

  void __set_ex1(const ServiceSecurityException& val);

  void __set_ex2(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_offline_result & rhs) const
  {
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_offline_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_offline_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_offline_presult__isset {
  _IFaceLog_offline_presult__isset() : ex1(false), ex2(false) {}
  bool ex1 :1;
  bool ex2 :1;
} _IFaceLog_offline_presult__isset;

class IFaceLog_offline_presult {
 public:


  virtual ~IFaceLog_offline_presult() throw();
  ServiceSecurityException ex1;
  ServiceRuntimeException ex2;

  _IFaceLog_offline_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_online_args__isset {
  _IFaceLog_online_args__isset() : device(false) {}
  bool device :1;
} _IFaceLog_online_args__isset;

class IFaceLog_online_args {
 public:

  IFaceLog_online_args(const IFaceLog_online_args&);
  IFaceLog_online_args(IFaceLog_online_args&&);
  IFaceLog_online_args& operator=(const IFaceLog_online_args&);
  IFaceLog_online_args& operator=(IFaceLog_online_args&&);
  IFaceLog_online_args() {
  }

  virtual ~IFaceLog_online_args() throw();
  DeviceBean device;

  _IFaceLog_online_args__isset __isset;

  void __set_device(const DeviceBean& val);

  bool operator == (const IFaceLog_online_args & rhs) const
  {
    if (!(device == rhs.device))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_online_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_online_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_online_pargs {
 public:


  virtual ~IFaceLog_online_pargs() throw();
  const DeviceBean* device;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_online_result__isset {
  _IFaceLog_online_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _IFaceLog_online_result__isset;

class IFaceLog_online_result {
 public:

  IFaceLog_online_result(const IFaceLog_online_result&);
  IFaceLog_online_result(IFaceLog_online_result&&);
  IFaceLog_online_result& operator=(const IFaceLog_online_result&);
  IFaceLog_online_result& operator=(IFaceLog_online_result&&);
  IFaceLog_online_result() {
  }

  virtual ~IFaceLog_online_result() throw();
  Token success;
  ServiceSecurityException ex1;
  ServiceRuntimeException ex2;

  _IFaceLog_online_result__isset __isset;

  void __set_success(const Token& val);

  void __set_ex1(const ServiceSecurityException& val);

  void __set_ex2(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_online_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_online_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_online_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_online_presult__isset {
  _IFaceLog_online_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _IFaceLog_online_presult__isset;

class IFaceLog_online_presult {
 public:


  virtual ~IFaceLog_online_presult() throw();
  Token* success;
  ServiceSecurityException ex1;
  ServiceRuntimeException ex2;

  _IFaceLog_online_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_registerDevice_args__isset {
  _IFaceLog_registerDevice_args__isset() : newDevice(false) {}
  bool newDevice :1;
} _IFaceLog_registerDevice_args__isset;

class IFaceLog_registerDevice_args {
 public:

  IFaceLog_registerDevice_args(const IFaceLog_registerDevice_args&);
  IFaceLog_registerDevice_args(IFaceLog_registerDevice_args&&);
  IFaceLog_registerDevice_args& operator=(const IFaceLog_registerDevice_args&);
  IFaceLog_registerDevice_args& operator=(IFaceLog_registerDevice_args&&);
  IFaceLog_registerDevice_args() {
  }

  virtual ~IFaceLog_registerDevice_args() throw();
  DeviceBean newDevice;

  _IFaceLog_registerDevice_args__isset __isset;

  void __set_newDevice(const DeviceBean& val);

  bool operator == (const IFaceLog_registerDevice_args & rhs) const
  {
    if (!(newDevice == rhs.newDevice))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_registerDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_registerDevice_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_registerDevice_pargs {
 public:


  virtual ~IFaceLog_registerDevice_pargs() throw();
  const DeviceBean* newDevice;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_registerDevice_result__isset {
  _IFaceLog_registerDevice_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _IFaceLog_registerDevice_result__isset;

class IFaceLog_registerDevice_result {
 public:

  IFaceLog_registerDevice_result(const IFaceLog_registerDevice_result&);
  IFaceLog_registerDevice_result(IFaceLog_registerDevice_result&&);
  IFaceLog_registerDevice_result& operator=(const IFaceLog_registerDevice_result&);
  IFaceLog_registerDevice_result& operator=(IFaceLog_registerDevice_result&&);
  IFaceLog_registerDevice_result() {
  }

  virtual ~IFaceLog_registerDevice_result() throw();
  DeviceBean success;
  ServiceSecurityException ex1;
  ServiceRuntimeException ex2;

  _IFaceLog_registerDevice_result__isset __isset;

  void __set_success(const DeviceBean& val);

  void __set_ex1(const ServiceSecurityException& val);

  void __set_ex2(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_registerDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_registerDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_registerDevice_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_registerDevice_presult__isset {
  _IFaceLog_registerDevice_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _IFaceLog_registerDevice_presult__isset;

class IFaceLog_registerDevice_presult {
 public:


  virtual ~IFaceLog_registerDevice_presult() throw();
  DeviceBean* success;
  ServiceSecurityException ex1;
  ServiceRuntimeException ex2;

  _IFaceLog_registerDevice_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_releasePersonToken_args__isset {
  _IFaceLog_releasePersonToken_args__isset() : token(false) {}
  bool token :1;
} _IFaceLog_releasePersonToken_args__isset;

class IFaceLog_releasePersonToken_args {
 public:

  IFaceLog_releasePersonToken_args(const IFaceLog_releasePersonToken_args&);
  IFaceLog_releasePersonToken_args(IFaceLog_releasePersonToken_args&&);
  IFaceLog_releasePersonToken_args& operator=(const IFaceLog_releasePersonToken_args&);
  IFaceLog_releasePersonToken_args& operator=(IFaceLog_releasePersonToken_args&&);
  IFaceLog_releasePersonToken_args() {
  }

  virtual ~IFaceLog_releasePersonToken_args() throw();
  Token token;

  _IFaceLog_releasePersonToken_args__isset __isset;

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_releasePersonToken_args & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_releasePersonToken_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_releasePersonToken_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_releasePersonToken_pargs {
 public:


  virtual ~IFaceLog_releasePersonToken_pargs() throw();
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_releasePersonToken_result__isset {
  _IFaceLog_releasePersonToken_result__isset() : ex1(false), ex2(false) {}
  bool ex1 :1;
  bool ex2 :1;
} _IFaceLog_releasePersonToken_result__isset;

class IFaceLog_releasePersonToken_result {
 public:

  IFaceLog_releasePersonToken_result(const IFaceLog_releasePersonToken_result&);
  IFaceLog_releasePersonToken_result(IFaceLog_releasePersonToken_result&&);
  IFaceLog_releasePersonToken_result& operator=(const IFaceLog_releasePersonToken_result&);
  IFaceLog_releasePersonToken_result& operator=(IFaceLog_releasePersonToken_result&&);
  IFaceLog_releasePersonToken_result() {
  }

  virtual ~IFaceLog_releasePersonToken_result() throw();
  ServiceSecurityException ex1;
  ServiceRuntimeException ex2;

  _IFaceLog_releasePersonToken_result__isset __isset;

  void __set_ex1(const ServiceSecurityException& val);

  void __set_ex2(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_releasePersonToken_result & rhs) const
  {
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_releasePersonToken_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_releasePersonToken_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_releasePersonToken_presult__isset {
  _IFaceLog_releasePersonToken_presult__isset() : ex1(false), ex2(false) {}
  bool ex1 :1;
  bool ex2 :1;
} _IFaceLog_releasePersonToken_presult__isset;

class IFaceLog_releasePersonToken_presult {
 public:


  virtual ~IFaceLog_releasePersonToken_presult() throw();
  ServiceSecurityException ex1;
  ServiceRuntimeException ex2;

  _IFaceLog_releasePersonToken_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_releaseRootToken_args__isset {
  _IFaceLog_releaseRootToken_args__isset() : token(false) {}
  bool token :1;
} _IFaceLog_releaseRootToken_args__isset;

class IFaceLog_releaseRootToken_args {
 public:

  IFaceLog_releaseRootToken_args(const IFaceLog_releaseRootToken_args&);
  IFaceLog_releaseRootToken_args(IFaceLog_releaseRootToken_args&&);
  IFaceLog_releaseRootToken_args& operator=(const IFaceLog_releaseRootToken_args&);
  IFaceLog_releaseRootToken_args& operator=(IFaceLog_releaseRootToken_args&&);
  IFaceLog_releaseRootToken_args() {
  }

  virtual ~IFaceLog_releaseRootToken_args() throw();
  Token token;

  _IFaceLog_releaseRootToken_args__isset __isset;

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_releaseRootToken_args & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_releaseRootToken_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_releaseRootToken_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_releaseRootToken_pargs {
 public:


  virtual ~IFaceLog_releaseRootToken_pargs() throw();
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_releaseRootToken_result__isset {
  _IFaceLog_releaseRootToken_result__isset() : ex1(false), ex2(false) {}
  bool ex1 :1;
  bool ex2 :1;
} _IFaceLog_releaseRootToken_result__isset;

class IFaceLog_releaseRootToken_result {
 public:

  IFaceLog_releaseRootToken_result(const IFaceLog_releaseRootToken_result&);
  IFaceLog_releaseRootToken_result(IFaceLog_releaseRootToken_result&&);
  IFaceLog_releaseRootToken_result& operator=(const IFaceLog_releaseRootToken_result&);
  IFaceLog_releaseRootToken_result& operator=(IFaceLog_releaseRootToken_result&&);
  IFaceLog_releaseRootToken_result() {
  }

  virtual ~IFaceLog_releaseRootToken_result() throw();
  ServiceSecurityException ex1;
  ServiceRuntimeException ex2;

  _IFaceLog_releaseRootToken_result__isset __isset;

  void __set_ex1(const ServiceSecurityException& val);

  void __set_ex2(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_releaseRootToken_result & rhs) const
  {
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_releaseRootToken_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_releaseRootToken_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_releaseRootToken_presult__isset {
  _IFaceLog_releaseRootToken_presult__isset() : ex1(false), ex2(false) {}
  bool ex1 :1;
  bool ex2 :1;
} _IFaceLog_releaseRootToken_presult__isset;

class IFaceLog_releaseRootToken_presult {
 public:


  virtual ~IFaceLog_releaseRootToken_presult() throw();
  ServiceSecurityException ex1;
  ServiceRuntimeException ex2;

  _IFaceLog_releaseRootToken_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_releaseUserToken_args__isset {
  _IFaceLog_releaseUserToken_args__isset() : token(false) {}
  bool token :1;
} _IFaceLog_releaseUserToken_args__isset;

class IFaceLog_releaseUserToken_args {
 public:

  IFaceLog_releaseUserToken_args(const IFaceLog_releaseUserToken_args&);
  IFaceLog_releaseUserToken_args(IFaceLog_releaseUserToken_args&&);
  IFaceLog_releaseUserToken_args& operator=(const IFaceLog_releaseUserToken_args&);
  IFaceLog_releaseUserToken_args& operator=(IFaceLog_releaseUserToken_args&&);
  IFaceLog_releaseUserToken_args() {
  }

  virtual ~IFaceLog_releaseUserToken_args() throw();
  Token token;

  _IFaceLog_releaseUserToken_args__isset __isset;

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_releaseUserToken_args & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_releaseUserToken_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_releaseUserToken_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_releaseUserToken_pargs {
 public:


  virtual ~IFaceLog_releaseUserToken_pargs() throw();
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_releaseUserToken_result__isset {
  _IFaceLog_releaseUserToken_result__isset() : ex1(false), ex2(false) {}
  bool ex1 :1;
  bool ex2 :1;
} _IFaceLog_releaseUserToken_result__isset;

class IFaceLog_releaseUserToken_result {
 public:

  IFaceLog_releaseUserToken_result(const IFaceLog_releaseUserToken_result&);
  IFaceLog_releaseUserToken_result(IFaceLog_releaseUserToken_result&&);
  IFaceLog_releaseUserToken_result& operator=(const IFaceLog_releaseUserToken_result&);
  IFaceLog_releaseUserToken_result& operator=(IFaceLog_releaseUserToken_result&&);
  IFaceLog_releaseUserToken_result() {
  }

  virtual ~IFaceLog_releaseUserToken_result() throw();
  ServiceSecurityException ex1;
  ServiceRuntimeException ex2;

  _IFaceLog_releaseUserToken_result__isset __isset;

  void __set_ex1(const ServiceSecurityException& val);

  void __set_ex2(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_releaseUserToken_result & rhs) const
  {
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_releaseUserToken_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_releaseUserToken_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_releaseUserToken_presult__isset {
  _IFaceLog_releaseUserToken_presult__isset() : ex1(false), ex2(false) {}
  bool ex1 :1;
  bool ex2 :1;
} _IFaceLog_releaseUserToken_presult__isset;

class IFaceLog_releaseUserToken_presult {
 public:


  virtual ~IFaceLog_releaseUserToken_presult() throw();
  ServiceSecurityException ex1;
  ServiceRuntimeException ex2;

  _IFaceLog_releaseUserToken_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_replaceFeature_args__isset {
  _IFaceLog_replaceFeature_args__isset() : personId(false), featureMd5(false), token(false) {}
  bool personId :1;
  bool featureMd5 :1;
  bool token :1;
} _IFaceLog_replaceFeature_args__isset;

class IFaceLog_replaceFeature_args {
 public:

  IFaceLog_replaceFeature_args(const IFaceLog_replaceFeature_args&);
  IFaceLog_replaceFeature_args(IFaceLog_replaceFeature_args&&);
  IFaceLog_replaceFeature_args& operator=(const IFaceLog_replaceFeature_args&);
  IFaceLog_replaceFeature_args& operator=(IFaceLog_replaceFeature_args&&);
  IFaceLog_replaceFeature_args() : personId(0), featureMd5(), deleteOldFeatureImage(0) {
  }

  virtual ~IFaceLog_replaceFeature_args() throw();
  int32_t personId;
  std::string featureMd5;
  bool deleteOldFeatureImage;
  Token token;

  _IFaceLog_replaceFeature_args__isset __isset;

  void __set_personId(const int32_t val);

  void __set_featureMd5(const std::string& val);

  void __set_deleteOldFeatureImage(const bool val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_replaceFeature_args & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    if (!(featureMd5 == rhs.featureMd5))
      return false;
    if (!(deleteOldFeatureImage == rhs.deleteOldFeatureImage))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_replaceFeature_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_replaceFeature_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_replaceFeature_pargs {
 public:


  virtual ~IFaceLog_replaceFeature_pargs() throw();
  const int32_t* personId;
  const std::string* featureMd5;
  const bool* deleteOldFeatureImage;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_replaceFeature_result__isset {
  _IFaceLog_replaceFeature_result__isset() : ex1(false) {}
  bool ex1 :1;
} _IFaceLog_replaceFeature_result__isset;

class IFaceLog_replaceFeature_result {
 public:

  IFaceLog_replaceFeature_result(const IFaceLog_replaceFeature_result&);
  IFaceLog_replaceFeature_result(IFaceLog_replaceFeature_result&&);
  IFaceLog_replaceFeature_result& operator=(const IFaceLog_replaceFeature_result&);
  IFaceLog_replaceFeature_result& operator=(IFaceLog_replaceFeature_result&&);
  IFaceLog_replaceFeature_result() {
  }

  virtual ~IFaceLog_replaceFeature_result() throw();
  ServiceRuntimeException ex1;

  _IFaceLog_replaceFeature_result__isset __isset;

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_replaceFeature_result & rhs) const
  {
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_replaceFeature_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_replaceFeature_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_replaceFeature_presult__isset {
  _IFaceLog_replaceFeature_presult__isset() : ex1(false) {}
  bool ex1 :1;
} _IFaceLog_replaceFeature_presult__isset;

class IFaceLog_replaceFeature_presult {
 public:


  virtual ~IFaceLog_replaceFeature_presult() throw();
  ServiceRuntimeException ex1;

  _IFaceLog_replaceFeature_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_rootGroupOfDevice_args__isset {
  _IFaceLog_rootGroupOfDevice_args__isset() : deviceId(false) {}
  bool deviceId :1;
} _IFaceLog_rootGroupOfDevice_args__isset;

class IFaceLog_rootGroupOfDevice_args {
 public:

  IFaceLog_rootGroupOfDevice_args(const IFaceLog_rootGroupOfDevice_args&);
  IFaceLog_rootGroupOfDevice_args(IFaceLog_rootGroupOfDevice_args&&);
  IFaceLog_rootGroupOfDevice_args& operator=(const IFaceLog_rootGroupOfDevice_args&);
  IFaceLog_rootGroupOfDevice_args& operator=(IFaceLog_rootGroupOfDevice_args&&);
  IFaceLog_rootGroupOfDevice_args() : deviceId(0) {
  }

  virtual ~IFaceLog_rootGroupOfDevice_args() throw();
  int32_t deviceId;

  _IFaceLog_rootGroupOfDevice_args__isset __isset;

  void __set_deviceId(const int32_t val);

  bool operator == (const IFaceLog_rootGroupOfDevice_args & rhs) const
  {
    if (!(deviceId == rhs.deviceId))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_rootGroupOfDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_rootGroupOfDevice_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_rootGroupOfDevice_pargs {
 public:


  virtual ~IFaceLog_rootGroupOfDevice_pargs() throw();
  const int32_t* deviceId;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_rootGroupOfDevice_result__isset {
  _IFaceLog_rootGroupOfDevice_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_rootGroupOfDevice_result__isset;

class IFaceLog_rootGroupOfDevice_result {
 public:

  IFaceLog_rootGroupOfDevice_result(const IFaceLog_rootGroupOfDevice_result&);
  IFaceLog_rootGroupOfDevice_result(IFaceLog_rootGroupOfDevice_result&&);
  IFaceLog_rootGroupOfDevice_result& operator=(const IFaceLog_rootGroupOfDevice_result&);
  IFaceLog_rootGroupOfDevice_result& operator=(IFaceLog_rootGroupOfDevice_result&&);
  IFaceLog_rootGroupOfDevice_result() : success(0) {
  }

  virtual ~IFaceLog_rootGroupOfDevice_result() throw();
  int32_t success;
  ServiceRuntimeException ex1;

  _IFaceLog_rootGroupOfDevice_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_rootGroupOfDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_rootGroupOfDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_rootGroupOfDevice_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_rootGroupOfDevice_presult__isset {
  _IFaceLog_rootGroupOfDevice_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_rootGroupOfDevice_presult__isset;

class IFaceLog_rootGroupOfDevice_presult {
 public:


  virtual ~IFaceLog_rootGroupOfDevice_presult() throw();
  int32_t* success;
  ServiceRuntimeException ex1;

  _IFaceLog_rootGroupOfDevice_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_rootGroupOfPerson_args__isset {
  _IFaceLog_rootGroupOfPerson_args__isset() : personId(false) {}
  bool personId :1;
} _IFaceLog_rootGroupOfPerson_args__isset;

class IFaceLog_rootGroupOfPerson_args {
 public:

  IFaceLog_rootGroupOfPerson_args(const IFaceLog_rootGroupOfPerson_args&);
  IFaceLog_rootGroupOfPerson_args(IFaceLog_rootGroupOfPerson_args&&);
  IFaceLog_rootGroupOfPerson_args& operator=(const IFaceLog_rootGroupOfPerson_args&);
  IFaceLog_rootGroupOfPerson_args& operator=(IFaceLog_rootGroupOfPerson_args&&);
  IFaceLog_rootGroupOfPerson_args() : personId(0) {
  }

  virtual ~IFaceLog_rootGroupOfPerson_args() throw();
  int32_t personId;

  _IFaceLog_rootGroupOfPerson_args__isset __isset;

  void __set_personId(const int32_t val);

  bool operator == (const IFaceLog_rootGroupOfPerson_args & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_rootGroupOfPerson_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_rootGroupOfPerson_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_rootGroupOfPerson_pargs {
 public:


  virtual ~IFaceLog_rootGroupOfPerson_pargs() throw();
  const int32_t* personId;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_rootGroupOfPerson_result__isset {
  _IFaceLog_rootGroupOfPerson_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_rootGroupOfPerson_result__isset;

class IFaceLog_rootGroupOfPerson_result {
 public:

  IFaceLog_rootGroupOfPerson_result(const IFaceLog_rootGroupOfPerson_result&);
  IFaceLog_rootGroupOfPerson_result(IFaceLog_rootGroupOfPerson_result&&);
  IFaceLog_rootGroupOfPerson_result& operator=(const IFaceLog_rootGroupOfPerson_result&);
  IFaceLog_rootGroupOfPerson_result& operator=(IFaceLog_rootGroupOfPerson_result&&);
  IFaceLog_rootGroupOfPerson_result() : success(0) {
  }

  virtual ~IFaceLog_rootGroupOfPerson_result() throw();
  int32_t success;
  ServiceRuntimeException ex1;

  _IFaceLog_rootGroupOfPerson_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_rootGroupOfPerson_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_rootGroupOfPerson_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_rootGroupOfPerson_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_rootGroupOfPerson_presult__isset {
  _IFaceLog_rootGroupOfPerson_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_rootGroupOfPerson_presult__isset;

class IFaceLog_rootGroupOfPerson_presult {
 public:


  virtual ~IFaceLog_rootGroupOfPerson_presult() throw();
  int32_t* success;
  ServiceRuntimeException ex1;

  _IFaceLog_rootGroupOfPerson_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_runCmd_args__isset {
  _IFaceLog_runCmd_args__isset() : target(false), cmdpath(false), jsonArgs(false), ackChannel(false), token(false) {}
  bool target :1;
  bool cmdpath :1;
  bool jsonArgs :1;
  bool ackChannel :1;
  bool token :1;
} _IFaceLog_runCmd_args__isset;

class IFaceLog_runCmd_args {
 public:

  IFaceLog_runCmd_args(const IFaceLog_runCmd_args&);
  IFaceLog_runCmd_args(IFaceLog_runCmd_args&&);
  IFaceLog_runCmd_args& operator=(const IFaceLog_runCmd_args&);
  IFaceLog_runCmd_args& operator=(IFaceLog_runCmd_args&&);
  IFaceLog_runCmd_args() : group(0), cmdpath(), jsonArgs(), ackChannel() {
  }

  virtual ~IFaceLog_runCmd_args() throw();
  std::vector<int32_t>  target;
  bool group;
  std::string cmdpath;
  std::string jsonArgs;
  std::string ackChannel;
  Token token;

  _IFaceLog_runCmd_args__isset __isset;

  void __set_target(const std::vector<int32_t> & val);

  void __set_group(const bool val);

  void __set_cmdpath(const std::string& val);

  void __set_jsonArgs(const std::string& val);

  void __set_ackChannel(const std::string& val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_runCmd_args & rhs) const
  {
    if (!(target == rhs.target))
      return false;
    if (!(group == rhs.group))
      return false;
    if (!(cmdpath == rhs.cmdpath))
      return false;
    if (!(jsonArgs == rhs.jsonArgs))
      return false;
    if (!(ackChannel == rhs.ackChannel))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_runCmd_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_runCmd_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_runCmd_pargs {
 public:


  virtual ~IFaceLog_runCmd_pargs() throw();
  const std::vector<int32_t> * target;
  const bool* group;
  const std::string* cmdpath;
  const std::string* jsonArgs;
  const std::string* ackChannel;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_runCmd_result__isset {
  _IFaceLog_runCmd_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_runCmd_result__isset;

class IFaceLog_runCmd_result {
 public:

  IFaceLog_runCmd_result(const IFaceLog_runCmd_result&);
  IFaceLog_runCmd_result(IFaceLog_runCmd_result&&);
  IFaceLog_runCmd_result& operator=(const IFaceLog_runCmd_result&);
  IFaceLog_runCmd_result& operator=(IFaceLog_runCmd_result&&);
  IFaceLog_runCmd_result() : success() {
  }

  virtual ~IFaceLog_runCmd_result() throw();
  std::string success;
  ServiceRuntimeException ex1;

  _IFaceLog_runCmd_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_runCmd_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_runCmd_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_runCmd_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_runCmd_presult__isset {
  _IFaceLog_runCmd_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_runCmd_presult__isset;

class IFaceLog_runCmd_presult {
 public:


  virtual ~IFaceLog_runCmd_presult() throw();
  std::string* success;
  ServiceRuntimeException ex1;

  _IFaceLog_runCmd_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_runTask_args__isset {
  _IFaceLog_runTask_args__isset() : taskQueue(false), cmdpath(false), jsonArgs(false), ackChannel(false), token(false) {}
  bool taskQueue :1;
  bool cmdpath :1;
  bool jsonArgs :1;
  bool ackChannel :1;
  bool token :1;
} _IFaceLog_runTask_args__isset;

class IFaceLog_runTask_args {
 public:

  IFaceLog_runTask_args(const IFaceLog_runTask_args&);
  IFaceLog_runTask_args(IFaceLog_runTask_args&&);
  IFaceLog_runTask_args& operator=(const IFaceLog_runTask_args&);
  IFaceLog_runTask_args& operator=(IFaceLog_runTask_args&&);
  IFaceLog_runTask_args() : taskQueue(), cmdpath(), jsonArgs(), ackChannel() {
  }

  virtual ~IFaceLog_runTask_args() throw();
  std::string taskQueue;
  std::string cmdpath;
  std::string jsonArgs;
  std::string ackChannel;
  Token token;

  _IFaceLog_runTask_args__isset __isset;

  void __set_taskQueue(const std::string& val);

  void __set_cmdpath(const std::string& val);

  void __set_jsonArgs(const std::string& val);

  void __set_ackChannel(const std::string& val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_runTask_args & rhs) const
  {
    if (!(taskQueue == rhs.taskQueue))
      return false;
    if (!(cmdpath == rhs.cmdpath))
      return false;
    if (!(jsonArgs == rhs.jsonArgs))
      return false;
    if (!(ackChannel == rhs.ackChannel))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_runTask_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_runTask_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_runTask_pargs {
 public:


  virtual ~IFaceLog_runTask_pargs() throw();
  const std::string* taskQueue;
  const std::string* cmdpath;
  const std::string* jsonArgs;
  const std::string* ackChannel;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_runTask_result__isset {
  _IFaceLog_runTask_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_runTask_result__isset;

class IFaceLog_runTask_result {
 public:

  IFaceLog_runTask_result(const IFaceLog_runTask_result&);
  IFaceLog_runTask_result(IFaceLog_runTask_result&&);
  IFaceLog_runTask_result& operator=(const IFaceLog_runTask_result&);
  IFaceLog_runTask_result& operator=(IFaceLog_runTask_result&&);
  IFaceLog_runTask_result() : success(0) {
  }

  virtual ~IFaceLog_runTask_result() throw();
  int32_t success;
  ServiceRuntimeException ex1;

  _IFaceLog_runTask_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_runTask_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_runTask_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_runTask_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_runTask_presult__isset {
  _IFaceLog_runTask_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_runTask_presult__isset;

class IFaceLog_runTask_presult {
 public:


  virtual ~IFaceLog_runTask_presult() throw();
  int32_t* success;
  ServiceRuntimeException ex1;

  _IFaceLog_runTask_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_saveDevice_args__isset {
  _IFaceLog_saveDevice_args__isset() : deviceBean(false), token(false) {}
  bool deviceBean :1;
  bool token :1;
} _IFaceLog_saveDevice_args__isset;

class IFaceLog_saveDevice_args {
 public:

  IFaceLog_saveDevice_args(const IFaceLog_saveDevice_args&);
  IFaceLog_saveDevice_args(IFaceLog_saveDevice_args&&);
  IFaceLog_saveDevice_args& operator=(const IFaceLog_saveDevice_args&);
  IFaceLog_saveDevice_args& operator=(IFaceLog_saveDevice_args&&);
  IFaceLog_saveDevice_args() {
  }

  virtual ~IFaceLog_saveDevice_args() throw();
  DeviceBean deviceBean;
  Token token;

  _IFaceLog_saveDevice_args__isset __isset;

  void __set_deviceBean(const DeviceBean& val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_saveDevice_args & rhs) const
  {
    if (!(deviceBean == rhs.deviceBean))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_saveDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_saveDevice_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_saveDevice_pargs {
 public:


  virtual ~IFaceLog_saveDevice_pargs() throw();
  const DeviceBean* deviceBean;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_saveDevice_result__isset {
  _IFaceLog_saveDevice_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_saveDevice_result__isset;

class IFaceLog_saveDevice_result {
 public:

  IFaceLog_saveDevice_result(const IFaceLog_saveDevice_result&);
  IFaceLog_saveDevice_result(IFaceLog_saveDevice_result&&);
  IFaceLog_saveDevice_result& operator=(const IFaceLog_saveDevice_result&);
  IFaceLog_saveDevice_result& operator=(IFaceLog_saveDevice_result&&);
  IFaceLog_saveDevice_result() {
  }

  virtual ~IFaceLog_saveDevice_result() throw();
  DeviceBean success;
  ServiceRuntimeException ex1;

  _IFaceLog_saveDevice_result__isset __isset;

  void __set_success(const DeviceBean& val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_saveDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_saveDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_saveDevice_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_saveDevice_presult__isset {
  _IFaceLog_saveDevice_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_saveDevice_presult__isset;

class IFaceLog_saveDevice_presult {
 public:


  virtual ~IFaceLog_saveDevice_presult() throw();
  DeviceBean* success;
  ServiceRuntimeException ex1;

  _IFaceLog_saveDevice_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_saveDeviceGroup_args__isset {
  _IFaceLog_saveDeviceGroup_args__isset() : deviceGroupBean(false), token(false) {}
  bool deviceGroupBean :1;
  bool token :1;
} _IFaceLog_saveDeviceGroup_args__isset;

class IFaceLog_saveDeviceGroup_args {
 public:

  IFaceLog_saveDeviceGroup_args(const IFaceLog_saveDeviceGroup_args&);
  IFaceLog_saveDeviceGroup_args(IFaceLog_saveDeviceGroup_args&&);
  IFaceLog_saveDeviceGroup_args& operator=(const IFaceLog_saveDeviceGroup_args&);
  IFaceLog_saveDeviceGroup_args& operator=(IFaceLog_saveDeviceGroup_args&&);
  IFaceLog_saveDeviceGroup_args() {
  }

  virtual ~IFaceLog_saveDeviceGroup_args() throw();
  DeviceGroupBean deviceGroupBean;
  Token token;

  _IFaceLog_saveDeviceGroup_args__isset __isset;

  void __set_deviceGroupBean(const DeviceGroupBean& val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_saveDeviceGroup_args & rhs) const
  {
    if (!(deviceGroupBean == rhs.deviceGroupBean))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_saveDeviceGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_saveDeviceGroup_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_saveDeviceGroup_pargs {
 public:


  virtual ~IFaceLog_saveDeviceGroup_pargs() throw();
  const DeviceGroupBean* deviceGroupBean;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_saveDeviceGroup_result__isset {
  _IFaceLog_saveDeviceGroup_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_saveDeviceGroup_result__isset;

class IFaceLog_saveDeviceGroup_result {
 public:

  IFaceLog_saveDeviceGroup_result(const IFaceLog_saveDeviceGroup_result&);
  IFaceLog_saveDeviceGroup_result(IFaceLog_saveDeviceGroup_result&&);
  IFaceLog_saveDeviceGroup_result& operator=(const IFaceLog_saveDeviceGroup_result&);
  IFaceLog_saveDeviceGroup_result& operator=(IFaceLog_saveDeviceGroup_result&&);
  IFaceLog_saveDeviceGroup_result() {
  }

  virtual ~IFaceLog_saveDeviceGroup_result() throw();
  DeviceGroupBean success;
  ServiceRuntimeException ex1;

  _IFaceLog_saveDeviceGroup_result__isset __isset;

  void __set_success(const DeviceGroupBean& val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_saveDeviceGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_saveDeviceGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_saveDeviceGroup_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_saveDeviceGroup_presult__isset {
  _IFaceLog_saveDeviceGroup_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_saveDeviceGroup_presult__isset;

class IFaceLog_saveDeviceGroup_presult {
 public:


  virtual ~IFaceLog_saveDeviceGroup_presult() throw();
  DeviceGroupBean* success;
  ServiceRuntimeException ex1;

  _IFaceLog_saveDeviceGroup_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_savePermit_args__isset {
  _IFaceLog_savePermit_args__isset() : permitBean(false), token(false) {}
  bool permitBean :1;
  bool token :1;
} _IFaceLog_savePermit_args__isset;

class IFaceLog_savePermit_args {
 public:

  IFaceLog_savePermit_args(const IFaceLog_savePermit_args&);
  IFaceLog_savePermit_args(IFaceLog_savePermit_args&&);
  IFaceLog_savePermit_args& operator=(const IFaceLog_savePermit_args&);
  IFaceLog_savePermit_args& operator=(IFaceLog_savePermit_args&&);
  IFaceLog_savePermit_args() {
  }

  virtual ~IFaceLog_savePermit_args() throw();
  PermitBean permitBean;
  Token token;

  _IFaceLog_savePermit_args__isset __isset;

  void __set_permitBean(const PermitBean& val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_savePermit_args & rhs) const
  {
    if (!(permitBean == rhs.permitBean))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_savePermit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_savePermit_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_savePermit_pargs {
 public:


  virtual ~IFaceLog_savePermit_pargs() throw();
  const PermitBean* permitBean;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_savePermit_result__isset {
  _IFaceLog_savePermit_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_savePermit_result__isset;

class IFaceLog_savePermit_result {
 public:

  IFaceLog_savePermit_result(const IFaceLog_savePermit_result&);
  IFaceLog_savePermit_result(IFaceLog_savePermit_result&&);
  IFaceLog_savePermit_result& operator=(const IFaceLog_savePermit_result&);
  IFaceLog_savePermit_result& operator=(IFaceLog_savePermit_result&&);
  IFaceLog_savePermit_result() {
  }

  virtual ~IFaceLog_savePermit_result() throw();
  PermitBean success;
  ServiceRuntimeException ex1;

  _IFaceLog_savePermit_result__isset __isset;

  void __set_success(const PermitBean& val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_savePermit_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_savePermit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_savePermit_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_savePermit_presult__isset {
  _IFaceLog_savePermit_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_savePermit_presult__isset;

class IFaceLog_savePermit_presult {
 public:


  virtual ~IFaceLog_savePermit_presult() throw();
  PermitBean* success;
  ServiceRuntimeException ex1;

  _IFaceLog_savePermit_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_savePermitWithColumn_args__isset {
  _IFaceLog_savePermitWithColumn_args__isset() : column(false), value(false), token(false) {}
  bool column :1;
  bool value :1;
  bool token :1;
} _IFaceLog_savePermitWithColumn_args__isset;

class IFaceLog_savePermitWithColumn_args {
 public:

  IFaceLog_savePermitWithColumn_args(const IFaceLog_savePermitWithColumn_args&);
  IFaceLog_savePermitWithColumn_args(IFaceLog_savePermitWithColumn_args&&);
  IFaceLog_savePermitWithColumn_args& operator=(const IFaceLog_savePermitWithColumn_args&);
  IFaceLog_savePermitWithColumn_args& operator=(IFaceLog_savePermitWithColumn_args&&);
  IFaceLog_savePermitWithColumn_args() : deviceGroupId(0), personGroupId(0), column(), value() {
  }

  virtual ~IFaceLog_savePermitWithColumn_args() throw();
  int32_t deviceGroupId;
  int32_t personGroupId;
  std::string column;
  std::string value;
  Token token;

  _IFaceLog_savePermitWithColumn_args__isset __isset;

  void __set_deviceGroupId(const int32_t val);

  void __set_personGroupId(const int32_t val);

  void __set_column(const std::string& val);

  void __set_value(const std::string& val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_savePermitWithColumn_args & rhs) const
  {
    if (!(deviceGroupId == rhs.deviceGroupId))
      return false;
    if (!(personGroupId == rhs.personGroupId))
      return false;
    if (!(column == rhs.column))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_savePermitWithColumn_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_savePermitWithColumn_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_savePermitWithColumn_pargs {
 public:


  virtual ~IFaceLog_savePermitWithColumn_pargs() throw();
  const int32_t* deviceGroupId;
  const int32_t* personGroupId;
  const std::string* column;
  const std::string* value;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_savePermitWithColumn_result__isset {
  _IFaceLog_savePermitWithColumn_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_savePermitWithColumn_result__isset;

class IFaceLog_savePermitWithColumn_result {
 public:

  IFaceLog_savePermitWithColumn_result(const IFaceLog_savePermitWithColumn_result&);
  IFaceLog_savePermitWithColumn_result(IFaceLog_savePermitWithColumn_result&&);
  IFaceLog_savePermitWithColumn_result& operator=(const IFaceLog_savePermitWithColumn_result&);
  IFaceLog_savePermitWithColumn_result& operator=(IFaceLog_savePermitWithColumn_result&&);
  IFaceLog_savePermitWithColumn_result() {
  }

  virtual ~IFaceLog_savePermitWithColumn_result() throw();
  PermitBean success;
  ServiceRuntimeException ex1;

  _IFaceLog_savePermitWithColumn_result__isset __isset;

  void __set_success(const PermitBean& val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_savePermitWithColumn_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_savePermitWithColumn_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_savePermitWithColumn_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_savePermitWithColumn_presult__isset {
  _IFaceLog_savePermitWithColumn_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_savePermitWithColumn_presult__isset;

class IFaceLog_savePermitWithColumn_presult {
 public:


  virtual ~IFaceLog_savePermitWithColumn_presult() throw();
  PermitBean* success;
  ServiceRuntimeException ex1;

  _IFaceLog_savePermitWithColumn_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_savePerson_args__isset {
  _IFaceLog_savePerson_args__isset() : personBean(false), token(false) {}
  bool personBean :1;
  bool token :1;
} _IFaceLog_savePerson_args__isset;

class IFaceLog_savePerson_args {
 public:

  IFaceLog_savePerson_args(const IFaceLog_savePerson_args&);
  IFaceLog_savePerson_args(IFaceLog_savePerson_args&&);
  IFaceLog_savePerson_args& operator=(const IFaceLog_savePerson_args&);
  IFaceLog_savePerson_args& operator=(IFaceLog_savePerson_args&&);
  IFaceLog_savePerson_args() {
  }

  virtual ~IFaceLog_savePerson_args() throw();
  PersonBean personBean;
  Token token;

  _IFaceLog_savePerson_args__isset __isset;

  void __set_personBean(const PersonBean& val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_savePerson_args & rhs) const
  {
    if (!(personBean == rhs.personBean))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_savePerson_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_savePerson_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_savePerson_pargs {
 public:


  virtual ~IFaceLog_savePerson_pargs() throw();
  const PersonBean* personBean;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_savePerson_result__isset {
  _IFaceLog_savePerson_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_savePerson_result__isset;

class IFaceLog_savePerson_result {
 public:

  IFaceLog_savePerson_result(const IFaceLog_savePerson_result&);
  IFaceLog_savePerson_result(IFaceLog_savePerson_result&&);
  IFaceLog_savePerson_result& operator=(const IFaceLog_savePerson_result&);
  IFaceLog_savePerson_result& operator=(IFaceLog_savePerson_result&&);
  IFaceLog_savePerson_result() {
  }

  virtual ~IFaceLog_savePerson_result() throw();
  PersonBean success;
  ServiceRuntimeException ex1;

  _IFaceLog_savePerson_result__isset __isset;

  void __set_success(const PersonBean& val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_savePerson_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_savePerson_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_savePerson_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_savePerson_presult__isset {
  _IFaceLog_savePerson_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_savePerson_presult__isset;

class IFaceLog_savePerson_presult {
 public:


  virtual ~IFaceLog_savePerson_presult() throw();
  PersonBean* success;
  ServiceRuntimeException ex1;

  _IFaceLog_savePerson_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_savePersonFull_args__isset {
  _IFaceLog_savePersonFull_args__isset() : personBean(false), idPhoto(false), feature(false), featureVersion(false), featureImage(false), faceBean(false), token(false) {}
  bool personBean :1;
  bool idPhoto :1;
  bool feature :1;
  bool featureVersion :1;
  bool featureImage :1;
  bool faceBean :1;
  bool token :1;
} _IFaceLog_savePersonFull_args__isset;

class IFaceLog_savePersonFull_args {
 public:

  IFaceLog_savePersonFull_args(const IFaceLog_savePersonFull_args&);
  IFaceLog_savePersonFull_args(IFaceLog_savePersonFull_args&&);
  IFaceLog_savePersonFull_args& operator=(const IFaceLog_savePersonFull_args&);
  IFaceLog_savePersonFull_args& operator=(IFaceLog_savePersonFull_args&&);
  IFaceLog_savePersonFull_args() : idPhoto(), feature(), featureVersion(), featureImage() {
  }

  virtual ~IFaceLog_savePersonFull_args() throw();
  PersonBean personBean;
  std::string idPhoto;
  std::string feature;
  std::string featureVersion;
  std::string featureImage;
  FaceBean faceBean;
  Token token;

  _IFaceLog_savePersonFull_args__isset __isset;

  void __set_personBean(const PersonBean& val);

  void __set_idPhoto(const std::string& val);

  void __set_feature(const std::string& val);

  void __set_featureVersion(const std::string& val);

  void __set_featureImage(const std::string& val);

  void __set_faceBean(const FaceBean& val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_savePersonFull_args & rhs) const
  {
    if (!(personBean == rhs.personBean))
      return false;
    if (!(idPhoto == rhs.idPhoto))
      return false;
    if (!(feature == rhs.feature))
      return false;
    if (!(featureVersion == rhs.featureVersion))
      return false;
    if (!(featureImage == rhs.featureImage))
      return false;
    if (!(faceBean == rhs.faceBean))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_savePersonFull_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_savePersonFull_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_savePersonFull_pargs {
 public:


  virtual ~IFaceLog_savePersonFull_pargs() throw();
  const PersonBean* personBean;
  const std::string* idPhoto;
  const std::string* feature;
  const std::string* featureVersion;
  const std::string* featureImage;
  const FaceBean* faceBean;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_savePersonFull_result__isset {
  _IFaceLog_savePersonFull_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_savePersonFull_result__isset;

class IFaceLog_savePersonFull_result {
 public:

  IFaceLog_savePersonFull_result(const IFaceLog_savePersonFull_result&);
  IFaceLog_savePersonFull_result(IFaceLog_savePersonFull_result&&);
  IFaceLog_savePersonFull_result& operator=(const IFaceLog_savePersonFull_result&);
  IFaceLog_savePersonFull_result& operator=(IFaceLog_savePersonFull_result&&);
  IFaceLog_savePersonFull_result() {
  }

  virtual ~IFaceLog_savePersonFull_result() throw();
  PersonBean success;
  ServiceRuntimeException ex1;

  _IFaceLog_savePersonFull_result__isset __isset;

  void __set_success(const PersonBean& val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_savePersonFull_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_savePersonFull_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_savePersonFull_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_savePersonFull_presult__isset {
  _IFaceLog_savePersonFull_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_savePersonFull_presult__isset;

class IFaceLog_savePersonFull_presult {
 public:


  virtual ~IFaceLog_savePersonFull_presult() throw();
  PersonBean* success;
  ServiceRuntimeException ex1;

  _IFaceLog_savePersonFull_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_savePersonGroup_args__isset {
  _IFaceLog_savePersonGroup_args__isset() : personGroupBean(false), token(false) {}
  bool personGroupBean :1;
  bool token :1;
} _IFaceLog_savePersonGroup_args__isset;

class IFaceLog_savePersonGroup_args {
 public:

  IFaceLog_savePersonGroup_args(const IFaceLog_savePersonGroup_args&);
  IFaceLog_savePersonGroup_args(IFaceLog_savePersonGroup_args&&);
  IFaceLog_savePersonGroup_args& operator=(const IFaceLog_savePersonGroup_args&);
  IFaceLog_savePersonGroup_args& operator=(IFaceLog_savePersonGroup_args&&);
  IFaceLog_savePersonGroup_args() {
  }

  virtual ~IFaceLog_savePersonGroup_args() throw();
  PersonGroupBean personGroupBean;
  Token token;

  _IFaceLog_savePersonGroup_args__isset __isset;

  void __set_personGroupBean(const PersonGroupBean& val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_savePersonGroup_args & rhs) const
  {
    if (!(personGroupBean == rhs.personGroupBean))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_savePersonGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_savePersonGroup_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_savePersonGroup_pargs {
 public:


  virtual ~IFaceLog_savePersonGroup_pargs() throw();
  const PersonGroupBean* personGroupBean;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_savePersonGroup_result__isset {
  _IFaceLog_savePersonGroup_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_savePersonGroup_result__isset;

class IFaceLog_savePersonGroup_result {
 public:

  IFaceLog_savePersonGroup_result(const IFaceLog_savePersonGroup_result&);
  IFaceLog_savePersonGroup_result(IFaceLog_savePersonGroup_result&&);
  IFaceLog_savePersonGroup_result& operator=(const IFaceLog_savePersonGroup_result&);
  IFaceLog_savePersonGroup_result& operator=(IFaceLog_savePersonGroup_result&&);
  IFaceLog_savePersonGroup_result() {
  }

  virtual ~IFaceLog_savePersonGroup_result() throw();
  PersonGroupBean success;
  ServiceRuntimeException ex1;

  _IFaceLog_savePersonGroup_result__isset __isset;

  void __set_success(const PersonGroupBean& val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_savePersonGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_savePersonGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_savePersonGroup_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_savePersonGroup_presult__isset {
  _IFaceLog_savePersonGroup_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_savePersonGroup_presult__isset;

class IFaceLog_savePersonGroup_presult {
 public:


  virtual ~IFaceLog_savePersonGroup_presult() throw();
  PersonGroupBean* success;
  ServiceRuntimeException ex1;

  _IFaceLog_savePersonGroup_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_savePersonWithPhoto_args__isset {
  _IFaceLog_savePersonWithPhoto_args__isset() : personBean(false), idPhoto(false), token(false) {}
  bool personBean :1;
  bool idPhoto :1;
  bool token :1;
} _IFaceLog_savePersonWithPhoto_args__isset;

class IFaceLog_savePersonWithPhoto_args {
 public:

  IFaceLog_savePersonWithPhoto_args(const IFaceLog_savePersonWithPhoto_args&);
  IFaceLog_savePersonWithPhoto_args(IFaceLog_savePersonWithPhoto_args&&);
  IFaceLog_savePersonWithPhoto_args& operator=(const IFaceLog_savePersonWithPhoto_args&);
  IFaceLog_savePersonWithPhoto_args& operator=(IFaceLog_savePersonWithPhoto_args&&);
  IFaceLog_savePersonWithPhoto_args() : idPhoto() {
  }

  virtual ~IFaceLog_savePersonWithPhoto_args() throw();
  PersonBean personBean;
  std::string idPhoto;
  Token token;

  _IFaceLog_savePersonWithPhoto_args__isset __isset;

  void __set_personBean(const PersonBean& val);

  void __set_idPhoto(const std::string& val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_savePersonWithPhoto_args & rhs) const
  {
    if (!(personBean == rhs.personBean))
      return false;
    if (!(idPhoto == rhs.idPhoto))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_savePersonWithPhoto_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_savePersonWithPhoto_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_savePersonWithPhoto_pargs {
 public:


  virtual ~IFaceLog_savePersonWithPhoto_pargs() throw();
  const PersonBean* personBean;
  const std::string* idPhoto;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_savePersonWithPhoto_result__isset {
  _IFaceLog_savePersonWithPhoto_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_savePersonWithPhoto_result__isset;

class IFaceLog_savePersonWithPhoto_result {
 public:

  IFaceLog_savePersonWithPhoto_result(const IFaceLog_savePersonWithPhoto_result&);
  IFaceLog_savePersonWithPhoto_result(IFaceLog_savePersonWithPhoto_result&&);
  IFaceLog_savePersonWithPhoto_result& operator=(const IFaceLog_savePersonWithPhoto_result&);
  IFaceLog_savePersonWithPhoto_result& operator=(IFaceLog_savePersonWithPhoto_result&&);
  IFaceLog_savePersonWithPhoto_result() {
  }

  virtual ~IFaceLog_savePersonWithPhoto_result() throw();
  PersonBean success;
  ServiceRuntimeException ex1;

  _IFaceLog_savePersonWithPhoto_result__isset __isset;

  void __set_success(const PersonBean& val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_savePersonWithPhoto_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_savePersonWithPhoto_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_savePersonWithPhoto_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_savePersonWithPhoto_presult__isset {
  _IFaceLog_savePersonWithPhoto_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_savePersonWithPhoto_presult__isset;

class IFaceLog_savePersonWithPhoto_presult {
 public:


  virtual ~IFaceLog_savePersonWithPhoto_presult() throw();
  PersonBean* success;
  ServiceRuntimeException ex1;

  _IFaceLog_savePersonWithPhoto_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_savePersonWithPhotoAndFeature_args__isset {
  _IFaceLog_savePersonWithPhotoAndFeature_args__isset() : personBean(false), idPhoto(false), featureBean(false), token(false) {}
  bool personBean :1;
  bool idPhoto :1;
  bool featureBean :1;
  bool token :1;
} _IFaceLog_savePersonWithPhotoAndFeature_args__isset;

class IFaceLog_savePersonWithPhotoAndFeature_args {
 public:

  IFaceLog_savePersonWithPhotoAndFeature_args(const IFaceLog_savePersonWithPhotoAndFeature_args&);
  IFaceLog_savePersonWithPhotoAndFeature_args(IFaceLog_savePersonWithPhotoAndFeature_args&&);
  IFaceLog_savePersonWithPhotoAndFeature_args& operator=(const IFaceLog_savePersonWithPhotoAndFeature_args&);
  IFaceLog_savePersonWithPhotoAndFeature_args& operator=(IFaceLog_savePersonWithPhotoAndFeature_args&&);
  IFaceLog_savePersonWithPhotoAndFeature_args() : idPhoto() {
  }

  virtual ~IFaceLog_savePersonWithPhotoAndFeature_args() throw();
  PersonBean personBean;
  std::string idPhoto;
  FeatureBean featureBean;
  Token token;

  _IFaceLog_savePersonWithPhotoAndFeature_args__isset __isset;

  void __set_personBean(const PersonBean& val);

  void __set_idPhoto(const std::string& val);

  void __set_featureBean(const FeatureBean& val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_savePersonWithPhotoAndFeature_args & rhs) const
  {
    if (!(personBean == rhs.personBean))
      return false;
    if (!(idPhoto == rhs.idPhoto))
      return false;
    if (!(featureBean == rhs.featureBean))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_savePersonWithPhotoAndFeature_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_savePersonWithPhotoAndFeature_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_savePersonWithPhotoAndFeature_pargs {
 public:


  virtual ~IFaceLog_savePersonWithPhotoAndFeature_pargs() throw();
  const PersonBean* personBean;
  const std::string* idPhoto;
  const FeatureBean* featureBean;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_savePersonWithPhotoAndFeature_result__isset {
  _IFaceLog_savePersonWithPhotoAndFeature_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_savePersonWithPhotoAndFeature_result__isset;

class IFaceLog_savePersonWithPhotoAndFeature_result {
 public:

  IFaceLog_savePersonWithPhotoAndFeature_result(const IFaceLog_savePersonWithPhotoAndFeature_result&);
  IFaceLog_savePersonWithPhotoAndFeature_result(IFaceLog_savePersonWithPhotoAndFeature_result&&);
  IFaceLog_savePersonWithPhotoAndFeature_result& operator=(const IFaceLog_savePersonWithPhotoAndFeature_result&);
  IFaceLog_savePersonWithPhotoAndFeature_result& operator=(IFaceLog_savePersonWithPhotoAndFeature_result&&);
  IFaceLog_savePersonWithPhotoAndFeature_result() {
  }

  virtual ~IFaceLog_savePersonWithPhotoAndFeature_result() throw();
  PersonBean success;
  ServiceRuntimeException ex1;

  _IFaceLog_savePersonWithPhotoAndFeature_result__isset __isset;

  void __set_success(const PersonBean& val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_savePersonWithPhotoAndFeature_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_savePersonWithPhotoAndFeature_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_savePersonWithPhotoAndFeature_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_savePersonWithPhotoAndFeature_presult__isset {
  _IFaceLog_savePersonWithPhotoAndFeature_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_savePersonWithPhotoAndFeature_presult__isset;

class IFaceLog_savePersonWithPhotoAndFeature_presult {
 public:


  virtual ~IFaceLog_savePersonWithPhotoAndFeature_presult() throw();
  PersonBean* success;
  ServiceRuntimeException ex1;

  _IFaceLog_savePersonWithPhotoAndFeature_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args__isset {
  _IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args__isset() : personBean(false), idPhoto(false), feature(false), featureVersion(false), faceBeans(false), token(false) {}
  bool personBean :1;
  bool idPhoto :1;
  bool feature :1;
  bool featureVersion :1;
  bool faceBeans :1;
  bool token :1;
} _IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args__isset;

class IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args {
 public:

  IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args(const IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args&);
  IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args(IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args&&);
  IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args& operator=(const IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args&);
  IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args& operator=(IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args&&);
  IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args() : idPhoto(), feature(), featureVersion() {
  }

  virtual ~IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args() throw();
  PersonBean personBean;
  std::string idPhoto;
  std::string feature;
  std::string featureVersion;
  std::vector<FaceBean>  faceBeans;
  Token token;

  _IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args__isset __isset;

  void __set_personBean(const PersonBean& val);

  void __set_idPhoto(const std::string& val);

  void __set_feature(const std::string& val);

  void __set_featureVersion(const std::string& val);

  void __set_faceBeans(const std::vector<FaceBean> & val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args & rhs) const
  {
    if (!(personBean == rhs.personBean))
      return false;
    if (!(idPhoto == rhs.idPhoto))
      return false;
    if (!(feature == rhs.feature))
      return false;
    if (!(featureVersion == rhs.featureVersion))
      return false;
    if (!(faceBeans == rhs.faceBeans))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_pargs {
 public:


  virtual ~IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_pargs() throw();
  const PersonBean* personBean;
  const std::string* idPhoto;
  const std::string* feature;
  const std::string* featureVersion;
  const std::vector<FaceBean> * faceBeans;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result__isset {
  _IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result__isset;

class IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result {
 public:

  IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result(const IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result&);
  IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result(IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result&&);
  IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result& operator=(const IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result&);
  IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result& operator=(IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result&&);
  IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result() {
  }

  virtual ~IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result() throw();
  PersonBean success;
  ServiceRuntimeException ex1;

  _IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result__isset __isset;

  void __set_success(const PersonBean& val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_presult__isset {
  _IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_presult__isset;

class IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_presult {
 public:


  virtual ~IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_presult() throw();
  PersonBean* success;
  ServiceRuntimeException ex1;

  _IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args__isset {
  _IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args__isset() : personBean(false), idPhoto(false), feature(false), featureVersion(false), photos(false), faces(false), token(false) {}
  bool personBean :1;
  bool idPhoto :1;
  bool feature :1;
  bool featureVersion :1;
  bool photos :1;
  bool faces :1;
  bool token :1;
} _IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args__isset;

class IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args {
 public:

  IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args(const IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args&);
  IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args(IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args&&);
  IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args& operator=(const IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args&);
  IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args& operator=(IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args&&);
  IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args() : idPhoto(), feature(), featureVersion() {
  }

  virtual ~IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args() throw();
  PersonBean personBean;
  std::string idPhoto;
  std::string feature;
  std::string featureVersion;
  std::vector<std::string>  photos;
  std::vector<FaceBean>  faces;
  Token token;

  _IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args__isset __isset;

  void __set_personBean(const PersonBean& val);

  void __set_idPhoto(const std::string& val);

  void __set_feature(const std::string& val);

  void __set_featureVersion(const std::string& val);

  void __set_photos(const std::vector<std::string> & val);

  void __set_faces(const std::vector<FaceBean> & val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args & rhs) const
  {
    if (!(personBean == rhs.personBean))
      return false;
    if (!(idPhoto == rhs.idPhoto))
      return false;
    if (!(feature == rhs.feature))
      return false;
    if (!(featureVersion == rhs.featureVersion))
      return false;
    if (!(photos == rhs.photos))
      return false;
    if (!(faces == rhs.faces))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_savePersonWithPhotoAndFeatureMultiImage_pargs {
 public:


  virtual ~IFaceLog_savePersonWithPhotoAndFeatureMultiImage_pargs() throw();
  const PersonBean* personBean;
  const std::string* idPhoto;
  const std::string* feature;
  const std::string* featureVersion;
  const std::vector<std::string> * photos;
  const std::vector<FaceBean> * faces;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result__isset {
  _IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result__isset;

class IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result {
 public:

  IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result(const IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result&);
  IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result(IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result&&);
  IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result& operator=(const IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result&);
  IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result& operator=(IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result&&);
  IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result() {
  }

  virtual ~IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result() throw();
  PersonBean success;
  ServiceRuntimeException ex1;

  _IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result__isset __isset;

  void __set_success(const PersonBean& val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_savePersonWithPhotoAndFeatureMultiImage_presult__isset {
  _IFaceLog_savePersonWithPhotoAndFeatureMultiImage_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_savePersonWithPhotoAndFeatureMultiImage_presult__isset;

class IFaceLog_savePersonWithPhotoAndFeatureMultiImage_presult {
 public:


  virtual ~IFaceLog_savePersonWithPhotoAndFeatureMultiImage_presult() throw();
  PersonBean* success;
  ServiceRuntimeException ex1;

  _IFaceLog_savePersonWithPhotoAndFeatureMultiImage_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_savePersonWithPhotoAndFeatureSaved_args__isset {
  _IFaceLog_savePersonWithPhotoAndFeatureSaved_args__isset() : personBean(false), idPhotoMd5(false), featureMd5(false), token(false) {}
  bool personBean :1;
  bool idPhotoMd5 :1;
  bool featureMd5 :1;
  bool token :1;
} _IFaceLog_savePersonWithPhotoAndFeatureSaved_args__isset;

class IFaceLog_savePersonWithPhotoAndFeatureSaved_args {
 public:

  IFaceLog_savePersonWithPhotoAndFeatureSaved_args(const IFaceLog_savePersonWithPhotoAndFeatureSaved_args&);
  IFaceLog_savePersonWithPhotoAndFeatureSaved_args(IFaceLog_savePersonWithPhotoAndFeatureSaved_args&&);
  IFaceLog_savePersonWithPhotoAndFeatureSaved_args& operator=(const IFaceLog_savePersonWithPhotoAndFeatureSaved_args&);
  IFaceLog_savePersonWithPhotoAndFeatureSaved_args& operator=(IFaceLog_savePersonWithPhotoAndFeatureSaved_args&&);
  IFaceLog_savePersonWithPhotoAndFeatureSaved_args() : idPhotoMd5(), featureMd5() {
  }

  virtual ~IFaceLog_savePersonWithPhotoAndFeatureSaved_args() throw();
  PersonBean personBean;
  std::string idPhotoMd5;
  std::string featureMd5;
  Token token;

  _IFaceLog_savePersonWithPhotoAndFeatureSaved_args__isset __isset;

  void __set_personBean(const PersonBean& val);

  void __set_idPhotoMd5(const std::string& val);

  void __set_featureMd5(const std::string& val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_savePersonWithPhotoAndFeatureSaved_args & rhs) const
  {
    if (!(personBean == rhs.personBean))
      return false;
    if (!(idPhotoMd5 == rhs.idPhotoMd5))
      return false;
    if (!(featureMd5 == rhs.featureMd5))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_savePersonWithPhotoAndFeatureSaved_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_savePersonWithPhotoAndFeatureSaved_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_savePersonWithPhotoAndFeatureSaved_pargs {
 public:


  virtual ~IFaceLog_savePersonWithPhotoAndFeatureSaved_pargs() throw();
  const PersonBean* personBean;
  const std::string* idPhotoMd5;
  const std::string* featureMd5;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_savePersonWithPhotoAndFeatureSaved_result__isset {
  _IFaceLog_savePersonWithPhotoAndFeatureSaved_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_savePersonWithPhotoAndFeatureSaved_result__isset;

class IFaceLog_savePersonWithPhotoAndFeatureSaved_result {
 public:

  IFaceLog_savePersonWithPhotoAndFeatureSaved_result(const IFaceLog_savePersonWithPhotoAndFeatureSaved_result&);
  IFaceLog_savePersonWithPhotoAndFeatureSaved_result(IFaceLog_savePersonWithPhotoAndFeatureSaved_result&&);
  IFaceLog_savePersonWithPhotoAndFeatureSaved_result& operator=(const IFaceLog_savePersonWithPhotoAndFeatureSaved_result&);
  IFaceLog_savePersonWithPhotoAndFeatureSaved_result& operator=(IFaceLog_savePersonWithPhotoAndFeatureSaved_result&&);
  IFaceLog_savePersonWithPhotoAndFeatureSaved_result() {
  }

  virtual ~IFaceLog_savePersonWithPhotoAndFeatureSaved_result() throw();
  PersonBean success;
  ServiceRuntimeException ex1;

  _IFaceLog_savePersonWithPhotoAndFeatureSaved_result__isset __isset;

  void __set_success(const PersonBean& val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_savePersonWithPhotoAndFeatureSaved_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_savePersonWithPhotoAndFeatureSaved_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_savePersonWithPhotoAndFeatureSaved_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_savePersonWithPhotoAndFeatureSaved_presult__isset {
  _IFaceLog_savePersonWithPhotoAndFeatureSaved_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_savePersonWithPhotoAndFeatureSaved_presult__isset;

class IFaceLog_savePersonWithPhotoAndFeatureSaved_presult {
 public:


  virtual ~IFaceLog_savePersonWithPhotoAndFeatureSaved_presult() throw();
  PersonBean* success;
  ServiceRuntimeException ex1;

  _IFaceLog_savePersonWithPhotoAndFeatureSaved_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_savePersons_args__isset {
  _IFaceLog_savePersons_args__isset() : persons(false), token(false) {}
  bool persons :1;
  bool token :1;
} _IFaceLog_savePersons_args__isset;

class IFaceLog_savePersons_args {
 public:

  IFaceLog_savePersons_args(const IFaceLog_savePersons_args&);
  IFaceLog_savePersons_args(IFaceLog_savePersons_args&&);
  IFaceLog_savePersons_args& operator=(const IFaceLog_savePersons_args&);
  IFaceLog_savePersons_args& operator=(IFaceLog_savePersons_args&&);
  IFaceLog_savePersons_args() {
  }

  virtual ~IFaceLog_savePersons_args() throw();
  std::vector<PersonBean>  persons;
  Token token;

  _IFaceLog_savePersons_args__isset __isset;

  void __set_persons(const std::vector<PersonBean> & val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_savePersons_args & rhs) const
  {
    if (!(persons == rhs.persons))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_savePersons_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_savePersons_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_savePersons_pargs {
 public:


  virtual ~IFaceLog_savePersons_pargs() throw();
  const std::vector<PersonBean> * persons;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_savePersons_result__isset {
  _IFaceLog_savePersons_result__isset() : ex1(false) {}
  bool ex1 :1;
} _IFaceLog_savePersons_result__isset;

class IFaceLog_savePersons_result {
 public:

  IFaceLog_savePersons_result(const IFaceLog_savePersons_result&);
  IFaceLog_savePersons_result(IFaceLog_savePersons_result&&);
  IFaceLog_savePersons_result& operator=(const IFaceLog_savePersons_result&);
  IFaceLog_savePersons_result& operator=(IFaceLog_savePersons_result&&);
  IFaceLog_savePersons_result() {
  }

  virtual ~IFaceLog_savePersons_result() throw();
  ServiceRuntimeException ex1;

  _IFaceLog_savePersons_result__isset __isset;

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_savePersons_result & rhs) const
  {
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_savePersons_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_savePersons_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_savePersons_presult__isset {
  _IFaceLog_savePersons_presult__isset() : ex1(false) {}
  bool ex1 :1;
} _IFaceLog_savePersons_presult__isset;

class IFaceLog_savePersons_presult {
 public:


  virtual ~IFaceLog_savePersons_presult() throw();
  ServiceRuntimeException ex1;

  _IFaceLog_savePersons_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_savePersonsWithPhoto_args__isset {
  _IFaceLog_savePersonsWithPhoto_args__isset() : photos(false), persons(false), token(false) {}
  bool photos :1;
  bool persons :1;
  bool token :1;
} _IFaceLog_savePersonsWithPhoto_args__isset;

class IFaceLog_savePersonsWithPhoto_args {
 public:

  IFaceLog_savePersonsWithPhoto_args(const IFaceLog_savePersonsWithPhoto_args&);
  IFaceLog_savePersonsWithPhoto_args(IFaceLog_savePersonsWithPhoto_args&&);
  IFaceLog_savePersonsWithPhoto_args& operator=(const IFaceLog_savePersonsWithPhoto_args&);
  IFaceLog_savePersonsWithPhoto_args& operator=(IFaceLog_savePersonsWithPhoto_args&&);
  IFaceLog_savePersonsWithPhoto_args() {
  }

  virtual ~IFaceLog_savePersonsWithPhoto_args() throw();
  std::vector<std::string>  photos;
  std::vector<PersonBean>  persons;
  Token token;

  _IFaceLog_savePersonsWithPhoto_args__isset __isset;

  void __set_photos(const std::vector<std::string> & val);

  void __set_persons(const std::vector<PersonBean> & val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_savePersonsWithPhoto_args & rhs) const
  {
    if (!(photos == rhs.photos))
      return false;
    if (!(persons == rhs.persons))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_savePersonsWithPhoto_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_savePersonsWithPhoto_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_savePersonsWithPhoto_pargs {
 public:


  virtual ~IFaceLog_savePersonsWithPhoto_pargs() throw();
  const std::vector<std::string> * photos;
  const std::vector<PersonBean> * persons;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_savePersonsWithPhoto_result__isset {
  _IFaceLog_savePersonsWithPhoto_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_savePersonsWithPhoto_result__isset;

class IFaceLog_savePersonsWithPhoto_result {
 public:

  IFaceLog_savePersonsWithPhoto_result(const IFaceLog_savePersonsWithPhoto_result&);
  IFaceLog_savePersonsWithPhoto_result(IFaceLog_savePersonsWithPhoto_result&&);
  IFaceLog_savePersonsWithPhoto_result& operator=(const IFaceLog_savePersonsWithPhoto_result&);
  IFaceLog_savePersonsWithPhoto_result& operator=(IFaceLog_savePersonsWithPhoto_result&&);
  IFaceLog_savePersonsWithPhoto_result() : success(0) {
  }

  virtual ~IFaceLog_savePersonsWithPhoto_result() throw();
  int32_t success;
  ServiceRuntimeException ex1;

  _IFaceLog_savePersonsWithPhoto_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_savePersonsWithPhoto_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_savePersonsWithPhoto_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_savePersonsWithPhoto_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_savePersonsWithPhoto_presult__isset {
  _IFaceLog_savePersonsWithPhoto_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_savePersonsWithPhoto_presult__isset;

class IFaceLog_savePersonsWithPhoto_presult {
 public:


  virtual ~IFaceLog_savePersonsWithPhoto_presult() throw();
  int32_t* success;
  ServiceRuntimeException ex1;

  _IFaceLog_savePersonsWithPhoto_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_saveServiceConfig_args__isset {
  _IFaceLog_saveServiceConfig_args__isset() : token(false) {}
  bool token :1;
} _IFaceLog_saveServiceConfig_args__isset;

class IFaceLog_saveServiceConfig_args {
 public:

  IFaceLog_saveServiceConfig_args(const IFaceLog_saveServiceConfig_args&);
  IFaceLog_saveServiceConfig_args(IFaceLog_saveServiceConfig_args&&);
  IFaceLog_saveServiceConfig_args& operator=(const IFaceLog_saveServiceConfig_args&);
  IFaceLog_saveServiceConfig_args& operator=(IFaceLog_saveServiceConfig_args&&);
  IFaceLog_saveServiceConfig_args() {
  }

  virtual ~IFaceLog_saveServiceConfig_args() throw();
  Token token;

  _IFaceLog_saveServiceConfig_args__isset __isset;

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_saveServiceConfig_args & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_saveServiceConfig_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_saveServiceConfig_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_saveServiceConfig_pargs {
 public:


  virtual ~IFaceLog_saveServiceConfig_pargs() throw();
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_saveServiceConfig_result__isset {
  _IFaceLog_saveServiceConfig_result__isset() : ex1(false) {}
  bool ex1 :1;
} _IFaceLog_saveServiceConfig_result__isset;

class IFaceLog_saveServiceConfig_result {
 public:

  IFaceLog_saveServiceConfig_result(const IFaceLog_saveServiceConfig_result&);
  IFaceLog_saveServiceConfig_result(IFaceLog_saveServiceConfig_result&&);
  IFaceLog_saveServiceConfig_result& operator=(const IFaceLog_saveServiceConfig_result&);
  IFaceLog_saveServiceConfig_result& operator=(IFaceLog_saveServiceConfig_result&&);
  IFaceLog_saveServiceConfig_result() {
  }

  virtual ~IFaceLog_saveServiceConfig_result() throw();
  ServiceRuntimeException ex1;

  _IFaceLog_saveServiceConfig_result__isset __isset;

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_saveServiceConfig_result & rhs) const
  {
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_saveServiceConfig_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_saveServiceConfig_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_saveServiceConfig_presult__isset {
  _IFaceLog_saveServiceConfig_presult__isset() : ex1(false) {}
  bool ex1 :1;
} _IFaceLog_saveServiceConfig_presult__isset;

class IFaceLog_saveServiceConfig_presult {
 public:


  virtual ~IFaceLog_saveServiceConfig_presult() throw();
  ServiceRuntimeException ex1;

  _IFaceLog_saveServiceConfig_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_sdkTaskQueueOf_args__isset {
  _IFaceLog_sdkTaskQueueOf_args__isset() : task(false), sdkVersion(false), token(false) {}
  bool task :1;
  bool sdkVersion :1;
  bool token :1;
} _IFaceLog_sdkTaskQueueOf_args__isset;

class IFaceLog_sdkTaskQueueOf_args {
 public:

  IFaceLog_sdkTaskQueueOf_args(const IFaceLog_sdkTaskQueueOf_args&);
  IFaceLog_sdkTaskQueueOf_args(IFaceLog_sdkTaskQueueOf_args&&);
  IFaceLog_sdkTaskQueueOf_args& operator=(const IFaceLog_sdkTaskQueueOf_args&);
  IFaceLog_sdkTaskQueueOf_args& operator=(IFaceLog_sdkTaskQueueOf_args&&);
  IFaceLog_sdkTaskQueueOf_args() : task(), sdkVersion() {
  }

  virtual ~IFaceLog_sdkTaskQueueOf_args() throw();
  std::string task;
  std::string sdkVersion;
  Token token;

  _IFaceLog_sdkTaskQueueOf_args__isset __isset;

  void __set_task(const std::string& val);

  void __set_sdkVersion(const std::string& val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_sdkTaskQueueOf_args & rhs) const
  {
    if (!(task == rhs.task))
      return false;
    if (!(sdkVersion == rhs.sdkVersion))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_sdkTaskQueueOf_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_sdkTaskQueueOf_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_sdkTaskQueueOf_pargs {
 public:


  virtual ~IFaceLog_sdkTaskQueueOf_pargs() throw();
  const std::string* task;
  const std::string* sdkVersion;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_sdkTaskQueueOf_result__isset {
  _IFaceLog_sdkTaskQueueOf_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_sdkTaskQueueOf_result__isset;

class IFaceLog_sdkTaskQueueOf_result {
 public:

  IFaceLog_sdkTaskQueueOf_result(const IFaceLog_sdkTaskQueueOf_result&);
  IFaceLog_sdkTaskQueueOf_result(IFaceLog_sdkTaskQueueOf_result&&);
  IFaceLog_sdkTaskQueueOf_result& operator=(const IFaceLog_sdkTaskQueueOf_result&);
  IFaceLog_sdkTaskQueueOf_result& operator=(IFaceLog_sdkTaskQueueOf_result&&);
  IFaceLog_sdkTaskQueueOf_result() : success() {
  }

  virtual ~IFaceLog_sdkTaskQueueOf_result() throw();
  std::string success;
  ServiceRuntimeException ex1;

  _IFaceLog_sdkTaskQueueOf_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_sdkTaskQueueOf_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_sdkTaskQueueOf_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_sdkTaskQueueOf_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_sdkTaskQueueOf_presult__isset {
  _IFaceLog_sdkTaskQueueOf_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_sdkTaskQueueOf_presult__isset;

class IFaceLog_sdkTaskQueueOf_presult {
 public:


  virtual ~IFaceLog_sdkTaskQueueOf_presult() throw();
  std::string* success;
  ServiceRuntimeException ex1;

  _IFaceLog_sdkTaskQueueOf_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_setPersonExpiryDate_args__isset {
  _IFaceLog_setPersonExpiryDate_args__isset() : token(false) {}
  bool token :1;
} _IFaceLog_setPersonExpiryDate_args__isset;

class IFaceLog_setPersonExpiryDate_args {
 public:

  IFaceLog_setPersonExpiryDate_args(const IFaceLog_setPersonExpiryDate_args&);
  IFaceLog_setPersonExpiryDate_args(IFaceLog_setPersonExpiryDate_args&&);
  IFaceLog_setPersonExpiryDate_args& operator=(const IFaceLog_setPersonExpiryDate_args&);
  IFaceLog_setPersonExpiryDate_args& operator=(IFaceLog_setPersonExpiryDate_args&&);
  IFaceLog_setPersonExpiryDate_args() : personId(0), expiryDate(0) {
  }

  virtual ~IFaceLog_setPersonExpiryDate_args() throw();
  int32_t personId;
  int64_t expiryDate;
  Token token;

  _IFaceLog_setPersonExpiryDate_args__isset __isset;

  void __set_personId(const int32_t val);

  void __set_expiryDate(const int64_t val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_setPersonExpiryDate_args & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    if (!(expiryDate == rhs.expiryDate))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_setPersonExpiryDate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_setPersonExpiryDate_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_setPersonExpiryDate_pargs {
 public:


  virtual ~IFaceLog_setPersonExpiryDate_pargs() throw();
  const int32_t* personId;
  const int64_t* expiryDate;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_setPersonExpiryDate_result__isset {
  _IFaceLog_setPersonExpiryDate_result__isset() : ex1(false) {}
  bool ex1 :1;
} _IFaceLog_setPersonExpiryDate_result__isset;

class IFaceLog_setPersonExpiryDate_result {
 public:

  IFaceLog_setPersonExpiryDate_result(const IFaceLog_setPersonExpiryDate_result&);
  IFaceLog_setPersonExpiryDate_result(IFaceLog_setPersonExpiryDate_result&&);
  IFaceLog_setPersonExpiryDate_result& operator=(const IFaceLog_setPersonExpiryDate_result&);
  IFaceLog_setPersonExpiryDate_result& operator=(IFaceLog_setPersonExpiryDate_result&&);
  IFaceLog_setPersonExpiryDate_result() {
  }

  virtual ~IFaceLog_setPersonExpiryDate_result() throw();
  ServiceRuntimeException ex1;

  _IFaceLog_setPersonExpiryDate_result__isset __isset;

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_setPersonExpiryDate_result & rhs) const
  {
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_setPersonExpiryDate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_setPersonExpiryDate_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_setPersonExpiryDate_presult__isset {
  _IFaceLog_setPersonExpiryDate_presult__isset() : ex1(false) {}
  bool ex1 :1;
} _IFaceLog_setPersonExpiryDate_presult__isset;

class IFaceLog_setPersonExpiryDate_presult {
 public:


  virtual ~IFaceLog_setPersonExpiryDate_presult() throw();
  ServiceRuntimeException ex1;

  _IFaceLog_setPersonExpiryDate_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_setPersonExpiryDateList_args__isset {
  _IFaceLog_setPersonExpiryDateList_args__isset() : personIdList(false), token(false) {}
  bool personIdList :1;
  bool token :1;
} _IFaceLog_setPersonExpiryDateList_args__isset;

class IFaceLog_setPersonExpiryDateList_args {
 public:

  IFaceLog_setPersonExpiryDateList_args(const IFaceLog_setPersonExpiryDateList_args&);
  IFaceLog_setPersonExpiryDateList_args(IFaceLog_setPersonExpiryDateList_args&&);
  IFaceLog_setPersonExpiryDateList_args& operator=(const IFaceLog_setPersonExpiryDateList_args&);
  IFaceLog_setPersonExpiryDateList_args& operator=(IFaceLog_setPersonExpiryDateList_args&&);
  IFaceLog_setPersonExpiryDateList_args() : expiryDate(0) {
  }

  virtual ~IFaceLog_setPersonExpiryDateList_args() throw();
  std::vector<int32_t>  personIdList;
  int64_t expiryDate;
  Token token;

  _IFaceLog_setPersonExpiryDateList_args__isset __isset;

  void __set_personIdList(const std::vector<int32_t> & val);

  void __set_expiryDate(const int64_t val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_setPersonExpiryDateList_args & rhs) const
  {
    if (!(personIdList == rhs.personIdList))
      return false;
    if (!(expiryDate == rhs.expiryDate))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_setPersonExpiryDateList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_setPersonExpiryDateList_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_setPersonExpiryDateList_pargs {
 public:


  virtual ~IFaceLog_setPersonExpiryDateList_pargs() throw();
  const std::vector<int32_t> * personIdList;
  const int64_t* expiryDate;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_setPersonExpiryDateList_result__isset {
  _IFaceLog_setPersonExpiryDateList_result__isset() : ex1(false) {}
  bool ex1 :1;
} _IFaceLog_setPersonExpiryDateList_result__isset;

class IFaceLog_setPersonExpiryDateList_result {
 public:

  IFaceLog_setPersonExpiryDateList_result(const IFaceLog_setPersonExpiryDateList_result&);
  IFaceLog_setPersonExpiryDateList_result(IFaceLog_setPersonExpiryDateList_result&&);
  IFaceLog_setPersonExpiryDateList_result& operator=(const IFaceLog_setPersonExpiryDateList_result&);
  IFaceLog_setPersonExpiryDateList_result& operator=(IFaceLog_setPersonExpiryDateList_result&&);
  IFaceLog_setPersonExpiryDateList_result() {
  }

  virtual ~IFaceLog_setPersonExpiryDateList_result() throw();
  ServiceRuntimeException ex1;

  _IFaceLog_setPersonExpiryDateList_result__isset __isset;

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_setPersonExpiryDateList_result & rhs) const
  {
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_setPersonExpiryDateList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_setPersonExpiryDateList_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_setPersonExpiryDateList_presult__isset {
  _IFaceLog_setPersonExpiryDateList_presult__isset() : ex1(false) {}
  bool ex1 :1;
} _IFaceLog_setPersonExpiryDateList_presult__isset;

class IFaceLog_setPersonExpiryDateList_presult {
 public:


  virtual ~IFaceLog_setPersonExpiryDateList_presult() throw();
  ServiceRuntimeException ex1;

  _IFaceLog_setPersonExpiryDateList_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_setPersonExpiryDateTimeStr_args__isset {
  _IFaceLog_setPersonExpiryDateTimeStr_args__isset() : expiryDate(false), token(false) {}
  bool expiryDate :1;
  bool token :1;
} _IFaceLog_setPersonExpiryDateTimeStr_args__isset;

class IFaceLog_setPersonExpiryDateTimeStr_args {
 public:

  IFaceLog_setPersonExpiryDateTimeStr_args(const IFaceLog_setPersonExpiryDateTimeStr_args&);
  IFaceLog_setPersonExpiryDateTimeStr_args(IFaceLog_setPersonExpiryDateTimeStr_args&&);
  IFaceLog_setPersonExpiryDateTimeStr_args& operator=(const IFaceLog_setPersonExpiryDateTimeStr_args&);
  IFaceLog_setPersonExpiryDateTimeStr_args& operator=(IFaceLog_setPersonExpiryDateTimeStr_args&&);
  IFaceLog_setPersonExpiryDateTimeStr_args() : personId(0), expiryDate() {
  }

  virtual ~IFaceLog_setPersonExpiryDateTimeStr_args() throw();
  int32_t personId;
  std::string expiryDate;
  Token token;

  _IFaceLog_setPersonExpiryDateTimeStr_args__isset __isset;

  void __set_personId(const int32_t val);

  void __set_expiryDate(const std::string& val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_setPersonExpiryDateTimeStr_args & rhs) const
  {
    if (!(personId == rhs.personId))
      return false;
    if (!(expiryDate == rhs.expiryDate))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_setPersonExpiryDateTimeStr_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_setPersonExpiryDateTimeStr_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_setPersonExpiryDateTimeStr_pargs {
 public:


  virtual ~IFaceLog_setPersonExpiryDateTimeStr_pargs() throw();
  const int32_t* personId;
  const std::string* expiryDate;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_setPersonExpiryDateTimeStr_result__isset {
  _IFaceLog_setPersonExpiryDateTimeStr_result__isset() : ex1(false) {}
  bool ex1 :1;
} _IFaceLog_setPersonExpiryDateTimeStr_result__isset;

class IFaceLog_setPersonExpiryDateTimeStr_result {
 public:

  IFaceLog_setPersonExpiryDateTimeStr_result(const IFaceLog_setPersonExpiryDateTimeStr_result&);
  IFaceLog_setPersonExpiryDateTimeStr_result(IFaceLog_setPersonExpiryDateTimeStr_result&&);
  IFaceLog_setPersonExpiryDateTimeStr_result& operator=(const IFaceLog_setPersonExpiryDateTimeStr_result&);
  IFaceLog_setPersonExpiryDateTimeStr_result& operator=(IFaceLog_setPersonExpiryDateTimeStr_result&&);
  IFaceLog_setPersonExpiryDateTimeStr_result() {
  }

  virtual ~IFaceLog_setPersonExpiryDateTimeStr_result() throw();
  ServiceRuntimeException ex1;

  _IFaceLog_setPersonExpiryDateTimeStr_result__isset __isset;

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_setPersonExpiryDateTimeStr_result & rhs) const
  {
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_setPersonExpiryDateTimeStr_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_setPersonExpiryDateTimeStr_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_setPersonExpiryDateTimeStr_presult__isset {
  _IFaceLog_setPersonExpiryDateTimeStr_presult__isset() : ex1(false) {}
  bool ex1 :1;
} _IFaceLog_setPersonExpiryDateTimeStr_presult__isset;

class IFaceLog_setPersonExpiryDateTimeStr_presult {
 public:


  virtual ~IFaceLog_setPersonExpiryDateTimeStr_presult() throw();
  ServiceRuntimeException ex1;

  _IFaceLog_setPersonExpiryDateTimeStr_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_setProperties_args__isset {
  _IFaceLog_setProperties_args__isset() : config(false), token(false) {}
  bool config :1;
  bool token :1;
} _IFaceLog_setProperties_args__isset;

class IFaceLog_setProperties_args {
 public:

  IFaceLog_setProperties_args(const IFaceLog_setProperties_args&);
  IFaceLog_setProperties_args(IFaceLog_setProperties_args&&);
  IFaceLog_setProperties_args& operator=(const IFaceLog_setProperties_args&);
  IFaceLog_setProperties_args& operator=(IFaceLog_setProperties_args&&);
  IFaceLog_setProperties_args() {
  }

  virtual ~IFaceLog_setProperties_args() throw();
  std::map<std::string, std::string>  config;
  Token token;

  _IFaceLog_setProperties_args__isset __isset;

  void __set_config(const std::map<std::string, std::string> & val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_setProperties_args & rhs) const
  {
    if (!(config == rhs.config))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_setProperties_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_setProperties_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_setProperties_pargs {
 public:


  virtual ~IFaceLog_setProperties_pargs() throw();
  const std::map<std::string, std::string> * config;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_setProperties_result__isset {
  _IFaceLog_setProperties_result__isset() : ex1(false) {}
  bool ex1 :1;
} _IFaceLog_setProperties_result__isset;

class IFaceLog_setProperties_result {
 public:

  IFaceLog_setProperties_result(const IFaceLog_setProperties_result&);
  IFaceLog_setProperties_result(IFaceLog_setProperties_result&&);
  IFaceLog_setProperties_result& operator=(const IFaceLog_setProperties_result&);
  IFaceLog_setProperties_result& operator=(IFaceLog_setProperties_result&&);
  IFaceLog_setProperties_result() {
  }

  virtual ~IFaceLog_setProperties_result() throw();
  ServiceRuntimeException ex1;

  _IFaceLog_setProperties_result__isset __isset;

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_setProperties_result & rhs) const
  {
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_setProperties_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_setProperties_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_setProperties_presult__isset {
  _IFaceLog_setProperties_presult__isset() : ex1(false) {}
  bool ex1 :1;
} _IFaceLog_setProperties_presult__isset;

class IFaceLog_setProperties_presult {
 public:


  virtual ~IFaceLog_setProperties_presult() throw();
  ServiceRuntimeException ex1;

  _IFaceLog_setProperties_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_setProperty_args__isset {
  _IFaceLog_setProperty_args__isset() : key(false), value(false), token(false) {}
  bool key :1;
  bool value :1;
  bool token :1;
} _IFaceLog_setProperty_args__isset;

class IFaceLog_setProperty_args {
 public:

  IFaceLog_setProperty_args(const IFaceLog_setProperty_args&);
  IFaceLog_setProperty_args(IFaceLog_setProperty_args&&);
  IFaceLog_setProperty_args& operator=(const IFaceLog_setProperty_args&);
  IFaceLog_setProperty_args& operator=(IFaceLog_setProperty_args&&);
  IFaceLog_setProperty_args() : key(), value() {
  }

  virtual ~IFaceLog_setProperty_args() throw();
  std::string key;
  std::string value;
  Token token;

  _IFaceLog_setProperty_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_value(const std::string& val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_setProperty_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_setProperty_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_setProperty_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_setProperty_pargs {
 public:


  virtual ~IFaceLog_setProperty_pargs() throw();
  const std::string* key;
  const std::string* value;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_setProperty_result__isset {
  _IFaceLog_setProperty_result__isset() : ex1(false) {}
  bool ex1 :1;
} _IFaceLog_setProperty_result__isset;

class IFaceLog_setProperty_result {
 public:

  IFaceLog_setProperty_result(const IFaceLog_setProperty_result&);
  IFaceLog_setProperty_result(IFaceLog_setProperty_result&&);
  IFaceLog_setProperty_result& operator=(const IFaceLog_setProperty_result&);
  IFaceLog_setProperty_result& operator=(IFaceLog_setProperty_result&&);
  IFaceLog_setProperty_result() {
  }

  virtual ~IFaceLog_setProperty_result() throw();
  ServiceRuntimeException ex1;

  _IFaceLog_setProperty_result__isset __isset;

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_setProperty_result & rhs) const
  {
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_setProperty_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_setProperty_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_setProperty_presult__isset {
  _IFaceLog_setProperty_presult__isset() : ex1(false) {}
  bool ex1 :1;
} _IFaceLog_setProperty_presult__isset;

class IFaceLog_setProperty_presult {
 public:


  virtual ~IFaceLog_setProperty_presult() throw();
  ServiceRuntimeException ex1;

  _IFaceLog_setProperty_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_taskQueueOf_args__isset {
  _IFaceLog_taskQueueOf_args__isset() : task(false), token(false) {}
  bool task :1;
  bool token :1;
} _IFaceLog_taskQueueOf_args__isset;

class IFaceLog_taskQueueOf_args {
 public:

  IFaceLog_taskQueueOf_args(const IFaceLog_taskQueueOf_args&);
  IFaceLog_taskQueueOf_args(IFaceLog_taskQueueOf_args&&);
  IFaceLog_taskQueueOf_args& operator=(const IFaceLog_taskQueueOf_args&);
  IFaceLog_taskQueueOf_args& operator=(IFaceLog_taskQueueOf_args&&);
  IFaceLog_taskQueueOf_args() : task() {
  }

  virtual ~IFaceLog_taskQueueOf_args() throw();
  std::string task;
  Token token;

  _IFaceLog_taskQueueOf_args__isset __isset;

  void __set_task(const std::string& val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_taskQueueOf_args & rhs) const
  {
    if (!(task == rhs.task))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_taskQueueOf_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_taskQueueOf_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_taskQueueOf_pargs {
 public:


  virtual ~IFaceLog_taskQueueOf_pargs() throw();
  const std::string* task;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_taskQueueOf_result__isset {
  _IFaceLog_taskQueueOf_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_taskQueueOf_result__isset;

class IFaceLog_taskQueueOf_result {
 public:

  IFaceLog_taskQueueOf_result(const IFaceLog_taskQueueOf_result&);
  IFaceLog_taskQueueOf_result(IFaceLog_taskQueueOf_result&&);
  IFaceLog_taskQueueOf_result& operator=(const IFaceLog_taskQueueOf_result&);
  IFaceLog_taskQueueOf_result& operator=(IFaceLog_taskQueueOf_result&&);
  IFaceLog_taskQueueOf_result() : success() {
  }

  virtual ~IFaceLog_taskQueueOf_result() throw();
  std::string success;
  ServiceRuntimeException ex1;

  _IFaceLog_taskQueueOf_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_taskQueueOf_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_taskQueueOf_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_taskQueueOf_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_taskQueueOf_presult__isset {
  _IFaceLog_taskQueueOf_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_taskQueueOf_presult__isset;

class IFaceLog_taskQueueOf_presult {
 public:


  virtual ~IFaceLog_taskQueueOf_presult() throw();
  std::string* success;
  ServiceRuntimeException ex1;

  _IFaceLog_taskQueueOf_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_unbindBorder_args__isset {
  _IFaceLog_unbindBorder_args__isset() : personGroupId(false), deviceGroupId(false), token(false) {}
  bool personGroupId :1;
  bool deviceGroupId :1;
  bool token :1;
} _IFaceLog_unbindBorder_args__isset;

class IFaceLog_unbindBorder_args {
 public:

  IFaceLog_unbindBorder_args(const IFaceLog_unbindBorder_args&);
  IFaceLog_unbindBorder_args(IFaceLog_unbindBorder_args&&);
  IFaceLog_unbindBorder_args& operator=(const IFaceLog_unbindBorder_args&);
  IFaceLog_unbindBorder_args& operator=(IFaceLog_unbindBorder_args&&);
  IFaceLog_unbindBorder_args() : personGroupId(0), deviceGroupId(0) {
  }

  virtual ~IFaceLog_unbindBorder_args() throw();
  int32_t personGroupId;
  int32_t deviceGroupId;
  Token token;

  _IFaceLog_unbindBorder_args__isset __isset;

  void __set_personGroupId(const int32_t val);

  void __set_deviceGroupId(const int32_t val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_unbindBorder_args & rhs) const
  {
    if (!(personGroupId == rhs.personGroupId))
      return false;
    if (!(deviceGroupId == rhs.deviceGroupId))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_unbindBorder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_unbindBorder_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_unbindBorder_pargs {
 public:


  virtual ~IFaceLog_unbindBorder_pargs() throw();
  const int32_t* personGroupId;
  const int32_t* deviceGroupId;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_unbindBorder_result__isset {
  _IFaceLog_unbindBorder_result__isset() : ex1(false) {}
  bool ex1 :1;
} _IFaceLog_unbindBorder_result__isset;

class IFaceLog_unbindBorder_result {
 public:

  IFaceLog_unbindBorder_result(const IFaceLog_unbindBorder_result&);
  IFaceLog_unbindBorder_result(IFaceLog_unbindBorder_result&&);
  IFaceLog_unbindBorder_result& operator=(const IFaceLog_unbindBorder_result&);
  IFaceLog_unbindBorder_result& operator=(IFaceLog_unbindBorder_result&&);
  IFaceLog_unbindBorder_result() {
  }

  virtual ~IFaceLog_unbindBorder_result() throw();
  ServiceRuntimeException ex1;

  _IFaceLog_unbindBorder_result__isset __isset;

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_unbindBorder_result & rhs) const
  {
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_unbindBorder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_unbindBorder_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_unbindBorder_presult__isset {
  _IFaceLog_unbindBorder_presult__isset() : ex1(false) {}
  bool ex1 :1;
} _IFaceLog_unbindBorder_presult__isset;

class IFaceLog_unbindBorder_presult {
 public:


  virtual ~IFaceLog_unbindBorder_presult() throw();
  ServiceRuntimeException ex1;

  _IFaceLog_unbindBorder_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_unregisterDevice_args__isset {
  _IFaceLog_unregisterDevice_args__isset() : token(false) {}
  bool token :1;
} _IFaceLog_unregisterDevice_args__isset;

class IFaceLog_unregisterDevice_args {
 public:

  IFaceLog_unregisterDevice_args(const IFaceLog_unregisterDevice_args&);
  IFaceLog_unregisterDevice_args(IFaceLog_unregisterDevice_args&&);
  IFaceLog_unregisterDevice_args& operator=(const IFaceLog_unregisterDevice_args&);
  IFaceLog_unregisterDevice_args& operator=(IFaceLog_unregisterDevice_args&&);
  IFaceLog_unregisterDevice_args() {
  }

  virtual ~IFaceLog_unregisterDevice_args() throw();
  Token token;

  _IFaceLog_unregisterDevice_args__isset __isset;

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_unregisterDevice_args & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_unregisterDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_unregisterDevice_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_unregisterDevice_pargs {
 public:


  virtual ~IFaceLog_unregisterDevice_pargs() throw();
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_unregisterDevice_result__isset {
  _IFaceLog_unregisterDevice_result__isset() : ex1(false), ex2(false) {}
  bool ex1 :1;
  bool ex2 :1;
} _IFaceLog_unregisterDevice_result__isset;

class IFaceLog_unregisterDevice_result {
 public:

  IFaceLog_unregisterDevice_result(const IFaceLog_unregisterDevice_result&);
  IFaceLog_unregisterDevice_result(IFaceLog_unregisterDevice_result&&);
  IFaceLog_unregisterDevice_result& operator=(const IFaceLog_unregisterDevice_result&);
  IFaceLog_unregisterDevice_result& operator=(IFaceLog_unregisterDevice_result&&);
  IFaceLog_unregisterDevice_result() {
  }

  virtual ~IFaceLog_unregisterDevice_result() throw();
  ServiceSecurityException ex1;
  ServiceRuntimeException ex2;

  _IFaceLog_unregisterDevice_result__isset __isset;

  void __set_ex1(const ServiceSecurityException& val);

  void __set_ex2(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_unregisterDevice_result & rhs) const
  {
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_unregisterDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_unregisterDevice_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_unregisterDevice_presult__isset {
  _IFaceLog_unregisterDevice_presult__isset() : ex1(false), ex2(false) {}
  bool ex1 :1;
  bool ex2 :1;
} _IFaceLog_unregisterDevice_presult__isset;

class IFaceLog_unregisterDevice_presult {
 public:


  virtual ~IFaceLog_unregisterDevice_presult() throw();
  ServiceSecurityException ex1;
  ServiceRuntimeException ex2;

  _IFaceLog_unregisterDevice_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _IFaceLog_updateDevice_args__isset {
  _IFaceLog_updateDevice_args__isset() : deviceBean(false), token(false) {}
  bool deviceBean :1;
  bool token :1;
} _IFaceLog_updateDevice_args__isset;

class IFaceLog_updateDevice_args {
 public:

  IFaceLog_updateDevice_args(const IFaceLog_updateDevice_args&);
  IFaceLog_updateDevice_args(IFaceLog_updateDevice_args&&);
  IFaceLog_updateDevice_args& operator=(const IFaceLog_updateDevice_args&);
  IFaceLog_updateDevice_args& operator=(IFaceLog_updateDevice_args&&);
  IFaceLog_updateDevice_args() {
  }

  virtual ~IFaceLog_updateDevice_args() throw();
  DeviceBean deviceBean;
  Token token;

  _IFaceLog_updateDevice_args__isset __isset;

  void __set_deviceBean(const DeviceBean& val);

  void __set_token(const Token& val);

  bool operator == (const IFaceLog_updateDevice_args & rhs) const
  {
    if (!(deviceBean == rhs.deviceBean))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_updateDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_updateDevice_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_updateDevice_pargs {
 public:


  virtual ~IFaceLog_updateDevice_pargs() throw();
  const DeviceBean* deviceBean;
  const Token* token;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_updateDevice_result__isset {
  _IFaceLog_updateDevice_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_updateDevice_result__isset;

class IFaceLog_updateDevice_result {
 public:

  IFaceLog_updateDevice_result(const IFaceLog_updateDevice_result&);
  IFaceLog_updateDevice_result(IFaceLog_updateDevice_result&&);
  IFaceLog_updateDevice_result& operator=(const IFaceLog_updateDevice_result&);
  IFaceLog_updateDevice_result& operator=(IFaceLog_updateDevice_result&&);
  IFaceLog_updateDevice_result() {
  }

  virtual ~IFaceLog_updateDevice_result() throw();
  DeviceBean success;
  ServiceRuntimeException ex1;

  _IFaceLog_updateDevice_result__isset __isset;

  void __set_success(const DeviceBean& val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_updateDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_updateDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_updateDevice_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_updateDevice_presult__isset {
  _IFaceLog_updateDevice_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_updateDevice_presult__isset;

class IFaceLog_updateDevice_presult {
 public:


  virtual ~IFaceLog_updateDevice_presult() throw();
  DeviceBean* success;
  ServiceRuntimeException ex1;

  _IFaceLog_updateDevice_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class IFaceLog_version_args {
 public:

  IFaceLog_version_args(const IFaceLog_version_args&);
  IFaceLog_version_args(IFaceLog_version_args&&);
  IFaceLog_version_args& operator=(const IFaceLog_version_args&);
  IFaceLog_version_args& operator=(IFaceLog_version_args&&);
  IFaceLog_version_args() {
  }

  virtual ~IFaceLog_version_args() throw();

  bool operator == (const IFaceLog_version_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const IFaceLog_version_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_version_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_version_pargs {
 public:


  virtual ~IFaceLog_version_pargs() throw();

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_version_result__isset {
  _IFaceLog_version_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_version_result__isset;

class IFaceLog_version_result {
 public:

  IFaceLog_version_result(const IFaceLog_version_result&);
  IFaceLog_version_result(IFaceLog_version_result&&);
  IFaceLog_version_result& operator=(const IFaceLog_version_result&);
  IFaceLog_version_result& operator=(IFaceLog_version_result&&);
  IFaceLog_version_result() : success() {
  }

  virtual ~IFaceLog_version_result() throw();
  std::string success;
  ServiceRuntimeException ex1;

  _IFaceLog_version_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_version_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_version_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_version_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_version_presult__isset {
  _IFaceLog_version_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_version_presult__isset;

class IFaceLog_version_presult {
 public:


  virtual ~IFaceLog_version_presult() throw();
  std::string* success;
  ServiceRuntimeException ex1;

  _IFaceLog_version_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class IFaceLog_versionInfo_args {
 public:

  IFaceLog_versionInfo_args(const IFaceLog_versionInfo_args&);
  IFaceLog_versionInfo_args(IFaceLog_versionInfo_args&&);
  IFaceLog_versionInfo_args& operator=(const IFaceLog_versionInfo_args&);
  IFaceLog_versionInfo_args& operator=(IFaceLog_versionInfo_args&&);
  IFaceLog_versionInfo_args() {
  }

  virtual ~IFaceLog_versionInfo_args() throw();

  bool operator == (const IFaceLog_versionInfo_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const IFaceLog_versionInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_versionInfo_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class IFaceLog_versionInfo_pargs {
 public:


  virtual ~IFaceLog_versionInfo_pargs() throw();

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_versionInfo_result__isset {
  _IFaceLog_versionInfo_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_versionInfo_result__isset;

class IFaceLog_versionInfo_result {
 public:

  IFaceLog_versionInfo_result(const IFaceLog_versionInfo_result&);
  IFaceLog_versionInfo_result(IFaceLog_versionInfo_result&&);
  IFaceLog_versionInfo_result& operator=(const IFaceLog_versionInfo_result&);
  IFaceLog_versionInfo_result& operator=(IFaceLog_versionInfo_result&&);
  IFaceLog_versionInfo_result() {
  }

  virtual ~IFaceLog_versionInfo_result() throw();
  std::map<std::string, std::string>  success;
  ServiceRuntimeException ex1;

  _IFaceLog_versionInfo_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  void __set_ex1(const ServiceRuntimeException& val);

  bool operator == (const IFaceLog_versionInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const IFaceLog_versionInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IFaceLog_versionInfo_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _IFaceLog_versionInfo_presult__isset {
  _IFaceLog_versionInfo_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _IFaceLog_versionInfo_presult__isset;

class IFaceLog_versionInfo_presult {
 public:


  virtual ~IFaceLog_versionInfo_presult() throw();
  std::map<std::string, std::string> * success;
  ServiceRuntimeException ex1;

  _IFaceLog_versionInfo_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

template <class Protocol_>
class IFaceLogClientT : virtual public IFaceLogIf {
 public:
  IFaceLogClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  IFaceLogClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void addFeature(FeatureBean& _return, const std::string& feature, const std::string& featureVersion, const int32_t personId, const std::vector<FaceBean> & faecBeans, const std::string& removed, const Token& token);
  void send_addFeature(const std::string& feature, const std::string& featureVersion, const int32_t personId, const std::vector<FaceBean> & faecBeans, const std::string& removed, const Token& token);
  void recv_addFeature(FeatureBean& _return);
  void addFeatureMulti(FeatureBean& _return, const std::string& feature, const std::string& featureVersion, const int32_t personId, const std::vector<std::string> & photos, const std::vector<FaceBean> & faces, const std::string& removed, const Token& token);
  void send_addFeatureMulti(const std::string& feature, const std::string& featureVersion, const int32_t personId, const std::vector<std::string> & photos, const std::vector<FaceBean> & faces, const std::string& removed, const Token& token);
  void recv_addFeatureMulti(FeatureBean& _return);
  void addFeatureWithImage(FeatureBean& _return, const std::string& feature, const std::string& featureVersion, const int32_t personId, const bool asIdPhotoIfAbsent, const std::string& featurePhoto, const FaceBean& faceBean, const std::string& removed, const Token& token);
  void send_addFeatureWithImage(const std::string& feature, const std::string& featureVersion, const int32_t personId, const bool asIdPhotoIfAbsent, const std::string& featurePhoto, const FaceBean& faceBean, const std::string& removed, const Token& token);
  void recv_addFeatureWithImage(FeatureBean& _return);
  void addImage(ImageBean& _return, const std::string& imageData, const int32_t deviceId, const FaceBean& faceBean, const int32_t personId, const Token& token);
  void send_addImage(const std::string& imageData, const int32_t deviceId, const FaceBean& faceBean, const int32_t personId, const Token& token);
  void recv_addImage(ImageBean& _return);
  void addLog(const LogBean& logBean, const Token& token);
  void send_addLog(const LogBean& logBean, const Token& token);
  void recv_addLog();
  void addLogFull(const LogBean& logBean, const FaceBean& faceBean, const std::string& featureImage, const Token& token);
  void send_addLogFull(const LogBean& logBean, const FaceBean& faceBean, const std::string& featureImage, const Token& token);
  void recv_addLogFull();
  void addLogs(const std::vector<LogBean> & beans, const Token& token);
  void send_addLogs(const std::vector<LogBean> & beans, const Token& token);
  void recv_addLogs();
  void addLogsFull(const std::vector<LogBean> & logBeans, const std::vector<FaceBean> & faceBeans, const std::vector<std::string> & featureImages, const Token& token);
  void send_addLogsFull(const std::vector<LogBean> & logBeans, const std::vector<FaceBean> & faceBeans, const std::vector<std::string> & featureImages, const Token& token);
  void recv_addLogsFull();
  void applyAckChannel(std::string& _return, const Token& token);
  void send_applyAckChannel(const Token& token);
  void recv_applyAckChannel(std::string& _return);
  void applyAckChannelWithDuration(std::string& _return, const int32_t duration, const Token& token);
  void send_applyAckChannelWithDuration(const int32_t duration, const Token& token);
  void recv_applyAckChannelWithDuration(std::string& _return);
  int32_t applyCmdSn(const Token& token);
  void send_applyCmdSn(const Token& token);
  int32_t recv_applyCmdSn();
  void applyPersonToken(Token& _return, const int32_t personId, const std::string& password, const bool isMd5);
  void send_applyPersonToken(const int32_t personId, const std::string& password, const bool isMd5);
  void recv_applyPersonToken(Token& _return);
  void applyRootToken(Token& _return, const std::string& password, const bool isMd5);
  void send_applyRootToken(const std::string& password, const bool isMd5);
  void recv_applyRootToken(Token& _return);
  void applyUserToken(Token& _return, const int32_t userid, const std::string& password, const bool isMd5);
  void send_applyUserToken(const int32_t userid, const std::string& password, const bool isMd5);
  void recv_applyUserToken(Token& _return);
  void bindBorder(const int32_t personGroupId, const int32_t deviceGroupId, const Token& token);
  void send_bindBorder(const int32_t personGroupId, const int32_t deviceGroupId, const Token& token);
  void recv_bindBorder();
  void childListForDeviceGroup(std::vector<int32_t> & _return, const int32_t deviceGroupId);
  void send_childListForDeviceGroup(const int32_t deviceGroupId);
  void recv_childListForDeviceGroup(std::vector<int32_t> & _return);
  void childListForPersonGroup(std::vector<int32_t> & _return, const int32_t personGroupId);
  void send_childListForPersonGroup(const int32_t personGroupId);
  void recv_childListForPersonGroup(std::vector<int32_t> & _return);
  int32_t countDeviceByWhere(const std::string& where);
  void send_countDeviceByWhere(const std::string& where);
  int32_t recv_countDeviceByWhere();
  int32_t countDeviceGroupByWhere(const std::string& where);
  void send_countDeviceGroupByWhere(const std::string& where);
  int32_t recv_countDeviceGroupByWhere();
  int32_t countLogByWhere(const std::string& where);
  void send_countLogByWhere(const std::string& where);
  int32_t recv_countLogByWhere();
  int32_t countLogLightByVerifyTime(const int64_t timestamp);
  void send_countLogLightByVerifyTime(const int64_t timestamp);
  int32_t recv_countLogLightByVerifyTime();
  int32_t countLogLightByVerifyTimeTimestr(const std::string& timestamp);
  void send_countLogLightByVerifyTimeTimestr(const std::string& timestamp);
  int32_t recv_countLogLightByVerifyTimeTimestr();
  int32_t countLogLightByWhere(const std::string& where);
  void send_countLogLightByWhere(const std::string& where);
  int32_t recv_countLogLightByWhere();
  int32_t countPersonByWhere(const std::string& where);
  void send_countPersonByWhere(const std::string& where);
  int32_t recv_countPersonByWhere();
  int32_t countPersonGroupByWhere(const std::string& where);
  void send_countPersonGroupByWhere(const std::string& where);
  int32_t recv_countPersonGroupByWhere();
  void countPersonLog(std::map<std::string, int32_t> & _return, const int32_t personId, const int64_t startDate, const int64_t endDate);
  void send_countPersonLog(const int32_t personId, const int64_t startDate, const int64_t endDate);
  void recv_countPersonLog(std::map<std::string, int32_t> & _return);
  void countPersonLogTimeStr(std::map<std::string, int32_t> & _return, const int32_t personId, const std::string& startDate, const std::string& endDate);
  void send_countPersonLogTimeStr(const int32_t personId, const std::string& startDate, const std::string& endDate);
  void recv_countPersonLogTimeStr(std::map<std::string, int32_t> & _return);
  int32_t deleteAllFeaturesByPersonId(const int32_t personId, const bool deleteImage, const Token& token);
  void send_deleteAllFeaturesByPersonId(const int32_t personId, const bool deleteImage, const Token& token);
  int32_t recv_deleteAllFeaturesByPersonId();
  bool deleteDevice(const int32_t id, const Token& token);
  void send_deleteDevice(const int32_t id, const Token& token);
  bool recv_deleteDevice();
  bool deleteDeviceByMac(const std::string& mac, const Token& token);
  void send_deleteDeviceByMac(const std::string& mac, const Token& token);
  bool recv_deleteDeviceByMac();
  int32_t deleteDeviceGroup(const int32_t deviceGroupId, const Token& token);
  void send_deleteDeviceGroup(const int32_t deviceGroupId, const Token& token);
  int32_t recv_deleteDeviceGroup();
  void deleteFeature(std::vector<std::string> & _return, const std::string& featureMd5, const bool deleteImage, const Token& token);
  void send_deleteFeature(const std::string& featureMd5, const bool deleteImage, const Token& token);
  void recv_deleteFeature(std::vector<std::string> & _return);
  int32_t deleteGroupPermitOnDeviceGroup(const int32_t deviceGroupId, const Token& token);
  void send_deleteGroupPermitOnDeviceGroup(const int32_t deviceGroupId, const Token& token);
  int32_t recv_deleteGroupPermitOnDeviceGroup();
  int32_t deleteImage(const std::string& imageMd5, const Token& token);
  void send_deleteImage(const std::string& imageMd5, const Token& token);
  int32_t recv_deleteImage();
  int32_t deletePermitById(const int32_t deviceGroupId, const int32_t personGroupId, const Token& token);
  void send_deletePermitById(const int32_t deviceGroupId, const int32_t personGroupId, const Token& token);
  int32_t recv_deletePermitById();
  int32_t deletePerson(const int32_t personId, const Token& token);
  void send_deletePerson(const int32_t personId, const Token& token);
  int32_t recv_deletePerson();
  int32_t deletePersonByPapersNum(const std::string& papersNum, const Token& token);
  void send_deletePersonByPapersNum(const std::string& papersNum, const Token& token);
  int32_t recv_deletePersonByPapersNum();
  int32_t deletePersonGroup(const int32_t personGroupId, const Token& token);
  void send_deletePersonGroup(const int32_t personGroupId, const Token& token);
  int32_t recv_deletePersonGroup();
  int32_t deletePersonGroupPermit(const int32_t personGroupId, const Token& token);
  void send_deletePersonGroupPermit(const int32_t personGroupId, const Token& token);
  int32_t recv_deletePersonGroupPermit();
  int32_t deletePersons(const std::vector<int32_t> & personIdList, const Token& token);
  void send_deletePersons(const std::vector<int32_t> & personIdList, const Token& token);
  int32_t recv_deletePersons();
  int32_t deletePersonsByPapersNum(const std::vector<std::string> & papersNumlist, const Token& token);
  void send_deletePersonsByPapersNum(const std::vector<std::string> & papersNumlist, const Token& token);
  int32_t recv_deletePersonsByPapersNum();
  void disablePerson(const int32_t personId, const int32_t moveToGroupId, const bool deletePhoto, const bool deleteFeature, const bool deleteLog, const Token& token);
  void send_disablePerson(const int32_t personId, const int32_t moveToGroupId, const bool deletePhoto, const bool deleteFeature, const bool deleteLog, const Token& token);
  void recv_disablePerson();
  void disablePersonList(const std::vector<int32_t> & personIdList, const Token& token);
  void send_disablePersonList(const std::vector<int32_t> & personIdList, const Token& token);
  void recv_disablePersonList();
  bool existsDevice(const int32_t id);
  void send_existsDevice(const int32_t id);
  bool recv_existsDevice();
  bool existsFeature(const std::string& md5);
  void send_existsFeature(const std::string& md5);
  bool recv_existsFeature();
  bool existsImage(const std::string& md5);
  void send_existsImage(const std::string& md5);
  bool recv_existsImage();
  bool existsPerson(const int32_t persionId);
  void send_existsPerson(const int32_t persionId);
  bool recv_existsPerson();
  void getDevice(DeviceBean& _return, const int32_t deviceId);
  void send_getDevice(const int32_t deviceId);
  void recv_getDevice(DeviceBean& _return);
  void getDeviceByMac(DeviceBean& _return, const std::string& mac);
  void send_getDeviceByMac(const std::string& mac);
  void recv_getDeviceByMac(DeviceBean& _return);
  void getDeviceGroup(DeviceGroupBean& _return, const int32_t deviceGroupId);
  void send_getDeviceGroup(const int32_t deviceGroupId);
  void recv_getDeviceGroup(DeviceGroupBean& _return);
  void getDeviceGroups(std::vector<DeviceGroupBean> & _return, const std::vector<int32_t> & groupIdList);
  void send_getDeviceGroups(const std::vector<int32_t> & groupIdList);
  void recv_getDeviceGroups(std::vector<DeviceGroupBean> & _return);
  void getDeviceGroupsBelongs(std::vector<int32_t> & _return, const int32_t deviceId);
  void send_getDeviceGroupsBelongs(const int32_t deviceId);
  void recv_getDeviceGroupsBelongs(std::vector<int32_t> & _return);
  void getDeviceGroupsPermit(std::vector<int32_t> & _return, const int32_t personGroupId);
  void send_getDeviceGroupsPermit(const int32_t personGroupId);
  void recv_getDeviceGroupsPermit(std::vector<int32_t> & _return);
  void getDeviceGroupsPermittedBy(std::vector<int32_t> & _return, const int32_t personGroupId);
  void send_getDeviceGroupsPermittedBy(const int32_t personGroupId);
  void recv_getDeviceGroupsPermittedBy(std::vector<int32_t> & _return);
  int32_t getDeviceIdOfFeature(const std::string& featureMd5);
  void send_getDeviceIdOfFeature(const std::string& featureMd5);
  int32_t recv_getDeviceIdOfFeature();
  void getDevices(std::vector<DeviceBean> & _return, const std::vector<int32_t> & idList);
  void send_getDevices(const std::vector<int32_t> & idList);
  void recv_getDevices(std::vector<DeviceBean> & _return);
  void getDevicesOfGroup(std::vector<int32_t> & _return, const int32_t deviceGroupId);
  void send_getDevicesOfGroup(const int32_t deviceGroupId);
  void recv_getDevicesOfGroup(std::vector<int32_t> & _return);
  void getFace(FaceBean& _return, const int32_t faceId);
  void send_getFace(const int32_t faceId);
  void recv_getFace(FaceBean& _return);
  void getFacesOfFeature(std::vector<FaceBean> & _return, const std::string& featureMd5);
  void send_getFacesOfFeature(const std::string& featureMd5);
  void recv_getFacesOfFeature(std::vector<FaceBean> & _return);
  void getFacesOfImage(std::vector<FaceBean> & _return, const std::string& imageMd5);
  void send_getFacesOfImage(const std::string& imageMd5);
  void recv_getFacesOfImage(std::vector<FaceBean> & _return);
  void getFeature(FeatureBean& _return, const std::string& md5);
  void send_getFeature(const std::string& md5);
  void recv_getFeature(FeatureBean& _return);
  void getFeatureBytes(std::string& _return, const std::string& md5);
  void send_getFeatureBytes(const std::string& md5);
  void recv_getFeatureBytes(std::string& _return);
  void getFeatures(std::vector<FeatureBean> & _return, const std::vector<std::string> & md5List);
  void send_getFeatures(const std::vector<std::string> & md5List);
  void recv_getFeatures(std::vector<FeatureBean> & _return);
  void getFeaturesByPersonIdAndSdkVersion(std::vector<std::string> & _return, const int32_t personId, const std::string& sdkVersion);
  void send_getFeaturesByPersonIdAndSdkVersion(const int32_t personId, const std::string& sdkVersion);
  void recv_getFeaturesByPersonIdAndSdkVersion(std::vector<std::string> & _return);
  void getFeaturesOfImage(std::vector<std::string> & _return, const std::string& imageMd5);
  void send_getFeaturesOfImage(const std::string& imageMd5);
  void recv_getFeaturesOfImage(std::vector<std::string> & _return);
  void getFeaturesOfPerson(std::vector<std::string> & _return, const int32_t personId);
  void send_getFeaturesOfPerson(const int32_t personId);
  void recv_getFeaturesOfPerson(std::vector<std::string> & _return);
  void getFeaturesPermittedOnDevice(std::vector<std::string> & _return, const int32_t deviceId, const bool ignoreSchedule, const std::string& sdkVersion, const std::vector<std::string> & excludeFeatureIds, const int64_t timestamp);
  void send_getFeaturesPermittedOnDevice(const int32_t deviceId, const bool ignoreSchedule, const std::string& sdkVersion, const std::vector<std::string> & excludeFeatureIds, const int64_t timestamp);
  void recv_getFeaturesPermittedOnDevice(std::vector<std::string> & _return);
  void getGroupPermit(PermitBean& _return, const int32_t deviceId, const int32_t personGroupId);
  void send_getGroupPermit(const int32_t deviceId, const int32_t personGroupId);
  void recv_getGroupPermit(PermitBean& _return);
  void getGroupPermitOnDeviceGroup(PermitBean& _return, const int32_t deviceGroupId, const int32_t personGroupId);
  void send_getGroupPermitOnDeviceGroup(const int32_t deviceGroupId, const int32_t personGroupId);
  void recv_getGroupPermitOnDeviceGroup(PermitBean& _return);
  void getGroupPermits(std::vector<PermitBean> & _return, const int32_t deviceId, const std::vector<int32_t> & personGroupIdList);
  void send_getGroupPermits(const int32_t deviceId, const std::vector<int32_t> & personGroupIdList);
  void recv_getGroupPermits(std::vector<PermitBean> & _return);
  void getImage(ImageBean& _return, const std::string& imageMD5);
  void send_getImage(const std::string& imageMD5);
  void recv_getImage(ImageBean& _return);
  void getImageBytes(std::string& _return, const std::string& imageMD5);
  void send_getImageBytes(const std::string& imageMD5);
  void recv_getImageBytes(std::string& _return);
  void getImageBytesRef(std::string& _return, const std::string& primaryKey, const std::string& refType);
  void send_getImageBytesRef(const std::string& primaryKey, const std::string& refType);
  void recv_getImageBytesRef(std::string& _return);
  void getImagesAssociatedByFeature(std::vector<std::string> & _return, const std::string& featureMd5);
  void send_getImagesAssociatedByFeature(const std::string& featureMd5);
  void recv_getImagesAssociatedByFeature(std::vector<std::string> & _return);
  void getLogBeansByPersonId(std::vector<LogBean> & _return, const int32_t personId);
  void send_getLogBeansByPersonId(const int32_t personId);
  void recv_getLogBeansByPersonId(std::vector<LogBean> & _return);
  void getPerson(PersonBean& _return, const int32_t personId);
  void send_getPerson(const int32_t personId);
  void recv_getPerson(PersonBean& _return);
  void getPersonByMobilePhone(PersonBean& _return, const std::string& mobilePhone);
  void send_getPersonByMobilePhone(const std::string& mobilePhone);
  void recv_getPersonByMobilePhone(PersonBean& _return);
  void getPersonByPapersNum(PersonBean& _return, const std::string& papersNum);
  void send_getPersonByPapersNum(const std::string& papersNum);
  void recv_getPersonByPapersNum(PersonBean& _return);
  void getPersonGroup(PersonGroupBean& _return, const int32_t personGroupId);
  void send_getPersonGroup(const int32_t personGroupId);
  void recv_getPersonGroup(PersonGroupBean& _return);
  void getPersonGroups(std::vector<PersonGroupBean> & _return, const std::vector<int32_t> & groupIdList);
  void send_getPersonGroups(const std::vector<int32_t> & groupIdList);
  void recv_getPersonGroups(std::vector<PersonGroupBean> & _return);
  void getPersonGroupsBelongs(std::vector<int32_t> & _return, const int32_t personId);
  void send_getPersonGroupsBelongs(const int32_t personId);
  void recv_getPersonGroupsBelongs(std::vector<int32_t> & _return);
  void getPersonGroupsPermittedBy(std::vector<int32_t> & _return, const int32_t deviceGroupId);
  void send_getPersonGroupsPermittedBy(const int32_t deviceGroupId);
  void recv_getPersonGroupsPermittedBy(std::vector<int32_t> & _return);
  void getPersonPermit(PermitBean& _return, const int32_t deviceId, const int32_t personId);
  void send_getPersonPermit(const int32_t deviceId, const int32_t personId);
  void recv_getPersonPermit(PermitBean& _return);
  void getPersonPermits(std::vector<PermitBean> & _return, const int32_t deviceId, const std::vector<int32_t> & personIdList);
  void send_getPersonPermits(const int32_t deviceId, const std::vector<int32_t> & personIdList);
  void recv_getPersonPermits(std::vector<PermitBean> & _return);
  void getPersons(std::vector<PersonBean> & _return, const std::vector<int32_t> & idList);
  void send_getPersons(const std::vector<int32_t> & idList);
  void recv_getPersons(std::vector<PersonBean> & _return);
  void getPersonsOfGroup(std::vector<int32_t> & _return, const int32_t personGroupId);
  void send_getPersonsOfGroup(const int32_t personGroupId);
  void recv_getPersonsOfGroup(std::vector<int32_t> & _return);
  void getPersonsPermittedOnDevice(std::vector<int32_t> & _return, const int32_t deviceId, const bool ignoreSchedule, const std::vector<int32_t> & excludePersonIds, const int64_t timestamp);
  void send_getPersonsPermittedOnDevice(const int32_t deviceId, const bool ignoreSchedule, const std::vector<int32_t> & excludePersonIds, const int64_t timestamp);
  void recv_getPersonsPermittedOnDevice(std::vector<int32_t> & _return);
  void getProperties(std::map<std::string, std::string> & _return, const std::string& prefix, const Token& token);
  void send_getProperties(const std::string& prefix, const Token& token);
  void recv_getProperties(std::map<std::string, std::string> & _return);
  void getProperty(std::string& _return, const std::string& key, const Token& token);
  void send_getProperty(const std::string& key, const Token& token);
  void recv_getProperty(std::string& _return);
  void getRedisParameters(std::map<MQParam::type, std::string> & _return, const Token& token);
  void send_getRedisParameters(const Token& token);
  void recv_getRedisParameters(std::map<MQParam::type, std::string> & _return);
  void getServiceConfig(std::map<std::string, std::string> & _return, const Token& token);
  void send_getServiceConfig(const Token& token);
  void recv_getServiceConfig(std::map<std::string, std::string> & _return);
  void getSubDeviceGroup(std::vector<int32_t> & _return, const int32_t deviceGroupId);
  void send_getSubDeviceGroup(const int32_t deviceGroupId);
  void recv_getSubDeviceGroup(std::vector<int32_t> & _return);
  void getSubPersonGroup(std::vector<int32_t> & _return, const int32_t personGroupId);
  void send_getSubPersonGroup(const int32_t personGroupId);
  void recv_getSubPersonGroup(std::vector<int32_t> & _return);
  bool isDisable(const int32_t personId);
  void send_isDisable(const int32_t personId);
  bool recv_isDisable();
  bool isLocal();
  void send_isLocal();
  bool recv_isLocal();
  bool isValidAckChannel(const std::string& ackChannel);
  void send_isValidAckChannel(const std::string& ackChannel);
  bool recv_isValidAckChannel();
  bool isValidCmdSn(const int32_t cmdSn);
  void send_isValidCmdSn(const int32_t cmdSn);
  bool recv_isValidCmdSn();
  bool isValidDeviceToken(const Token& token);
  void send_isValidDeviceToken(const Token& token);
  bool recv_isValidDeviceToken();
  bool isValidPassword(const std::string& userId, const std::string& password, const bool isMd5);
  void send_isValidPassword(const std::string& userId, const std::string& password, const bool isMd5);
  bool recv_isValidPassword();
  bool isValidPersonToken(const Token& token);
  void send_isValidPersonToken(const Token& token);
  bool recv_isValidPersonToken();
  bool isValidRootToken(const Token& token);
  void send_isValidRootToken(const Token& token);
  bool recv_isValidRootToken();
  bool isValidToken(const Token& token);
  void send_isValidToken(const Token& token);
  bool recv_isValidToken();
  bool isValidUserToken(const Token& token);
  void send_isValidUserToken(const Token& token);
  bool recv_isValidUserToken();
  void listOfParentForDeviceGroup(std::vector<int32_t> & _return, const int32_t deviceGroupId);
  void send_listOfParentForDeviceGroup(const int32_t deviceGroupId);
  void recv_listOfParentForDeviceGroup(std::vector<int32_t> & _return);
  void listOfParentForPersonGroup(std::vector<int32_t> & _return, const int32_t personGroupId);
  void send_listOfParentForPersonGroup(const int32_t personGroupId);
  void recv_listOfParentForPersonGroup(std::vector<int32_t> & _return);
  void loadAllPerson(std::vector<int32_t> & _return);
  void send_loadAllPerson();
  void recv_loadAllPerson(std::vector<int32_t> & _return);
  void loadDeviceByWhere(std::vector<DeviceBean> & _return, const std::string& where, const int32_t startRow, const int32_t numRows);
  void send_loadDeviceByWhere(const std::string& where, const int32_t startRow, const int32_t numRows);
  void recv_loadDeviceByWhere(std::vector<DeviceBean> & _return);
  void loadDeviceGroupByWhere(std::vector<int32_t> & _return, const std::string& where, const int32_t startRow, const int32_t numRows);
  void send_loadDeviceGroupByWhere(const std::string& where, const int32_t startRow, const int32_t numRows);
  void recv_loadDeviceGroupByWhere(std::vector<int32_t> & _return);
  void loadDeviceGroupIdByWhere(std::vector<int32_t> & _return, const std::string& where);
  void send_loadDeviceGroupIdByWhere(const std::string& where);
  void recv_loadDeviceGroupIdByWhere(std::vector<int32_t> & _return);
  void loadDeviceIdByWhere(std::vector<int32_t> & _return, const std::string& where);
  void send_loadDeviceIdByWhere(const std::string& where);
  void recv_loadDeviceIdByWhere(std::vector<int32_t> & _return);
  void loadDistinctIntegerColumn(std::vector<int32_t> & _return, const std::string& table, const std::string& column, const std::string& where);
  void send_loadDistinctIntegerColumn(const std::string& table, const std::string& column, const std::string& where);
  void recv_loadDistinctIntegerColumn(std::vector<int32_t> & _return);
  void loadDistinctStringColumn(std::vector<std::string> & _return, const std::string& table, const std::string& column, const std::string& where);
  void send_loadDistinctStringColumn(const std::string& table, const std::string& column, const std::string& where);
  void recv_loadDistinctStringColumn(std::vector<std::string> & _return);
  void loadFeatureMd5ByUpdate(std::vector<std::string> & _return, const int64_t timestamp);
  void send_loadFeatureMd5ByUpdate(const int64_t timestamp);
  void recv_loadFeatureMd5ByUpdate(std::vector<std::string> & _return);
  void loadFeatureMd5ByUpdateTimeStr(std::vector<std::string> & _return, const std::string& timestamp);
  void send_loadFeatureMd5ByUpdateTimeStr(const std::string& timestamp);
  void recv_loadFeatureMd5ByUpdateTimeStr(std::vector<std::string> & _return);
  void loadLogByWhere(std::vector<LogBean> & _return, const std::string& where, const int32_t startRow, const int32_t numRows);
  void send_loadLogByWhere(const std::string& where, const int32_t startRow, const int32_t numRows);
  void recv_loadLogByWhere(std::vector<LogBean> & _return);
  void loadLogLightByVerifyTime(std::vector<LogLightBean> & _return, const int64_t timestamp, const int32_t startRow, const int32_t numRows);
  void send_loadLogLightByVerifyTime(const int64_t timestamp, const int32_t startRow, const int32_t numRows);
  void recv_loadLogLightByVerifyTime(std::vector<LogLightBean> & _return);
  void loadLogLightByVerifyTimeTimestr(std::vector<LogLightBean> & _return, const std::string& timestamp, const int32_t startRow, const int32_t numRows);
  void send_loadLogLightByVerifyTimeTimestr(const std::string& timestamp, const int32_t startRow, const int32_t numRows);
  void recv_loadLogLightByVerifyTimeTimestr(std::vector<LogLightBean> & _return);
  void loadLogLightByWhere(std::vector<LogLightBean> & _return, const std::string& where, const int32_t startRow, const int32_t numRows);
  void send_loadLogLightByWhere(const std::string& where, const int32_t startRow, const int32_t numRows);
  void recv_loadLogLightByWhere(std::vector<LogLightBean> & _return);
  void loadPermitByUpdate(std::vector<PermitBean> & _return, const int64_t timestamp);
  void send_loadPermitByUpdate(const int64_t timestamp);
  void recv_loadPermitByUpdate(std::vector<PermitBean> & _return);
  void loadPermitByUpdateTimestr(std::vector<PermitBean> & _return, const std::string& timestamp);
  void send_loadPermitByUpdateTimestr(const std::string& timestamp);
  void recv_loadPermitByUpdateTimestr(std::vector<PermitBean> & _return);
  void loadPersonByWhere(std::vector<PersonBean> & _return, const std::string& where, const int32_t startRow, const int32_t numRows);
  void send_loadPersonByWhere(const std::string& where, const int32_t startRow, const int32_t numRows);
  void recv_loadPersonByWhere(std::vector<PersonBean> & _return);
  void loadPersonGroupByWhere(std::vector<int32_t> & _return, const std::string& where, const int32_t startRow, const int32_t numRows);
  void send_loadPersonGroupByWhere(const std::string& where, const int32_t startRow, const int32_t numRows);
  void recv_loadPersonGroupByWhere(std::vector<int32_t> & _return);
  void loadPersonGroupIdByWhere(std::vector<int32_t> & _return, const std::string& where);
  void send_loadPersonGroupIdByWhere(const std::string& where);
  void recv_loadPersonGroupIdByWhere(std::vector<int32_t> & _return);
  void loadPersonIdByUpdateTime(std::vector<int32_t> & _return, const int64_t timestamp);
  void send_loadPersonIdByUpdateTime(const int64_t timestamp);
  void recv_loadPersonIdByUpdateTime(std::vector<int32_t> & _return);
  void loadPersonIdByUpdateTimeTimeStr(std::vector<int32_t> & _return, const std::string& timestamp);
  void send_loadPersonIdByUpdateTimeTimeStr(const std::string& timestamp);
  void recv_loadPersonIdByUpdateTimeTimeStr(std::vector<int32_t> & _return);
  void loadPersonIdByWhere(std::vector<int32_t> & _return, const std::string& where);
  void send_loadPersonIdByWhere(const std::string& where);
  void recv_loadPersonIdByWhere(std::vector<int32_t> & _return);
  void loadUpdatedPersons(std::vector<int32_t> & _return, const int64_t timestamp);
  void send_loadUpdatedPersons(const int64_t timestamp);
  void recv_loadUpdatedPersons(std::vector<int32_t> & _return);
  void loadUpdatedPersonsTimestr(std::vector<int32_t> & _return, const std::string& timestamp);
  void send_loadUpdatedPersonsTimestr(const std::string& timestamp);
  void recv_loadUpdatedPersonsTimestr(std::vector<int32_t> & _return);
  void offline(const Token& token);
  void send_offline(const Token& token);
  void recv_offline();
  void online(Token& _return, const DeviceBean& device);
  void send_online(const DeviceBean& device);
  void recv_online(Token& _return);
  void registerDevice(DeviceBean& _return, const DeviceBean& newDevice);
  void send_registerDevice(const DeviceBean& newDevice);
  void recv_registerDevice(DeviceBean& _return);
  void releasePersonToken(const Token& token);
  void send_releasePersonToken(const Token& token);
  void recv_releasePersonToken();
  void releaseRootToken(const Token& token);
  void send_releaseRootToken(const Token& token);
  void recv_releaseRootToken();
  void releaseUserToken(const Token& token);
  void send_releaseUserToken(const Token& token);
  void recv_releaseUserToken();
  void replaceFeature(const int32_t personId, const std::string& featureMd5, const bool deleteOldFeatureImage, const Token& token);
  void send_replaceFeature(const int32_t personId, const std::string& featureMd5, const bool deleteOldFeatureImage, const Token& token);
  void recv_replaceFeature();
  int32_t rootGroupOfDevice(const int32_t deviceId);
  void send_rootGroupOfDevice(const int32_t deviceId);
  int32_t recv_rootGroupOfDevice();
  int32_t rootGroupOfPerson(const int32_t personId);
  void send_rootGroupOfPerson(const int32_t personId);
  int32_t recv_rootGroupOfPerson();
  void runCmd(std::string& _return, const std::vector<int32_t> & target, const bool group, const std::string& cmdpath, const std::string& jsonArgs, const std::string& ackChannel, const Token& token);
  void send_runCmd(const std::vector<int32_t> & target, const bool group, const std::string& cmdpath, const std::string& jsonArgs, const std::string& ackChannel, const Token& token);
  void recv_runCmd(std::string& _return);
  int32_t runTask(const std::string& taskQueue, const std::string& cmdpath, const std::string& jsonArgs, const std::string& ackChannel, const Token& token);
  void send_runTask(const std::string& taskQueue, const std::string& cmdpath, const std::string& jsonArgs, const std::string& ackChannel, const Token& token);
  int32_t recv_runTask();
  void saveDevice(DeviceBean& _return, const DeviceBean& deviceBean, const Token& token);
  void send_saveDevice(const DeviceBean& deviceBean, const Token& token);
  void recv_saveDevice(DeviceBean& _return);
  void saveDeviceGroup(DeviceGroupBean& _return, const DeviceGroupBean& deviceGroupBean, const Token& token);
  void send_saveDeviceGroup(const DeviceGroupBean& deviceGroupBean, const Token& token);
  void recv_saveDeviceGroup(DeviceGroupBean& _return);
  void savePermit(PermitBean& _return, const PermitBean& permitBean, const Token& token);
  void send_savePermit(const PermitBean& permitBean, const Token& token);
  void recv_savePermit(PermitBean& _return);
  void savePermitWithColumn(PermitBean& _return, const int32_t deviceGroupId, const int32_t personGroupId, const std::string& column, const std::string& value, const Token& token);
  void send_savePermitWithColumn(const int32_t deviceGroupId, const int32_t personGroupId, const std::string& column, const std::string& value, const Token& token);
  void recv_savePermitWithColumn(PermitBean& _return);
  void savePerson(PersonBean& _return, const PersonBean& personBean, const Token& token);
  void send_savePerson(const PersonBean& personBean, const Token& token);
  void recv_savePerson(PersonBean& _return);
  void savePersonFull(PersonBean& _return, const PersonBean& personBean, const std::string& idPhoto, const std::string& feature, const std::string& featureVersion, const std::string& featureImage, const FaceBean& faceBean, const Token& token);
  void send_savePersonFull(const PersonBean& personBean, const std::string& idPhoto, const std::string& feature, const std::string& featureVersion, const std::string& featureImage, const FaceBean& faceBean, const Token& token);
  void recv_savePersonFull(PersonBean& _return);
  void savePersonGroup(PersonGroupBean& _return, const PersonGroupBean& personGroupBean, const Token& token);
  void send_savePersonGroup(const PersonGroupBean& personGroupBean, const Token& token);
  void recv_savePersonGroup(PersonGroupBean& _return);
  void savePersonWithPhoto(PersonBean& _return, const PersonBean& personBean, const std::string& idPhoto, const Token& token);
  void send_savePersonWithPhoto(const PersonBean& personBean, const std::string& idPhoto, const Token& token);
  void recv_savePersonWithPhoto(PersonBean& _return);
  void savePersonWithPhotoAndFeature(PersonBean& _return, const PersonBean& personBean, const std::string& idPhoto, const FeatureBean& featureBean, const Token& token);
  void send_savePersonWithPhotoAndFeature(const PersonBean& personBean, const std::string& idPhoto, const FeatureBean& featureBean, const Token& token);
  void recv_savePersonWithPhotoAndFeature(PersonBean& _return);
  void savePersonWithPhotoAndFeatureMultiFaces(PersonBean& _return, const PersonBean& personBean, const std::string& idPhoto, const std::string& feature, const std::string& featureVersion, const std::vector<FaceBean> & faceBeans, const Token& token);
  void send_savePersonWithPhotoAndFeatureMultiFaces(const PersonBean& personBean, const std::string& idPhoto, const std::string& feature, const std::string& featureVersion, const std::vector<FaceBean> & faceBeans, const Token& token);
  void recv_savePersonWithPhotoAndFeatureMultiFaces(PersonBean& _return);
  void savePersonWithPhotoAndFeatureMultiImage(PersonBean& _return, const PersonBean& personBean, const std::string& idPhoto, const std::string& feature, const std::string& featureVersion, const std::vector<std::string> & photos, const std::vector<FaceBean> & faces, const Token& token);
  void send_savePersonWithPhotoAndFeatureMultiImage(const PersonBean& personBean, const std::string& idPhoto, const std::string& feature, const std::string& featureVersion, const std::vector<std::string> & photos, const std::vector<FaceBean> & faces, const Token& token);
  void recv_savePersonWithPhotoAndFeatureMultiImage(PersonBean& _return);
  void savePersonWithPhotoAndFeatureSaved(PersonBean& _return, const PersonBean& personBean, const std::string& idPhotoMd5, const std::string& featureMd5, const Token& token);
  void send_savePersonWithPhotoAndFeatureSaved(const PersonBean& personBean, const std::string& idPhotoMd5, const std::string& featureMd5, const Token& token);
  void recv_savePersonWithPhotoAndFeatureSaved(PersonBean& _return);
  void savePersons(const std::vector<PersonBean> & persons, const Token& token);
  void send_savePersons(const std::vector<PersonBean> & persons, const Token& token);
  void recv_savePersons();
  int32_t savePersonsWithPhoto(const std::vector<std::string> & photos, const std::vector<PersonBean> & persons, const Token& token);
  void send_savePersonsWithPhoto(const std::vector<std::string> & photos, const std::vector<PersonBean> & persons, const Token& token);
  int32_t recv_savePersonsWithPhoto();
  void saveServiceConfig(const Token& token);
  void send_saveServiceConfig(const Token& token);
  void recv_saveServiceConfig();
  void sdkTaskQueueOf(std::string& _return, const std::string& task, const std::string& sdkVersion, const Token& token);
  void send_sdkTaskQueueOf(const std::string& task, const std::string& sdkVersion, const Token& token);
  void recv_sdkTaskQueueOf(std::string& _return);
  void setPersonExpiryDate(const int32_t personId, const int64_t expiryDate, const Token& token);
  void send_setPersonExpiryDate(const int32_t personId, const int64_t expiryDate, const Token& token);
  void recv_setPersonExpiryDate();
  void setPersonExpiryDateList(const std::vector<int32_t> & personIdList, const int64_t expiryDate, const Token& token);
  void send_setPersonExpiryDateList(const std::vector<int32_t> & personIdList, const int64_t expiryDate, const Token& token);
  void recv_setPersonExpiryDateList();
  void setPersonExpiryDateTimeStr(const int32_t personId, const std::string& expiryDate, const Token& token);
  void send_setPersonExpiryDateTimeStr(const int32_t personId, const std::string& expiryDate, const Token& token);
  void recv_setPersonExpiryDateTimeStr();
  void setProperties(const std::map<std::string, std::string> & config, const Token& token);
  void send_setProperties(const std::map<std::string, std::string> & config, const Token& token);
  void recv_setProperties();
  void setProperty(const std::string& key, const std::string& value, const Token& token);
  void send_setProperty(const std::string& key, const std::string& value, const Token& token);
  void recv_setProperty();
  void taskQueueOf(std::string& _return, const std::string& task, const Token& token);
  void send_taskQueueOf(const std::string& task, const Token& token);
  void recv_taskQueueOf(std::string& _return);
  void unbindBorder(const int32_t personGroupId, const int32_t deviceGroupId, const Token& token);
  void send_unbindBorder(const int32_t personGroupId, const int32_t deviceGroupId, const Token& token);
  void recv_unbindBorder();
  void unregisterDevice(const Token& token);
  void send_unregisterDevice(const Token& token);
  void recv_unregisterDevice();
  void updateDevice(DeviceBean& _return, const DeviceBean& deviceBean, const Token& token);
  void send_updateDevice(const DeviceBean& deviceBean, const Token& token);
  void recv_updateDevice(DeviceBean& _return);
  void version(std::string& _return);
  void send_version();
  void recv_version(std::string& _return);
  void versionInfo(std::map<std::string, std::string> & _return);
  void send_versionInfo();
  void recv_versionInfo(std::map<std::string, std::string> & _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< Protocol_> piprot_;
  apache::thrift::stdcxx::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
};

typedef IFaceLogClientT< ::apache::thrift::protocol::TProtocol> IFaceLogClient;

template <class Protocol_>
class IFaceLogProcessorT : public ::apache::thrift::TDispatchProcessorT<Protocol_> {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<IFaceLogIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
  virtual bool dispatchCallTemplated(Protocol_* iprot, Protocol_* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (IFaceLogProcessorT::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef void (IFaceLogProcessorT::*SpecializedProcessFunction)(int32_t, Protocol_*, Protocol_*, void*);
  struct ProcessFunctions {
    ProcessFunction generic;
    SpecializedProcessFunction specialized;
    ProcessFunctions(ProcessFunction g, SpecializedProcessFunction s) :
      generic(g),
      specialized(s) {}
    ProcessFunctions() : generic(NULL), specialized(NULL) {}
  };
  typedef std::map<std::string, ProcessFunctions> ProcessMap;
  ProcessMap processMap_;
  void process_addFeature(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addFeature(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_addFeatureMulti(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addFeatureMulti(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_addFeatureWithImage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addFeatureWithImage(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_addImage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addImage(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_addLog(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addLog(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_addLogFull(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addLogFull(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_addLogs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addLogs(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_addLogsFull(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addLogsFull(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_applyAckChannel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_applyAckChannel(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_applyAckChannelWithDuration(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_applyAckChannelWithDuration(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_applyCmdSn(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_applyCmdSn(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_applyPersonToken(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_applyPersonToken(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_applyRootToken(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_applyRootToken(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_applyUserToken(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_applyUserToken(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_bindBorder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bindBorder(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_childListForDeviceGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_childListForDeviceGroup(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_childListForPersonGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_childListForPersonGroup(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_countDeviceByWhere(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_countDeviceByWhere(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_countDeviceGroupByWhere(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_countDeviceGroupByWhere(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_countLogByWhere(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_countLogByWhere(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_countLogLightByVerifyTime(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_countLogLightByVerifyTime(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_countLogLightByVerifyTimeTimestr(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_countLogLightByVerifyTimeTimestr(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_countLogLightByWhere(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_countLogLightByWhere(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_countPersonByWhere(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_countPersonByWhere(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_countPersonGroupByWhere(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_countPersonGroupByWhere(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_countPersonLog(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_countPersonLog(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_countPersonLogTimeStr(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_countPersonLogTimeStr(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_deleteAllFeaturesByPersonId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteAllFeaturesByPersonId(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_deleteDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteDevice(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_deleteDeviceByMac(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteDeviceByMac(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_deleteDeviceGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteDeviceGroup(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_deleteFeature(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteFeature(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_deleteGroupPermitOnDeviceGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteGroupPermitOnDeviceGroup(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_deleteImage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteImage(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_deletePermitById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deletePermitById(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_deletePerson(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deletePerson(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_deletePersonByPapersNum(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deletePersonByPapersNum(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_deletePersonGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deletePersonGroup(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_deletePersonGroupPermit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deletePersonGroupPermit(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_deletePersons(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deletePersons(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_deletePersonsByPapersNum(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deletePersonsByPapersNum(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_disablePerson(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_disablePerson(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_disablePersonList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_disablePersonList(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_existsDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_existsDevice(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_existsFeature(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_existsFeature(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_existsImage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_existsImage(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_existsPerson(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_existsPerson(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDevice(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getDeviceByMac(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDeviceByMac(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getDeviceGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDeviceGroup(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getDeviceGroups(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDeviceGroups(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getDeviceGroupsBelongs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDeviceGroupsBelongs(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getDeviceGroupsPermit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDeviceGroupsPermit(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getDeviceGroupsPermittedBy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDeviceGroupsPermittedBy(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getDeviceIdOfFeature(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDeviceIdOfFeature(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getDevices(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDevices(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getDevicesOfGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDevicesOfGroup(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getFace(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFace(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getFacesOfFeature(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFacesOfFeature(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getFacesOfImage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFacesOfImage(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getFeature(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFeature(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getFeatureBytes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFeatureBytes(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getFeatures(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFeatures(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getFeaturesByPersonIdAndSdkVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFeaturesByPersonIdAndSdkVersion(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getFeaturesOfImage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFeaturesOfImage(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getFeaturesOfPerson(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFeaturesOfPerson(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getFeaturesPermittedOnDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFeaturesPermittedOnDevice(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getGroupPermit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getGroupPermit(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getGroupPermitOnDeviceGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getGroupPermitOnDeviceGroup(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getGroupPermits(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getGroupPermits(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getImage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getImage(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getImageBytes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getImageBytes(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getImageBytesRef(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getImageBytesRef(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getImagesAssociatedByFeature(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getImagesAssociatedByFeature(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getLogBeansByPersonId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getLogBeansByPersonId(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getPerson(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPerson(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getPersonByMobilePhone(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPersonByMobilePhone(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getPersonByPapersNum(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPersonByPapersNum(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getPersonGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPersonGroup(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getPersonGroups(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPersonGroups(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getPersonGroupsBelongs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPersonGroupsBelongs(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getPersonGroupsPermittedBy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPersonGroupsPermittedBy(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getPersonPermit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPersonPermit(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getPersonPermits(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPersonPermits(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getPersons(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPersons(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getPersonsOfGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPersonsOfGroup(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getPersonsPermittedOnDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPersonsPermittedOnDevice(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getProperties(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getProperties(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getProperty(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getProperty(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getRedisParameters(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRedisParameters(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getServiceConfig(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getServiceConfig(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getSubDeviceGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSubDeviceGroup(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_getSubPersonGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSubPersonGroup(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_isDisable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isDisable(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_isLocal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isLocal(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_isValidAckChannel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isValidAckChannel(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_isValidCmdSn(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isValidCmdSn(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_isValidDeviceToken(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isValidDeviceToken(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_isValidPassword(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isValidPassword(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_isValidPersonToken(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isValidPersonToken(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_isValidRootToken(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isValidRootToken(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_isValidToken(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isValidToken(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_isValidUserToken(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isValidUserToken(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_listOfParentForDeviceGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_listOfParentForDeviceGroup(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_listOfParentForPersonGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_listOfParentForPersonGroup(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_loadAllPerson(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadAllPerson(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_loadDeviceByWhere(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadDeviceByWhere(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_loadDeviceGroupByWhere(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadDeviceGroupByWhere(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_loadDeviceGroupIdByWhere(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadDeviceGroupIdByWhere(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_loadDeviceIdByWhere(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadDeviceIdByWhere(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_loadDistinctIntegerColumn(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadDistinctIntegerColumn(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_loadDistinctStringColumn(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadDistinctStringColumn(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_loadFeatureMd5ByUpdate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadFeatureMd5ByUpdate(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_loadFeatureMd5ByUpdateTimeStr(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadFeatureMd5ByUpdateTimeStr(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_loadLogByWhere(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadLogByWhere(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_loadLogLightByVerifyTime(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadLogLightByVerifyTime(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_loadLogLightByVerifyTimeTimestr(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadLogLightByVerifyTimeTimestr(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_loadLogLightByWhere(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadLogLightByWhere(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_loadPermitByUpdate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadPermitByUpdate(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_loadPermitByUpdateTimestr(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadPermitByUpdateTimestr(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_loadPersonByWhere(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadPersonByWhere(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_loadPersonGroupByWhere(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadPersonGroupByWhere(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_loadPersonGroupIdByWhere(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadPersonGroupIdByWhere(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_loadPersonIdByUpdateTime(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadPersonIdByUpdateTime(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_loadPersonIdByUpdateTimeTimeStr(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadPersonIdByUpdateTimeTimeStr(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_loadPersonIdByWhere(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadPersonIdByWhere(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_loadUpdatedPersons(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadUpdatedPersons(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_loadUpdatedPersonsTimestr(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadUpdatedPersonsTimestr(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_offline(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_offline(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_online(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_online(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_registerDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerDevice(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_releasePersonToken(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_releasePersonToken(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_releaseRootToken(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_releaseRootToken(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_releaseUserToken(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_releaseUserToken(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_replaceFeature(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_replaceFeature(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_rootGroupOfDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rootGroupOfDevice(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_rootGroupOfPerson(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rootGroupOfPerson(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_runCmd(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_runCmd(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_runTask(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_runTask(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_saveDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveDevice(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_saveDeviceGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveDeviceGroup(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_savePermit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_savePermit(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_savePermitWithColumn(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_savePermitWithColumn(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_savePerson(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_savePerson(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_savePersonFull(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_savePersonFull(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_savePersonGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_savePersonGroup(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_savePersonWithPhoto(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_savePersonWithPhoto(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_savePersonWithPhotoAndFeature(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_savePersonWithPhotoAndFeature(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_savePersonWithPhotoAndFeatureMultiFaces(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_savePersonWithPhotoAndFeatureMultiFaces(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_savePersonWithPhotoAndFeatureMultiImage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_savePersonWithPhotoAndFeatureMultiImage(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_savePersonWithPhotoAndFeatureSaved(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_savePersonWithPhotoAndFeatureSaved(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_savePersons(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_savePersons(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_savePersonsWithPhoto(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_savePersonsWithPhoto(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_saveServiceConfig(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveServiceConfig(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_sdkTaskQueueOf(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sdkTaskQueueOf(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_setPersonExpiryDate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setPersonExpiryDate(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_setPersonExpiryDateList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setPersonExpiryDateList(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_setPersonExpiryDateTimeStr(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setPersonExpiryDateTimeStr(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_setProperties(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setProperties(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_setProperty(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setProperty(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_taskQueueOf(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_taskQueueOf(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_unbindBorder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unbindBorder(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_unregisterDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unregisterDevice(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_updateDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateDevice(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_version(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_version(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_versionInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_versionInfo(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
 public:
  IFaceLogProcessorT(::apache::thrift::stdcxx::shared_ptr<IFaceLogIf> iface) :
    iface_(iface) {
    processMap_["addFeature"] = ProcessFunctions(
      &IFaceLogProcessorT::process_addFeature,
      &IFaceLogProcessorT::process_addFeature);
    processMap_["addFeatureMulti"] = ProcessFunctions(
      &IFaceLogProcessorT::process_addFeatureMulti,
      &IFaceLogProcessorT::process_addFeatureMulti);
    processMap_["addFeatureWithImage"] = ProcessFunctions(
      &IFaceLogProcessorT::process_addFeatureWithImage,
      &IFaceLogProcessorT::process_addFeatureWithImage);
    processMap_["addImage"] = ProcessFunctions(
      &IFaceLogProcessorT::process_addImage,
      &IFaceLogProcessorT::process_addImage);
    processMap_["addLog"] = ProcessFunctions(
      &IFaceLogProcessorT::process_addLog,
      &IFaceLogProcessorT::process_addLog);
    processMap_["addLogFull"] = ProcessFunctions(
      &IFaceLogProcessorT::process_addLogFull,
      &IFaceLogProcessorT::process_addLogFull);
    processMap_["addLogs"] = ProcessFunctions(
      &IFaceLogProcessorT::process_addLogs,
      &IFaceLogProcessorT::process_addLogs);
    processMap_["addLogsFull"] = ProcessFunctions(
      &IFaceLogProcessorT::process_addLogsFull,
      &IFaceLogProcessorT::process_addLogsFull);
    processMap_["applyAckChannel"] = ProcessFunctions(
      &IFaceLogProcessorT::process_applyAckChannel,
      &IFaceLogProcessorT::process_applyAckChannel);
    processMap_["applyAckChannelWithDuration"] = ProcessFunctions(
      &IFaceLogProcessorT::process_applyAckChannelWithDuration,
      &IFaceLogProcessorT::process_applyAckChannelWithDuration);
    processMap_["applyCmdSn"] = ProcessFunctions(
      &IFaceLogProcessorT::process_applyCmdSn,
      &IFaceLogProcessorT::process_applyCmdSn);
    processMap_["applyPersonToken"] = ProcessFunctions(
      &IFaceLogProcessorT::process_applyPersonToken,
      &IFaceLogProcessorT::process_applyPersonToken);
    processMap_["applyRootToken"] = ProcessFunctions(
      &IFaceLogProcessorT::process_applyRootToken,
      &IFaceLogProcessorT::process_applyRootToken);
    processMap_["applyUserToken"] = ProcessFunctions(
      &IFaceLogProcessorT::process_applyUserToken,
      &IFaceLogProcessorT::process_applyUserToken);
    processMap_["bindBorder"] = ProcessFunctions(
      &IFaceLogProcessorT::process_bindBorder,
      &IFaceLogProcessorT::process_bindBorder);
    processMap_["childListForDeviceGroup"] = ProcessFunctions(
      &IFaceLogProcessorT::process_childListForDeviceGroup,
      &IFaceLogProcessorT::process_childListForDeviceGroup);
    processMap_["childListForPersonGroup"] = ProcessFunctions(
      &IFaceLogProcessorT::process_childListForPersonGroup,
      &IFaceLogProcessorT::process_childListForPersonGroup);
    processMap_["countDeviceByWhere"] = ProcessFunctions(
      &IFaceLogProcessorT::process_countDeviceByWhere,
      &IFaceLogProcessorT::process_countDeviceByWhere);
    processMap_["countDeviceGroupByWhere"] = ProcessFunctions(
      &IFaceLogProcessorT::process_countDeviceGroupByWhere,
      &IFaceLogProcessorT::process_countDeviceGroupByWhere);
    processMap_["countLogByWhere"] = ProcessFunctions(
      &IFaceLogProcessorT::process_countLogByWhere,
      &IFaceLogProcessorT::process_countLogByWhere);
    processMap_["countLogLightByVerifyTime"] = ProcessFunctions(
      &IFaceLogProcessorT::process_countLogLightByVerifyTime,
      &IFaceLogProcessorT::process_countLogLightByVerifyTime);
    processMap_["countLogLightByVerifyTimeTimestr"] = ProcessFunctions(
      &IFaceLogProcessorT::process_countLogLightByVerifyTimeTimestr,
      &IFaceLogProcessorT::process_countLogLightByVerifyTimeTimestr);
    processMap_["countLogLightByWhere"] = ProcessFunctions(
      &IFaceLogProcessorT::process_countLogLightByWhere,
      &IFaceLogProcessorT::process_countLogLightByWhere);
    processMap_["countPersonByWhere"] = ProcessFunctions(
      &IFaceLogProcessorT::process_countPersonByWhere,
      &IFaceLogProcessorT::process_countPersonByWhere);
    processMap_["countPersonGroupByWhere"] = ProcessFunctions(
      &IFaceLogProcessorT::process_countPersonGroupByWhere,
      &IFaceLogProcessorT::process_countPersonGroupByWhere);
    processMap_["countPersonLog"] = ProcessFunctions(
      &IFaceLogProcessorT::process_countPersonLog,
      &IFaceLogProcessorT::process_countPersonLog);
    processMap_["countPersonLogTimeStr"] = ProcessFunctions(
      &IFaceLogProcessorT::process_countPersonLogTimeStr,
      &IFaceLogProcessorT::process_countPersonLogTimeStr);
    processMap_["deleteAllFeaturesByPersonId"] = ProcessFunctions(
      &IFaceLogProcessorT::process_deleteAllFeaturesByPersonId,
      &IFaceLogProcessorT::process_deleteAllFeaturesByPersonId);
    processMap_["deleteDevice"] = ProcessFunctions(
      &IFaceLogProcessorT::process_deleteDevice,
      &IFaceLogProcessorT::process_deleteDevice);
    processMap_["deleteDeviceByMac"] = ProcessFunctions(
      &IFaceLogProcessorT::process_deleteDeviceByMac,
      &IFaceLogProcessorT::process_deleteDeviceByMac);
    processMap_["deleteDeviceGroup"] = ProcessFunctions(
      &IFaceLogProcessorT::process_deleteDeviceGroup,
      &IFaceLogProcessorT::process_deleteDeviceGroup);
    processMap_["deleteFeature"] = ProcessFunctions(
      &IFaceLogProcessorT::process_deleteFeature,
      &IFaceLogProcessorT::process_deleteFeature);
    processMap_["deleteGroupPermitOnDeviceGroup"] = ProcessFunctions(
      &IFaceLogProcessorT::process_deleteGroupPermitOnDeviceGroup,
      &IFaceLogProcessorT::process_deleteGroupPermitOnDeviceGroup);
    processMap_["deleteImage"] = ProcessFunctions(
      &IFaceLogProcessorT::process_deleteImage,
      &IFaceLogProcessorT::process_deleteImage);
    processMap_["deletePermitById"] = ProcessFunctions(
      &IFaceLogProcessorT::process_deletePermitById,
      &IFaceLogProcessorT::process_deletePermitById);
    processMap_["deletePerson"] = ProcessFunctions(
      &IFaceLogProcessorT::process_deletePerson,
      &IFaceLogProcessorT::process_deletePerson);
    processMap_["deletePersonByPapersNum"] = ProcessFunctions(
      &IFaceLogProcessorT::process_deletePersonByPapersNum,
      &IFaceLogProcessorT::process_deletePersonByPapersNum);
    processMap_["deletePersonGroup"] = ProcessFunctions(
      &IFaceLogProcessorT::process_deletePersonGroup,
      &IFaceLogProcessorT::process_deletePersonGroup);
    processMap_["deletePersonGroupPermit"] = ProcessFunctions(
      &IFaceLogProcessorT::process_deletePersonGroupPermit,
      &IFaceLogProcessorT::process_deletePersonGroupPermit);
    processMap_["deletePersons"] = ProcessFunctions(
      &IFaceLogProcessorT::process_deletePersons,
      &IFaceLogProcessorT::process_deletePersons);
    processMap_["deletePersonsByPapersNum"] = ProcessFunctions(
      &IFaceLogProcessorT::process_deletePersonsByPapersNum,
      &IFaceLogProcessorT::process_deletePersonsByPapersNum);
    processMap_["disablePerson"] = ProcessFunctions(
      &IFaceLogProcessorT::process_disablePerson,
      &IFaceLogProcessorT::process_disablePerson);
    processMap_["disablePersonList"] = ProcessFunctions(
      &IFaceLogProcessorT::process_disablePersonList,
      &IFaceLogProcessorT::process_disablePersonList);
    processMap_["existsDevice"] = ProcessFunctions(
      &IFaceLogProcessorT::process_existsDevice,
      &IFaceLogProcessorT::process_existsDevice);
    processMap_["existsFeature"] = ProcessFunctions(
      &IFaceLogProcessorT::process_existsFeature,
      &IFaceLogProcessorT::process_existsFeature);
    processMap_["existsImage"] = ProcessFunctions(
      &IFaceLogProcessorT::process_existsImage,
      &IFaceLogProcessorT::process_existsImage);
    processMap_["existsPerson"] = ProcessFunctions(
      &IFaceLogProcessorT::process_existsPerson,
      &IFaceLogProcessorT::process_existsPerson);
    processMap_["getDevice"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getDevice,
      &IFaceLogProcessorT::process_getDevice);
    processMap_["getDeviceByMac"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getDeviceByMac,
      &IFaceLogProcessorT::process_getDeviceByMac);
    processMap_["getDeviceGroup"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getDeviceGroup,
      &IFaceLogProcessorT::process_getDeviceGroup);
    processMap_["getDeviceGroups"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getDeviceGroups,
      &IFaceLogProcessorT::process_getDeviceGroups);
    processMap_["getDeviceGroupsBelongs"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getDeviceGroupsBelongs,
      &IFaceLogProcessorT::process_getDeviceGroupsBelongs);
    processMap_["getDeviceGroupsPermit"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getDeviceGroupsPermit,
      &IFaceLogProcessorT::process_getDeviceGroupsPermit);
    processMap_["getDeviceGroupsPermittedBy"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getDeviceGroupsPermittedBy,
      &IFaceLogProcessorT::process_getDeviceGroupsPermittedBy);
    processMap_["getDeviceIdOfFeature"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getDeviceIdOfFeature,
      &IFaceLogProcessorT::process_getDeviceIdOfFeature);
    processMap_["getDevices"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getDevices,
      &IFaceLogProcessorT::process_getDevices);
    processMap_["getDevicesOfGroup"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getDevicesOfGroup,
      &IFaceLogProcessorT::process_getDevicesOfGroup);
    processMap_["getFace"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getFace,
      &IFaceLogProcessorT::process_getFace);
    processMap_["getFacesOfFeature"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getFacesOfFeature,
      &IFaceLogProcessorT::process_getFacesOfFeature);
    processMap_["getFacesOfImage"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getFacesOfImage,
      &IFaceLogProcessorT::process_getFacesOfImage);
    processMap_["getFeature"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getFeature,
      &IFaceLogProcessorT::process_getFeature);
    processMap_["getFeatureBytes"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getFeatureBytes,
      &IFaceLogProcessorT::process_getFeatureBytes);
    processMap_["getFeatures"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getFeatures,
      &IFaceLogProcessorT::process_getFeatures);
    processMap_["getFeaturesByPersonIdAndSdkVersion"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getFeaturesByPersonIdAndSdkVersion,
      &IFaceLogProcessorT::process_getFeaturesByPersonIdAndSdkVersion);
    processMap_["getFeaturesOfImage"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getFeaturesOfImage,
      &IFaceLogProcessorT::process_getFeaturesOfImage);
    processMap_["getFeaturesOfPerson"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getFeaturesOfPerson,
      &IFaceLogProcessorT::process_getFeaturesOfPerson);
    processMap_["getFeaturesPermittedOnDevice"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getFeaturesPermittedOnDevice,
      &IFaceLogProcessorT::process_getFeaturesPermittedOnDevice);
    processMap_["getGroupPermit"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getGroupPermit,
      &IFaceLogProcessorT::process_getGroupPermit);
    processMap_["getGroupPermitOnDeviceGroup"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getGroupPermitOnDeviceGroup,
      &IFaceLogProcessorT::process_getGroupPermitOnDeviceGroup);
    processMap_["getGroupPermits"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getGroupPermits,
      &IFaceLogProcessorT::process_getGroupPermits);
    processMap_["getImage"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getImage,
      &IFaceLogProcessorT::process_getImage);
    processMap_["getImageBytes"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getImageBytes,
      &IFaceLogProcessorT::process_getImageBytes);
    processMap_["getImageBytesRef"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getImageBytesRef,
      &IFaceLogProcessorT::process_getImageBytesRef);
    processMap_["getImagesAssociatedByFeature"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getImagesAssociatedByFeature,
      &IFaceLogProcessorT::process_getImagesAssociatedByFeature);
    processMap_["getLogBeansByPersonId"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getLogBeansByPersonId,
      &IFaceLogProcessorT::process_getLogBeansByPersonId);
    processMap_["getPerson"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getPerson,
      &IFaceLogProcessorT::process_getPerson);
    processMap_["getPersonByMobilePhone"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getPersonByMobilePhone,
      &IFaceLogProcessorT::process_getPersonByMobilePhone);
    processMap_["getPersonByPapersNum"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getPersonByPapersNum,
      &IFaceLogProcessorT::process_getPersonByPapersNum);
    processMap_["getPersonGroup"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getPersonGroup,
      &IFaceLogProcessorT::process_getPersonGroup);
    processMap_["getPersonGroups"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getPersonGroups,
      &IFaceLogProcessorT::process_getPersonGroups);
    processMap_["getPersonGroupsBelongs"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getPersonGroupsBelongs,
      &IFaceLogProcessorT::process_getPersonGroupsBelongs);
    processMap_["getPersonGroupsPermittedBy"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getPersonGroupsPermittedBy,
      &IFaceLogProcessorT::process_getPersonGroupsPermittedBy);
    processMap_["getPersonPermit"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getPersonPermit,
      &IFaceLogProcessorT::process_getPersonPermit);
    processMap_["getPersonPermits"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getPersonPermits,
      &IFaceLogProcessorT::process_getPersonPermits);
    processMap_["getPersons"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getPersons,
      &IFaceLogProcessorT::process_getPersons);
    processMap_["getPersonsOfGroup"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getPersonsOfGroup,
      &IFaceLogProcessorT::process_getPersonsOfGroup);
    processMap_["getPersonsPermittedOnDevice"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getPersonsPermittedOnDevice,
      &IFaceLogProcessorT::process_getPersonsPermittedOnDevice);
    processMap_["getProperties"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getProperties,
      &IFaceLogProcessorT::process_getProperties);
    processMap_["getProperty"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getProperty,
      &IFaceLogProcessorT::process_getProperty);
    processMap_["getRedisParameters"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getRedisParameters,
      &IFaceLogProcessorT::process_getRedisParameters);
    processMap_["getServiceConfig"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getServiceConfig,
      &IFaceLogProcessorT::process_getServiceConfig);
    processMap_["getSubDeviceGroup"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getSubDeviceGroup,
      &IFaceLogProcessorT::process_getSubDeviceGroup);
    processMap_["getSubPersonGroup"] = ProcessFunctions(
      &IFaceLogProcessorT::process_getSubPersonGroup,
      &IFaceLogProcessorT::process_getSubPersonGroup);
    processMap_["isDisable"] = ProcessFunctions(
      &IFaceLogProcessorT::process_isDisable,
      &IFaceLogProcessorT::process_isDisable);
    processMap_["isLocal"] = ProcessFunctions(
      &IFaceLogProcessorT::process_isLocal,
      &IFaceLogProcessorT::process_isLocal);
    processMap_["isValidAckChannel"] = ProcessFunctions(
      &IFaceLogProcessorT::process_isValidAckChannel,
      &IFaceLogProcessorT::process_isValidAckChannel);
    processMap_["isValidCmdSn"] = ProcessFunctions(
      &IFaceLogProcessorT::process_isValidCmdSn,
      &IFaceLogProcessorT::process_isValidCmdSn);
    processMap_["isValidDeviceToken"] = ProcessFunctions(
      &IFaceLogProcessorT::process_isValidDeviceToken,
      &IFaceLogProcessorT::process_isValidDeviceToken);
    processMap_["isValidPassword"] = ProcessFunctions(
      &IFaceLogProcessorT::process_isValidPassword,
      &IFaceLogProcessorT::process_isValidPassword);
    processMap_["isValidPersonToken"] = ProcessFunctions(
      &IFaceLogProcessorT::process_isValidPersonToken,
      &IFaceLogProcessorT::process_isValidPersonToken);
    processMap_["isValidRootToken"] = ProcessFunctions(
      &IFaceLogProcessorT::process_isValidRootToken,
      &IFaceLogProcessorT::process_isValidRootToken);
    processMap_["isValidToken"] = ProcessFunctions(
      &IFaceLogProcessorT::process_isValidToken,
      &IFaceLogProcessorT::process_isValidToken);
    processMap_["isValidUserToken"] = ProcessFunctions(
      &IFaceLogProcessorT::process_isValidUserToken,
      &IFaceLogProcessorT::process_isValidUserToken);
    processMap_["listOfParentForDeviceGroup"] = ProcessFunctions(
      &IFaceLogProcessorT::process_listOfParentForDeviceGroup,
      &IFaceLogProcessorT::process_listOfParentForDeviceGroup);
    processMap_["listOfParentForPersonGroup"] = ProcessFunctions(
      &IFaceLogProcessorT::process_listOfParentForPersonGroup,
      &IFaceLogProcessorT::process_listOfParentForPersonGroup);
    processMap_["loadAllPerson"] = ProcessFunctions(
      &IFaceLogProcessorT::process_loadAllPerson,
      &IFaceLogProcessorT::process_loadAllPerson);
    processMap_["loadDeviceByWhere"] = ProcessFunctions(
      &IFaceLogProcessorT::process_loadDeviceByWhere,
      &IFaceLogProcessorT::process_loadDeviceByWhere);
    processMap_["loadDeviceGroupByWhere"] = ProcessFunctions(
      &IFaceLogProcessorT::process_loadDeviceGroupByWhere,
      &IFaceLogProcessorT::process_loadDeviceGroupByWhere);
    processMap_["loadDeviceGroupIdByWhere"] = ProcessFunctions(
      &IFaceLogProcessorT::process_loadDeviceGroupIdByWhere,
      &IFaceLogProcessorT::process_loadDeviceGroupIdByWhere);
    processMap_["loadDeviceIdByWhere"] = ProcessFunctions(
      &IFaceLogProcessorT::process_loadDeviceIdByWhere,
      &IFaceLogProcessorT::process_loadDeviceIdByWhere);
    processMap_["loadDistinctIntegerColumn"] = ProcessFunctions(
      &IFaceLogProcessorT::process_loadDistinctIntegerColumn,
      &IFaceLogProcessorT::process_loadDistinctIntegerColumn);
    processMap_["loadDistinctStringColumn"] = ProcessFunctions(
      &IFaceLogProcessorT::process_loadDistinctStringColumn,
      &IFaceLogProcessorT::process_loadDistinctStringColumn);
    processMap_["loadFeatureMd5ByUpdate"] = ProcessFunctions(
      &IFaceLogProcessorT::process_loadFeatureMd5ByUpdate,
      &IFaceLogProcessorT::process_loadFeatureMd5ByUpdate);
    processMap_["loadFeatureMd5ByUpdateTimeStr"] = ProcessFunctions(
      &IFaceLogProcessorT::process_loadFeatureMd5ByUpdateTimeStr,
      &IFaceLogProcessorT::process_loadFeatureMd5ByUpdateTimeStr);
    processMap_["loadLogByWhere"] = ProcessFunctions(
      &IFaceLogProcessorT::process_loadLogByWhere,
      &IFaceLogProcessorT::process_loadLogByWhere);
    processMap_["loadLogLightByVerifyTime"] = ProcessFunctions(
      &IFaceLogProcessorT::process_loadLogLightByVerifyTime,
      &IFaceLogProcessorT::process_loadLogLightByVerifyTime);
    processMap_["loadLogLightByVerifyTimeTimestr"] = ProcessFunctions(
      &IFaceLogProcessorT::process_loadLogLightByVerifyTimeTimestr,
      &IFaceLogProcessorT::process_loadLogLightByVerifyTimeTimestr);
    processMap_["loadLogLightByWhere"] = ProcessFunctions(
      &IFaceLogProcessorT::process_loadLogLightByWhere,
      &IFaceLogProcessorT::process_loadLogLightByWhere);
    processMap_["loadPermitByUpdate"] = ProcessFunctions(
      &IFaceLogProcessorT::process_loadPermitByUpdate,
      &IFaceLogProcessorT::process_loadPermitByUpdate);
    processMap_["loadPermitByUpdateTimestr"] = ProcessFunctions(
      &IFaceLogProcessorT::process_loadPermitByUpdateTimestr,
      &IFaceLogProcessorT::process_loadPermitByUpdateTimestr);
    processMap_["loadPersonByWhere"] = ProcessFunctions(
      &IFaceLogProcessorT::process_loadPersonByWhere,
      &IFaceLogProcessorT::process_loadPersonByWhere);
    processMap_["loadPersonGroupByWhere"] = ProcessFunctions(
      &IFaceLogProcessorT::process_loadPersonGroupByWhere,
      &IFaceLogProcessorT::process_loadPersonGroupByWhere);
    processMap_["loadPersonGroupIdByWhere"] = ProcessFunctions(
      &IFaceLogProcessorT::process_loadPersonGroupIdByWhere,
      &IFaceLogProcessorT::process_loadPersonGroupIdByWhere);
    processMap_["loadPersonIdByUpdateTime"] = ProcessFunctions(
      &IFaceLogProcessorT::process_loadPersonIdByUpdateTime,
      &IFaceLogProcessorT::process_loadPersonIdByUpdateTime);
    processMap_["loadPersonIdByUpdateTimeTimeStr"] = ProcessFunctions(
      &IFaceLogProcessorT::process_loadPersonIdByUpdateTimeTimeStr,
      &IFaceLogProcessorT::process_loadPersonIdByUpdateTimeTimeStr);
    processMap_["loadPersonIdByWhere"] = ProcessFunctions(
      &IFaceLogProcessorT::process_loadPersonIdByWhere,
      &IFaceLogProcessorT::process_loadPersonIdByWhere);
    processMap_["loadUpdatedPersons"] = ProcessFunctions(
      &IFaceLogProcessorT::process_loadUpdatedPersons,
      &IFaceLogProcessorT::process_loadUpdatedPersons);
    processMap_["loadUpdatedPersonsTimestr"] = ProcessFunctions(
      &IFaceLogProcessorT::process_loadUpdatedPersonsTimestr,
      &IFaceLogProcessorT::process_loadUpdatedPersonsTimestr);
    processMap_["offline"] = ProcessFunctions(
      &IFaceLogProcessorT::process_offline,
      &IFaceLogProcessorT::process_offline);
    processMap_["online"] = ProcessFunctions(
      &IFaceLogProcessorT::process_online,
      &IFaceLogProcessorT::process_online);
    processMap_["registerDevice"] = ProcessFunctions(
      &IFaceLogProcessorT::process_registerDevice,
      &IFaceLogProcessorT::process_registerDevice);
    processMap_["releasePersonToken"] = ProcessFunctions(
      &IFaceLogProcessorT::process_releasePersonToken,
      &IFaceLogProcessorT::process_releasePersonToken);
    processMap_["releaseRootToken"] = ProcessFunctions(
      &IFaceLogProcessorT::process_releaseRootToken,
      &IFaceLogProcessorT::process_releaseRootToken);
    processMap_["releaseUserToken"] = ProcessFunctions(
      &IFaceLogProcessorT::process_releaseUserToken,
      &IFaceLogProcessorT::process_releaseUserToken);
    processMap_["replaceFeature"] = ProcessFunctions(
      &IFaceLogProcessorT::process_replaceFeature,
      &IFaceLogProcessorT::process_replaceFeature);
    processMap_["rootGroupOfDevice"] = ProcessFunctions(
      &IFaceLogProcessorT::process_rootGroupOfDevice,
      &IFaceLogProcessorT::process_rootGroupOfDevice);
    processMap_["rootGroupOfPerson"] = ProcessFunctions(
      &IFaceLogProcessorT::process_rootGroupOfPerson,
      &IFaceLogProcessorT::process_rootGroupOfPerson);
    processMap_["runCmd"] = ProcessFunctions(
      &IFaceLogProcessorT::process_runCmd,
      &IFaceLogProcessorT::process_runCmd);
    processMap_["runTask"] = ProcessFunctions(
      &IFaceLogProcessorT::process_runTask,
      &IFaceLogProcessorT::process_runTask);
    processMap_["saveDevice"] = ProcessFunctions(
      &IFaceLogProcessorT::process_saveDevice,
      &IFaceLogProcessorT::process_saveDevice);
    processMap_["saveDeviceGroup"] = ProcessFunctions(
      &IFaceLogProcessorT::process_saveDeviceGroup,
      &IFaceLogProcessorT::process_saveDeviceGroup);
    processMap_["savePermit"] = ProcessFunctions(
      &IFaceLogProcessorT::process_savePermit,
      &IFaceLogProcessorT::process_savePermit);
    processMap_["savePermitWithColumn"] = ProcessFunctions(
      &IFaceLogProcessorT::process_savePermitWithColumn,
      &IFaceLogProcessorT::process_savePermitWithColumn);
    processMap_["savePerson"] = ProcessFunctions(
      &IFaceLogProcessorT::process_savePerson,
      &IFaceLogProcessorT::process_savePerson);
    processMap_["savePersonFull"] = ProcessFunctions(
      &IFaceLogProcessorT::process_savePersonFull,
      &IFaceLogProcessorT::process_savePersonFull);
    processMap_["savePersonGroup"] = ProcessFunctions(
      &IFaceLogProcessorT::process_savePersonGroup,
      &IFaceLogProcessorT::process_savePersonGroup);
    processMap_["savePersonWithPhoto"] = ProcessFunctions(
      &IFaceLogProcessorT::process_savePersonWithPhoto,
      &IFaceLogProcessorT::process_savePersonWithPhoto);
    processMap_["savePersonWithPhotoAndFeature"] = ProcessFunctions(
      &IFaceLogProcessorT::process_savePersonWithPhotoAndFeature,
      &IFaceLogProcessorT::process_savePersonWithPhotoAndFeature);
    processMap_["savePersonWithPhotoAndFeatureMultiFaces"] = ProcessFunctions(
      &IFaceLogProcessorT::process_savePersonWithPhotoAndFeatureMultiFaces,
      &IFaceLogProcessorT::process_savePersonWithPhotoAndFeatureMultiFaces);
    processMap_["savePersonWithPhotoAndFeatureMultiImage"] = ProcessFunctions(
      &IFaceLogProcessorT::process_savePersonWithPhotoAndFeatureMultiImage,
      &IFaceLogProcessorT::process_savePersonWithPhotoAndFeatureMultiImage);
    processMap_["savePersonWithPhotoAndFeatureSaved"] = ProcessFunctions(
      &IFaceLogProcessorT::process_savePersonWithPhotoAndFeatureSaved,
      &IFaceLogProcessorT::process_savePersonWithPhotoAndFeatureSaved);
    processMap_["savePersons"] = ProcessFunctions(
      &IFaceLogProcessorT::process_savePersons,
      &IFaceLogProcessorT::process_savePersons);
    processMap_["savePersonsWithPhoto"] = ProcessFunctions(
      &IFaceLogProcessorT::process_savePersonsWithPhoto,
      &IFaceLogProcessorT::process_savePersonsWithPhoto);
    processMap_["saveServiceConfig"] = ProcessFunctions(
      &IFaceLogProcessorT::process_saveServiceConfig,
      &IFaceLogProcessorT::process_saveServiceConfig);
    processMap_["sdkTaskQueueOf"] = ProcessFunctions(
      &IFaceLogProcessorT::process_sdkTaskQueueOf,
      &IFaceLogProcessorT::process_sdkTaskQueueOf);
    processMap_["setPersonExpiryDate"] = ProcessFunctions(
      &IFaceLogProcessorT::process_setPersonExpiryDate,
      &IFaceLogProcessorT::process_setPersonExpiryDate);
    processMap_["setPersonExpiryDateList"] = ProcessFunctions(
      &IFaceLogProcessorT::process_setPersonExpiryDateList,
      &IFaceLogProcessorT::process_setPersonExpiryDateList);
    processMap_["setPersonExpiryDateTimeStr"] = ProcessFunctions(
      &IFaceLogProcessorT::process_setPersonExpiryDateTimeStr,
      &IFaceLogProcessorT::process_setPersonExpiryDateTimeStr);
    processMap_["setProperties"] = ProcessFunctions(
      &IFaceLogProcessorT::process_setProperties,
      &IFaceLogProcessorT::process_setProperties);
    processMap_["setProperty"] = ProcessFunctions(
      &IFaceLogProcessorT::process_setProperty,
      &IFaceLogProcessorT::process_setProperty);
    processMap_["taskQueueOf"] = ProcessFunctions(
      &IFaceLogProcessorT::process_taskQueueOf,
      &IFaceLogProcessorT::process_taskQueueOf);
    processMap_["unbindBorder"] = ProcessFunctions(
      &IFaceLogProcessorT::process_unbindBorder,
      &IFaceLogProcessorT::process_unbindBorder);
    processMap_["unregisterDevice"] = ProcessFunctions(
      &IFaceLogProcessorT::process_unregisterDevice,
      &IFaceLogProcessorT::process_unregisterDevice);
    processMap_["updateDevice"] = ProcessFunctions(
      &IFaceLogProcessorT::process_updateDevice,
      &IFaceLogProcessorT::process_updateDevice);
    processMap_["version"] = ProcessFunctions(
      &IFaceLogProcessorT::process_version,
      &IFaceLogProcessorT::process_version);
    processMap_["versionInfo"] = ProcessFunctions(
      &IFaceLogProcessorT::process_versionInfo,
      &IFaceLogProcessorT::process_versionInfo);
  }

  virtual ~IFaceLogProcessorT() {}
};

typedef IFaceLogProcessorT< ::apache::thrift::protocol::TDummyProtocol > IFaceLogProcessor;

template <class Protocol_>
class IFaceLogProcessorFactoryT : public ::apache::thrift::TProcessorFactory {
 public:
  IFaceLogProcessorFactoryT(const ::apache::thrift::stdcxx::shared_ptr< IFaceLogIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< IFaceLogIfFactory > handlerFactory_;
};

typedef IFaceLogProcessorFactoryT< ::apache::thrift::protocol::TDummyProtocol > IFaceLogProcessorFactory;

class IFaceLogMultiface : virtual public IFaceLogIf {
 public:
  IFaceLogMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<IFaceLogIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~IFaceLogMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<IFaceLogIf> > ifaces_;
  IFaceLogMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<IFaceLogIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void addFeature(FeatureBean& _return, const std::string& feature, const std::string& featureVersion, const int32_t personId, const std::vector<FaceBean> & faecBeans, const std::string& removed, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addFeature(_return, feature, featureVersion, personId, faecBeans, removed, token);
    }
    ifaces_[i]->addFeature(_return, feature, featureVersion, personId, faecBeans, removed, token);
    return;
  }

  void addFeatureMulti(FeatureBean& _return, const std::string& feature, const std::string& featureVersion, const int32_t personId, const std::vector<std::string> & photos, const std::vector<FaceBean> & faces, const std::string& removed, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addFeatureMulti(_return, feature, featureVersion, personId, photos, faces, removed, token);
    }
    ifaces_[i]->addFeatureMulti(_return, feature, featureVersion, personId, photos, faces, removed, token);
    return;
  }

  void addFeatureWithImage(FeatureBean& _return, const std::string& feature, const std::string& featureVersion, const int32_t personId, const bool asIdPhotoIfAbsent, const std::string& featurePhoto, const FaceBean& faceBean, const std::string& removed, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addFeatureWithImage(_return, feature, featureVersion, personId, asIdPhotoIfAbsent, featurePhoto, faceBean, removed, token);
    }
    ifaces_[i]->addFeatureWithImage(_return, feature, featureVersion, personId, asIdPhotoIfAbsent, featurePhoto, faceBean, removed, token);
    return;
  }

  void addImage(ImageBean& _return, const std::string& imageData, const int32_t deviceId, const FaceBean& faceBean, const int32_t personId, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addImage(_return, imageData, deviceId, faceBean, personId, token);
    }
    ifaces_[i]->addImage(_return, imageData, deviceId, faceBean, personId, token);
    return;
  }

  void addLog(const LogBean& logBean, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addLog(logBean, token);
    }
    ifaces_[i]->addLog(logBean, token);
  }

  void addLogFull(const LogBean& logBean, const FaceBean& faceBean, const std::string& featureImage, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addLogFull(logBean, faceBean, featureImage, token);
    }
    ifaces_[i]->addLogFull(logBean, faceBean, featureImage, token);
  }

  void addLogs(const std::vector<LogBean> & beans, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addLogs(beans, token);
    }
    ifaces_[i]->addLogs(beans, token);
  }

  void addLogsFull(const std::vector<LogBean> & logBeans, const std::vector<FaceBean> & faceBeans, const std::vector<std::string> & featureImages, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addLogsFull(logBeans, faceBeans, featureImages, token);
    }
    ifaces_[i]->addLogsFull(logBeans, faceBeans, featureImages, token);
  }

  void applyAckChannel(std::string& _return, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->applyAckChannel(_return, token);
    }
    ifaces_[i]->applyAckChannel(_return, token);
    return;
  }

  void applyAckChannelWithDuration(std::string& _return, const int32_t duration, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->applyAckChannelWithDuration(_return, duration, token);
    }
    ifaces_[i]->applyAckChannelWithDuration(_return, duration, token);
    return;
  }

  int32_t applyCmdSn(const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->applyCmdSn(token);
    }
    return ifaces_[i]->applyCmdSn(token);
  }

  void applyPersonToken(Token& _return, const int32_t personId, const std::string& password, const bool isMd5) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->applyPersonToken(_return, personId, password, isMd5);
    }
    ifaces_[i]->applyPersonToken(_return, personId, password, isMd5);
    return;
  }

  void applyRootToken(Token& _return, const std::string& password, const bool isMd5) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->applyRootToken(_return, password, isMd5);
    }
    ifaces_[i]->applyRootToken(_return, password, isMd5);
    return;
  }

  void applyUserToken(Token& _return, const int32_t userid, const std::string& password, const bool isMd5) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->applyUserToken(_return, userid, password, isMd5);
    }
    ifaces_[i]->applyUserToken(_return, userid, password, isMd5);
    return;
  }

  void bindBorder(const int32_t personGroupId, const int32_t deviceGroupId, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bindBorder(personGroupId, deviceGroupId, token);
    }
    ifaces_[i]->bindBorder(personGroupId, deviceGroupId, token);
  }

  void childListForDeviceGroup(std::vector<int32_t> & _return, const int32_t deviceGroupId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->childListForDeviceGroup(_return, deviceGroupId);
    }
    ifaces_[i]->childListForDeviceGroup(_return, deviceGroupId);
    return;
  }

  void childListForPersonGroup(std::vector<int32_t> & _return, const int32_t personGroupId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->childListForPersonGroup(_return, personGroupId);
    }
    ifaces_[i]->childListForPersonGroup(_return, personGroupId);
    return;
  }

  int32_t countDeviceByWhere(const std::string& where) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->countDeviceByWhere(where);
    }
    return ifaces_[i]->countDeviceByWhere(where);
  }

  int32_t countDeviceGroupByWhere(const std::string& where) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->countDeviceGroupByWhere(where);
    }
    return ifaces_[i]->countDeviceGroupByWhere(where);
  }

  int32_t countLogByWhere(const std::string& where) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->countLogByWhere(where);
    }
    return ifaces_[i]->countLogByWhere(where);
  }

  int32_t countLogLightByVerifyTime(const int64_t timestamp) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->countLogLightByVerifyTime(timestamp);
    }
    return ifaces_[i]->countLogLightByVerifyTime(timestamp);
  }

  int32_t countLogLightByVerifyTimeTimestr(const std::string& timestamp) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->countLogLightByVerifyTimeTimestr(timestamp);
    }
    return ifaces_[i]->countLogLightByVerifyTimeTimestr(timestamp);
  }

  int32_t countLogLightByWhere(const std::string& where) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->countLogLightByWhere(where);
    }
    return ifaces_[i]->countLogLightByWhere(where);
  }

  int32_t countPersonByWhere(const std::string& where) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->countPersonByWhere(where);
    }
    return ifaces_[i]->countPersonByWhere(where);
  }

  int32_t countPersonGroupByWhere(const std::string& where) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->countPersonGroupByWhere(where);
    }
    return ifaces_[i]->countPersonGroupByWhere(where);
  }

  void countPersonLog(std::map<std::string, int32_t> & _return, const int32_t personId, const int64_t startDate, const int64_t endDate) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->countPersonLog(_return, personId, startDate, endDate);
    }
    ifaces_[i]->countPersonLog(_return, personId, startDate, endDate);
    return;
  }

  void countPersonLogTimeStr(std::map<std::string, int32_t> & _return, const int32_t personId, const std::string& startDate, const std::string& endDate) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->countPersonLogTimeStr(_return, personId, startDate, endDate);
    }
    ifaces_[i]->countPersonLogTimeStr(_return, personId, startDate, endDate);
    return;
  }

  int32_t deleteAllFeaturesByPersonId(const int32_t personId, const bool deleteImage, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteAllFeaturesByPersonId(personId, deleteImage, token);
    }
    return ifaces_[i]->deleteAllFeaturesByPersonId(personId, deleteImage, token);
  }

  bool deleteDevice(const int32_t id, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteDevice(id, token);
    }
    return ifaces_[i]->deleteDevice(id, token);
  }

  bool deleteDeviceByMac(const std::string& mac, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteDeviceByMac(mac, token);
    }
    return ifaces_[i]->deleteDeviceByMac(mac, token);
  }

  int32_t deleteDeviceGroup(const int32_t deviceGroupId, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteDeviceGroup(deviceGroupId, token);
    }
    return ifaces_[i]->deleteDeviceGroup(deviceGroupId, token);
  }

  void deleteFeature(std::vector<std::string> & _return, const std::string& featureMd5, const bool deleteImage, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteFeature(_return, featureMd5, deleteImage, token);
    }
    ifaces_[i]->deleteFeature(_return, featureMd5, deleteImage, token);
    return;
  }

  int32_t deleteGroupPermitOnDeviceGroup(const int32_t deviceGroupId, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteGroupPermitOnDeviceGroup(deviceGroupId, token);
    }
    return ifaces_[i]->deleteGroupPermitOnDeviceGroup(deviceGroupId, token);
  }

  int32_t deleteImage(const std::string& imageMd5, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteImage(imageMd5, token);
    }
    return ifaces_[i]->deleteImage(imageMd5, token);
  }

  int32_t deletePermitById(const int32_t deviceGroupId, const int32_t personGroupId, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deletePermitById(deviceGroupId, personGroupId, token);
    }
    return ifaces_[i]->deletePermitById(deviceGroupId, personGroupId, token);
  }

  int32_t deletePerson(const int32_t personId, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deletePerson(personId, token);
    }
    return ifaces_[i]->deletePerson(personId, token);
  }

  int32_t deletePersonByPapersNum(const std::string& papersNum, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deletePersonByPapersNum(papersNum, token);
    }
    return ifaces_[i]->deletePersonByPapersNum(papersNum, token);
  }

  int32_t deletePersonGroup(const int32_t personGroupId, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deletePersonGroup(personGroupId, token);
    }
    return ifaces_[i]->deletePersonGroup(personGroupId, token);
  }

  int32_t deletePersonGroupPermit(const int32_t personGroupId, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deletePersonGroupPermit(personGroupId, token);
    }
    return ifaces_[i]->deletePersonGroupPermit(personGroupId, token);
  }

  int32_t deletePersons(const std::vector<int32_t> & personIdList, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deletePersons(personIdList, token);
    }
    return ifaces_[i]->deletePersons(personIdList, token);
  }

  int32_t deletePersonsByPapersNum(const std::vector<std::string> & papersNumlist, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deletePersonsByPapersNum(papersNumlist, token);
    }
    return ifaces_[i]->deletePersonsByPapersNum(papersNumlist, token);
  }

  void disablePerson(const int32_t personId, const int32_t moveToGroupId, const bool deletePhoto, const bool deleteFeature, const bool deleteLog, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->disablePerson(personId, moveToGroupId, deletePhoto, deleteFeature, deleteLog, token);
    }
    ifaces_[i]->disablePerson(personId, moveToGroupId, deletePhoto, deleteFeature, deleteLog, token);
  }

  void disablePersonList(const std::vector<int32_t> & personIdList, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->disablePersonList(personIdList, token);
    }
    ifaces_[i]->disablePersonList(personIdList, token);
  }

  bool existsDevice(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->existsDevice(id);
    }
    return ifaces_[i]->existsDevice(id);
  }

  bool existsFeature(const std::string& md5) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->existsFeature(md5);
    }
    return ifaces_[i]->existsFeature(md5);
  }

  bool existsImage(const std::string& md5) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->existsImage(md5);
    }
    return ifaces_[i]->existsImage(md5);
  }

  bool existsPerson(const int32_t persionId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->existsPerson(persionId);
    }
    return ifaces_[i]->existsPerson(persionId);
  }

  void getDevice(DeviceBean& _return, const int32_t deviceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDevice(_return, deviceId);
    }
    ifaces_[i]->getDevice(_return, deviceId);
    return;
  }

  void getDeviceByMac(DeviceBean& _return, const std::string& mac) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDeviceByMac(_return, mac);
    }
    ifaces_[i]->getDeviceByMac(_return, mac);
    return;
  }

  void getDeviceGroup(DeviceGroupBean& _return, const int32_t deviceGroupId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDeviceGroup(_return, deviceGroupId);
    }
    ifaces_[i]->getDeviceGroup(_return, deviceGroupId);
    return;
  }

  void getDeviceGroups(std::vector<DeviceGroupBean> & _return, const std::vector<int32_t> & groupIdList) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDeviceGroups(_return, groupIdList);
    }
    ifaces_[i]->getDeviceGroups(_return, groupIdList);
    return;
  }

  void getDeviceGroupsBelongs(std::vector<int32_t> & _return, const int32_t deviceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDeviceGroupsBelongs(_return, deviceId);
    }
    ifaces_[i]->getDeviceGroupsBelongs(_return, deviceId);
    return;
  }

  void getDeviceGroupsPermit(std::vector<int32_t> & _return, const int32_t personGroupId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDeviceGroupsPermit(_return, personGroupId);
    }
    ifaces_[i]->getDeviceGroupsPermit(_return, personGroupId);
    return;
  }

  void getDeviceGroupsPermittedBy(std::vector<int32_t> & _return, const int32_t personGroupId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDeviceGroupsPermittedBy(_return, personGroupId);
    }
    ifaces_[i]->getDeviceGroupsPermittedBy(_return, personGroupId);
    return;
  }

  int32_t getDeviceIdOfFeature(const std::string& featureMd5) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDeviceIdOfFeature(featureMd5);
    }
    return ifaces_[i]->getDeviceIdOfFeature(featureMd5);
  }

  void getDevices(std::vector<DeviceBean> & _return, const std::vector<int32_t> & idList) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDevices(_return, idList);
    }
    ifaces_[i]->getDevices(_return, idList);
    return;
  }

  void getDevicesOfGroup(std::vector<int32_t> & _return, const int32_t deviceGroupId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDevicesOfGroup(_return, deviceGroupId);
    }
    ifaces_[i]->getDevicesOfGroup(_return, deviceGroupId);
    return;
  }

  void getFace(FaceBean& _return, const int32_t faceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFace(_return, faceId);
    }
    ifaces_[i]->getFace(_return, faceId);
    return;
  }

  void getFacesOfFeature(std::vector<FaceBean> & _return, const std::string& featureMd5) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFacesOfFeature(_return, featureMd5);
    }
    ifaces_[i]->getFacesOfFeature(_return, featureMd5);
    return;
  }

  void getFacesOfImage(std::vector<FaceBean> & _return, const std::string& imageMd5) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFacesOfImage(_return, imageMd5);
    }
    ifaces_[i]->getFacesOfImage(_return, imageMd5);
    return;
  }

  void getFeature(FeatureBean& _return, const std::string& md5) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFeature(_return, md5);
    }
    ifaces_[i]->getFeature(_return, md5);
    return;
  }

  void getFeatureBytes(std::string& _return, const std::string& md5) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFeatureBytes(_return, md5);
    }
    ifaces_[i]->getFeatureBytes(_return, md5);
    return;
  }

  void getFeatures(std::vector<FeatureBean> & _return, const std::vector<std::string> & md5List) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFeatures(_return, md5List);
    }
    ifaces_[i]->getFeatures(_return, md5List);
    return;
  }

  void getFeaturesByPersonIdAndSdkVersion(std::vector<std::string> & _return, const int32_t personId, const std::string& sdkVersion) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFeaturesByPersonIdAndSdkVersion(_return, personId, sdkVersion);
    }
    ifaces_[i]->getFeaturesByPersonIdAndSdkVersion(_return, personId, sdkVersion);
    return;
  }

  void getFeaturesOfImage(std::vector<std::string> & _return, const std::string& imageMd5) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFeaturesOfImage(_return, imageMd5);
    }
    ifaces_[i]->getFeaturesOfImage(_return, imageMd5);
    return;
  }

  void getFeaturesOfPerson(std::vector<std::string> & _return, const int32_t personId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFeaturesOfPerson(_return, personId);
    }
    ifaces_[i]->getFeaturesOfPerson(_return, personId);
    return;
  }

  void getFeaturesPermittedOnDevice(std::vector<std::string> & _return, const int32_t deviceId, const bool ignoreSchedule, const std::string& sdkVersion, const std::vector<std::string> & excludeFeatureIds, const int64_t timestamp) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFeaturesPermittedOnDevice(_return, deviceId, ignoreSchedule, sdkVersion, excludeFeatureIds, timestamp);
    }
    ifaces_[i]->getFeaturesPermittedOnDevice(_return, deviceId, ignoreSchedule, sdkVersion, excludeFeatureIds, timestamp);
    return;
  }

  void getGroupPermit(PermitBean& _return, const int32_t deviceId, const int32_t personGroupId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getGroupPermit(_return, deviceId, personGroupId);
    }
    ifaces_[i]->getGroupPermit(_return, deviceId, personGroupId);
    return;
  }

  void getGroupPermitOnDeviceGroup(PermitBean& _return, const int32_t deviceGroupId, const int32_t personGroupId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getGroupPermitOnDeviceGroup(_return, deviceGroupId, personGroupId);
    }
    ifaces_[i]->getGroupPermitOnDeviceGroup(_return, deviceGroupId, personGroupId);
    return;
  }

  void getGroupPermits(std::vector<PermitBean> & _return, const int32_t deviceId, const std::vector<int32_t> & personGroupIdList) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getGroupPermits(_return, deviceId, personGroupIdList);
    }
    ifaces_[i]->getGroupPermits(_return, deviceId, personGroupIdList);
    return;
  }

  void getImage(ImageBean& _return, const std::string& imageMD5) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getImage(_return, imageMD5);
    }
    ifaces_[i]->getImage(_return, imageMD5);
    return;
  }

  void getImageBytes(std::string& _return, const std::string& imageMD5) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getImageBytes(_return, imageMD5);
    }
    ifaces_[i]->getImageBytes(_return, imageMD5);
    return;
  }

  void getImageBytesRef(std::string& _return, const std::string& primaryKey, const std::string& refType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getImageBytesRef(_return, primaryKey, refType);
    }
    ifaces_[i]->getImageBytesRef(_return, primaryKey, refType);
    return;
  }

  void getImagesAssociatedByFeature(std::vector<std::string> & _return, const std::string& featureMd5) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getImagesAssociatedByFeature(_return, featureMd5);
    }
    ifaces_[i]->getImagesAssociatedByFeature(_return, featureMd5);
    return;
  }

  void getLogBeansByPersonId(std::vector<LogBean> & _return, const int32_t personId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getLogBeansByPersonId(_return, personId);
    }
    ifaces_[i]->getLogBeansByPersonId(_return, personId);
    return;
  }

  void getPerson(PersonBean& _return, const int32_t personId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPerson(_return, personId);
    }
    ifaces_[i]->getPerson(_return, personId);
    return;
  }

  void getPersonByMobilePhone(PersonBean& _return, const std::string& mobilePhone) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPersonByMobilePhone(_return, mobilePhone);
    }
    ifaces_[i]->getPersonByMobilePhone(_return, mobilePhone);
    return;
  }

  void getPersonByPapersNum(PersonBean& _return, const std::string& papersNum) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPersonByPapersNum(_return, papersNum);
    }
    ifaces_[i]->getPersonByPapersNum(_return, papersNum);
    return;
  }

  void getPersonGroup(PersonGroupBean& _return, const int32_t personGroupId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPersonGroup(_return, personGroupId);
    }
    ifaces_[i]->getPersonGroup(_return, personGroupId);
    return;
  }

  void getPersonGroups(std::vector<PersonGroupBean> & _return, const std::vector<int32_t> & groupIdList) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPersonGroups(_return, groupIdList);
    }
    ifaces_[i]->getPersonGroups(_return, groupIdList);
    return;
  }

  void getPersonGroupsBelongs(std::vector<int32_t> & _return, const int32_t personId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPersonGroupsBelongs(_return, personId);
    }
    ifaces_[i]->getPersonGroupsBelongs(_return, personId);
    return;
  }

  void getPersonGroupsPermittedBy(std::vector<int32_t> & _return, const int32_t deviceGroupId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPersonGroupsPermittedBy(_return, deviceGroupId);
    }
    ifaces_[i]->getPersonGroupsPermittedBy(_return, deviceGroupId);
    return;
  }

  void getPersonPermit(PermitBean& _return, const int32_t deviceId, const int32_t personId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPersonPermit(_return, deviceId, personId);
    }
    ifaces_[i]->getPersonPermit(_return, deviceId, personId);
    return;
  }

  void getPersonPermits(std::vector<PermitBean> & _return, const int32_t deviceId, const std::vector<int32_t> & personIdList) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPersonPermits(_return, deviceId, personIdList);
    }
    ifaces_[i]->getPersonPermits(_return, deviceId, personIdList);
    return;
  }

  void getPersons(std::vector<PersonBean> & _return, const std::vector<int32_t> & idList) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPersons(_return, idList);
    }
    ifaces_[i]->getPersons(_return, idList);
    return;
  }

  void getPersonsOfGroup(std::vector<int32_t> & _return, const int32_t personGroupId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPersonsOfGroup(_return, personGroupId);
    }
    ifaces_[i]->getPersonsOfGroup(_return, personGroupId);
    return;
  }

  void getPersonsPermittedOnDevice(std::vector<int32_t> & _return, const int32_t deviceId, const bool ignoreSchedule, const std::vector<int32_t> & excludePersonIds, const int64_t timestamp) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPersonsPermittedOnDevice(_return, deviceId, ignoreSchedule, excludePersonIds, timestamp);
    }
    ifaces_[i]->getPersonsPermittedOnDevice(_return, deviceId, ignoreSchedule, excludePersonIds, timestamp);
    return;
  }

  void getProperties(std::map<std::string, std::string> & _return, const std::string& prefix, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getProperties(_return, prefix, token);
    }
    ifaces_[i]->getProperties(_return, prefix, token);
    return;
  }

  void getProperty(std::string& _return, const std::string& key, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getProperty(_return, key, token);
    }
    ifaces_[i]->getProperty(_return, key, token);
    return;
  }

  void getRedisParameters(std::map<MQParam::type, std::string> & _return, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRedisParameters(_return, token);
    }
    ifaces_[i]->getRedisParameters(_return, token);
    return;
  }

  void getServiceConfig(std::map<std::string, std::string> & _return, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getServiceConfig(_return, token);
    }
    ifaces_[i]->getServiceConfig(_return, token);
    return;
  }

  void getSubDeviceGroup(std::vector<int32_t> & _return, const int32_t deviceGroupId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSubDeviceGroup(_return, deviceGroupId);
    }
    ifaces_[i]->getSubDeviceGroup(_return, deviceGroupId);
    return;
  }

  void getSubPersonGroup(std::vector<int32_t> & _return, const int32_t personGroupId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSubPersonGroup(_return, personGroupId);
    }
    ifaces_[i]->getSubPersonGroup(_return, personGroupId);
    return;
  }

  bool isDisable(const int32_t personId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isDisable(personId);
    }
    return ifaces_[i]->isDisable(personId);
  }

  bool isLocal() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isLocal();
    }
    return ifaces_[i]->isLocal();
  }

  bool isValidAckChannel(const std::string& ackChannel) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isValidAckChannel(ackChannel);
    }
    return ifaces_[i]->isValidAckChannel(ackChannel);
  }

  bool isValidCmdSn(const int32_t cmdSn) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isValidCmdSn(cmdSn);
    }
    return ifaces_[i]->isValidCmdSn(cmdSn);
  }

  bool isValidDeviceToken(const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isValidDeviceToken(token);
    }
    return ifaces_[i]->isValidDeviceToken(token);
  }

  bool isValidPassword(const std::string& userId, const std::string& password, const bool isMd5) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isValidPassword(userId, password, isMd5);
    }
    return ifaces_[i]->isValidPassword(userId, password, isMd5);
  }

  bool isValidPersonToken(const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isValidPersonToken(token);
    }
    return ifaces_[i]->isValidPersonToken(token);
  }

  bool isValidRootToken(const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isValidRootToken(token);
    }
    return ifaces_[i]->isValidRootToken(token);
  }

  bool isValidToken(const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isValidToken(token);
    }
    return ifaces_[i]->isValidToken(token);
  }

  bool isValidUserToken(const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isValidUserToken(token);
    }
    return ifaces_[i]->isValidUserToken(token);
  }

  void listOfParentForDeviceGroup(std::vector<int32_t> & _return, const int32_t deviceGroupId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->listOfParentForDeviceGroup(_return, deviceGroupId);
    }
    ifaces_[i]->listOfParentForDeviceGroup(_return, deviceGroupId);
    return;
  }

  void listOfParentForPersonGroup(std::vector<int32_t> & _return, const int32_t personGroupId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->listOfParentForPersonGroup(_return, personGroupId);
    }
    ifaces_[i]->listOfParentForPersonGroup(_return, personGroupId);
    return;
  }

  void loadAllPerson(std::vector<int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadAllPerson(_return);
    }
    ifaces_[i]->loadAllPerson(_return);
    return;
  }

  void loadDeviceByWhere(std::vector<DeviceBean> & _return, const std::string& where, const int32_t startRow, const int32_t numRows) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadDeviceByWhere(_return, where, startRow, numRows);
    }
    ifaces_[i]->loadDeviceByWhere(_return, where, startRow, numRows);
    return;
  }

  void loadDeviceGroupByWhere(std::vector<int32_t> & _return, const std::string& where, const int32_t startRow, const int32_t numRows) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadDeviceGroupByWhere(_return, where, startRow, numRows);
    }
    ifaces_[i]->loadDeviceGroupByWhere(_return, where, startRow, numRows);
    return;
  }

  void loadDeviceGroupIdByWhere(std::vector<int32_t> & _return, const std::string& where) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadDeviceGroupIdByWhere(_return, where);
    }
    ifaces_[i]->loadDeviceGroupIdByWhere(_return, where);
    return;
  }

  void loadDeviceIdByWhere(std::vector<int32_t> & _return, const std::string& where) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadDeviceIdByWhere(_return, where);
    }
    ifaces_[i]->loadDeviceIdByWhere(_return, where);
    return;
  }

  void loadDistinctIntegerColumn(std::vector<int32_t> & _return, const std::string& table, const std::string& column, const std::string& where) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadDistinctIntegerColumn(_return, table, column, where);
    }
    ifaces_[i]->loadDistinctIntegerColumn(_return, table, column, where);
    return;
  }

  void loadDistinctStringColumn(std::vector<std::string> & _return, const std::string& table, const std::string& column, const std::string& where) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadDistinctStringColumn(_return, table, column, where);
    }
    ifaces_[i]->loadDistinctStringColumn(_return, table, column, where);
    return;
  }

  void loadFeatureMd5ByUpdate(std::vector<std::string> & _return, const int64_t timestamp) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadFeatureMd5ByUpdate(_return, timestamp);
    }
    ifaces_[i]->loadFeatureMd5ByUpdate(_return, timestamp);
    return;
  }

  void loadFeatureMd5ByUpdateTimeStr(std::vector<std::string> & _return, const std::string& timestamp) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadFeatureMd5ByUpdateTimeStr(_return, timestamp);
    }
    ifaces_[i]->loadFeatureMd5ByUpdateTimeStr(_return, timestamp);
    return;
  }

  void loadLogByWhere(std::vector<LogBean> & _return, const std::string& where, const int32_t startRow, const int32_t numRows) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadLogByWhere(_return, where, startRow, numRows);
    }
    ifaces_[i]->loadLogByWhere(_return, where, startRow, numRows);
    return;
  }

  void loadLogLightByVerifyTime(std::vector<LogLightBean> & _return, const int64_t timestamp, const int32_t startRow, const int32_t numRows) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadLogLightByVerifyTime(_return, timestamp, startRow, numRows);
    }
    ifaces_[i]->loadLogLightByVerifyTime(_return, timestamp, startRow, numRows);
    return;
  }

  void loadLogLightByVerifyTimeTimestr(std::vector<LogLightBean> & _return, const std::string& timestamp, const int32_t startRow, const int32_t numRows) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadLogLightByVerifyTimeTimestr(_return, timestamp, startRow, numRows);
    }
    ifaces_[i]->loadLogLightByVerifyTimeTimestr(_return, timestamp, startRow, numRows);
    return;
  }

  void loadLogLightByWhere(std::vector<LogLightBean> & _return, const std::string& where, const int32_t startRow, const int32_t numRows) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadLogLightByWhere(_return, where, startRow, numRows);
    }
    ifaces_[i]->loadLogLightByWhere(_return, where, startRow, numRows);
    return;
  }

  void loadPermitByUpdate(std::vector<PermitBean> & _return, const int64_t timestamp) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadPermitByUpdate(_return, timestamp);
    }
    ifaces_[i]->loadPermitByUpdate(_return, timestamp);
    return;
  }

  void loadPermitByUpdateTimestr(std::vector<PermitBean> & _return, const std::string& timestamp) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadPermitByUpdateTimestr(_return, timestamp);
    }
    ifaces_[i]->loadPermitByUpdateTimestr(_return, timestamp);
    return;
  }

  void loadPersonByWhere(std::vector<PersonBean> & _return, const std::string& where, const int32_t startRow, const int32_t numRows) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadPersonByWhere(_return, where, startRow, numRows);
    }
    ifaces_[i]->loadPersonByWhere(_return, where, startRow, numRows);
    return;
  }

  void loadPersonGroupByWhere(std::vector<int32_t> & _return, const std::string& where, const int32_t startRow, const int32_t numRows) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadPersonGroupByWhere(_return, where, startRow, numRows);
    }
    ifaces_[i]->loadPersonGroupByWhere(_return, where, startRow, numRows);
    return;
  }

  void loadPersonGroupIdByWhere(std::vector<int32_t> & _return, const std::string& where) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadPersonGroupIdByWhere(_return, where);
    }
    ifaces_[i]->loadPersonGroupIdByWhere(_return, where);
    return;
  }

  void loadPersonIdByUpdateTime(std::vector<int32_t> & _return, const int64_t timestamp) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadPersonIdByUpdateTime(_return, timestamp);
    }
    ifaces_[i]->loadPersonIdByUpdateTime(_return, timestamp);
    return;
  }

  void loadPersonIdByUpdateTimeTimeStr(std::vector<int32_t> & _return, const std::string& timestamp) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadPersonIdByUpdateTimeTimeStr(_return, timestamp);
    }
    ifaces_[i]->loadPersonIdByUpdateTimeTimeStr(_return, timestamp);
    return;
  }

  void loadPersonIdByWhere(std::vector<int32_t> & _return, const std::string& where) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadPersonIdByWhere(_return, where);
    }
    ifaces_[i]->loadPersonIdByWhere(_return, where);
    return;
  }

  void loadUpdatedPersons(std::vector<int32_t> & _return, const int64_t timestamp) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadUpdatedPersons(_return, timestamp);
    }
    ifaces_[i]->loadUpdatedPersons(_return, timestamp);
    return;
  }

  void loadUpdatedPersonsTimestr(std::vector<int32_t> & _return, const std::string& timestamp) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadUpdatedPersonsTimestr(_return, timestamp);
    }
    ifaces_[i]->loadUpdatedPersonsTimestr(_return, timestamp);
    return;
  }

  void offline(const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->offline(token);
    }
    ifaces_[i]->offline(token);
  }

  void online(Token& _return, const DeviceBean& device) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->online(_return, device);
    }
    ifaces_[i]->online(_return, device);
    return;
  }

  void registerDevice(DeviceBean& _return, const DeviceBean& newDevice) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerDevice(_return, newDevice);
    }
    ifaces_[i]->registerDevice(_return, newDevice);
    return;
  }

  void releasePersonToken(const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->releasePersonToken(token);
    }
    ifaces_[i]->releasePersonToken(token);
  }

  void releaseRootToken(const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->releaseRootToken(token);
    }
    ifaces_[i]->releaseRootToken(token);
  }

  void releaseUserToken(const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->releaseUserToken(token);
    }
    ifaces_[i]->releaseUserToken(token);
  }

  void replaceFeature(const int32_t personId, const std::string& featureMd5, const bool deleteOldFeatureImage, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->replaceFeature(personId, featureMd5, deleteOldFeatureImage, token);
    }
    ifaces_[i]->replaceFeature(personId, featureMd5, deleteOldFeatureImage, token);
  }

  int32_t rootGroupOfDevice(const int32_t deviceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rootGroupOfDevice(deviceId);
    }
    return ifaces_[i]->rootGroupOfDevice(deviceId);
  }

  int32_t rootGroupOfPerson(const int32_t personId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rootGroupOfPerson(personId);
    }
    return ifaces_[i]->rootGroupOfPerson(personId);
  }

  void runCmd(std::string& _return, const std::vector<int32_t> & target, const bool group, const std::string& cmdpath, const std::string& jsonArgs, const std::string& ackChannel, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->runCmd(_return, target, group, cmdpath, jsonArgs, ackChannel, token);
    }
    ifaces_[i]->runCmd(_return, target, group, cmdpath, jsonArgs, ackChannel, token);
    return;
  }

  int32_t runTask(const std::string& taskQueue, const std::string& cmdpath, const std::string& jsonArgs, const std::string& ackChannel, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->runTask(taskQueue, cmdpath, jsonArgs, ackChannel, token);
    }
    return ifaces_[i]->runTask(taskQueue, cmdpath, jsonArgs, ackChannel, token);
  }

  void saveDevice(DeviceBean& _return, const DeviceBean& deviceBean, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveDevice(_return, deviceBean, token);
    }
    ifaces_[i]->saveDevice(_return, deviceBean, token);
    return;
  }

  void saveDeviceGroup(DeviceGroupBean& _return, const DeviceGroupBean& deviceGroupBean, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveDeviceGroup(_return, deviceGroupBean, token);
    }
    ifaces_[i]->saveDeviceGroup(_return, deviceGroupBean, token);
    return;
  }

  void savePermit(PermitBean& _return, const PermitBean& permitBean, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->savePermit(_return, permitBean, token);
    }
    ifaces_[i]->savePermit(_return, permitBean, token);
    return;
  }

  void savePermitWithColumn(PermitBean& _return, const int32_t deviceGroupId, const int32_t personGroupId, const std::string& column, const std::string& value, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->savePermitWithColumn(_return, deviceGroupId, personGroupId, column, value, token);
    }
    ifaces_[i]->savePermitWithColumn(_return, deviceGroupId, personGroupId, column, value, token);
    return;
  }

  void savePerson(PersonBean& _return, const PersonBean& personBean, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->savePerson(_return, personBean, token);
    }
    ifaces_[i]->savePerson(_return, personBean, token);
    return;
  }

  void savePersonFull(PersonBean& _return, const PersonBean& personBean, const std::string& idPhoto, const std::string& feature, const std::string& featureVersion, const std::string& featureImage, const FaceBean& faceBean, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->savePersonFull(_return, personBean, idPhoto, feature, featureVersion, featureImage, faceBean, token);
    }
    ifaces_[i]->savePersonFull(_return, personBean, idPhoto, feature, featureVersion, featureImage, faceBean, token);
    return;
  }

  void savePersonGroup(PersonGroupBean& _return, const PersonGroupBean& personGroupBean, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->savePersonGroup(_return, personGroupBean, token);
    }
    ifaces_[i]->savePersonGroup(_return, personGroupBean, token);
    return;
  }

  void savePersonWithPhoto(PersonBean& _return, const PersonBean& personBean, const std::string& idPhoto, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->savePersonWithPhoto(_return, personBean, idPhoto, token);
    }
    ifaces_[i]->savePersonWithPhoto(_return, personBean, idPhoto, token);
    return;
  }

  void savePersonWithPhotoAndFeature(PersonBean& _return, const PersonBean& personBean, const std::string& idPhoto, const FeatureBean& featureBean, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->savePersonWithPhotoAndFeature(_return, personBean, idPhoto, featureBean, token);
    }
    ifaces_[i]->savePersonWithPhotoAndFeature(_return, personBean, idPhoto, featureBean, token);
    return;
  }

  void savePersonWithPhotoAndFeatureMultiFaces(PersonBean& _return, const PersonBean& personBean, const std::string& idPhoto, const std::string& feature, const std::string& featureVersion, const std::vector<FaceBean> & faceBeans, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->savePersonWithPhotoAndFeatureMultiFaces(_return, personBean, idPhoto, feature, featureVersion, faceBeans, token);
    }
    ifaces_[i]->savePersonWithPhotoAndFeatureMultiFaces(_return, personBean, idPhoto, feature, featureVersion, faceBeans, token);
    return;
  }

  void savePersonWithPhotoAndFeatureMultiImage(PersonBean& _return, const PersonBean& personBean, const std::string& idPhoto, const std::string& feature, const std::string& featureVersion, const std::vector<std::string> & photos, const std::vector<FaceBean> & faces, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->savePersonWithPhotoAndFeatureMultiImage(_return, personBean, idPhoto, feature, featureVersion, photos, faces, token);
    }
    ifaces_[i]->savePersonWithPhotoAndFeatureMultiImage(_return, personBean, idPhoto, feature, featureVersion, photos, faces, token);
    return;
  }

  void savePersonWithPhotoAndFeatureSaved(PersonBean& _return, const PersonBean& personBean, const std::string& idPhotoMd5, const std::string& featureMd5, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->savePersonWithPhotoAndFeatureSaved(_return, personBean, idPhotoMd5, featureMd5, token);
    }
    ifaces_[i]->savePersonWithPhotoAndFeatureSaved(_return, personBean, idPhotoMd5, featureMd5, token);
    return;
  }

  void savePersons(const std::vector<PersonBean> & persons, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->savePersons(persons, token);
    }
    ifaces_[i]->savePersons(persons, token);
  }

  int32_t savePersonsWithPhoto(const std::vector<std::string> & photos, const std::vector<PersonBean> & persons, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->savePersonsWithPhoto(photos, persons, token);
    }
    return ifaces_[i]->savePersonsWithPhoto(photos, persons, token);
  }

  void saveServiceConfig(const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveServiceConfig(token);
    }
    ifaces_[i]->saveServiceConfig(token);
  }

  void sdkTaskQueueOf(std::string& _return, const std::string& task, const std::string& sdkVersion, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sdkTaskQueueOf(_return, task, sdkVersion, token);
    }
    ifaces_[i]->sdkTaskQueueOf(_return, task, sdkVersion, token);
    return;
  }

  void setPersonExpiryDate(const int32_t personId, const int64_t expiryDate, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setPersonExpiryDate(personId, expiryDate, token);
    }
    ifaces_[i]->setPersonExpiryDate(personId, expiryDate, token);
  }

  void setPersonExpiryDateList(const std::vector<int32_t> & personIdList, const int64_t expiryDate, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setPersonExpiryDateList(personIdList, expiryDate, token);
    }
    ifaces_[i]->setPersonExpiryDateList(personIdList, expiryDate, token);
  }

  void setPersonExpiryDateTimeStr(const int32_t personId, const std::string& expiryDate, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setPersonExpiryDateTimeStr(personId, expiryDate, token);
    }
    ifaces_[i]->setPersonExpiryDateTimeStr(personId, expiryDate, token);
  }

  void setProperties(const std::map<std::string, std::string> & config, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setProperties(config, token);
    }
    ifaces_[i]->setProperties(config, token);
  }

  void setProperty(const std::string& key, const std::string& value, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setProperty(key, value, token);
    }
    ifaces_[i]->setProperty(key, value, token);
  }

  void taskQueueOf(std::string& _return, const std::string& task, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->taskQueueOf(_return, task, token);
    }
    ifaces_[i]->taskQueueOf(_return, task, token);
    return;
  }

  void unbindBorder(const int32_t personGroupId, const int32_t deviceGroupId, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unbindBorder(personGroupId, deviceGroupId, token);
    }
    ifaces_[i]->unbindBorder(personGroupId, deviceGroupId, token);
  }

  void unregisterDevice(const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unregisterDevice(token);
    }
    ifaces_[i]->unregisterDevice(token);
  }

  void updateDevice(DeviceBean& _return, const DeviceBean& deviceBean, const Token& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateDevice(_return, deviceBean, token);
    }
    ifaces_[i]->updateDevice(_return, deviceBean, token);
    return;
  }

  void version(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->version(_return);
    }
    ifaces_[i]->version(_return);
    return;
  }

  void versionInfo(std::map<std::string, std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->versionInfo(_return);
    }
    ifaces_[i]->versionInfo(_return);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
template <class Protocol_>
class IFaceLogConcurrentClientT : virtual public IFaceLogIf {
 public:
  IFaceLogConcurrentClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  IFaceLogConcurrentClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void addFeature(FeatureBean& _return, const std::string& feature, const std::string& featureVersion, const int32_t personId, const std::vector<FaceBean> & faecBeans, const std::string& removed, const Token& token);
  int32_t send_addFeature(const std::string& feature, const std::string& featureVersion, const int32_t personId, const std::vector<FaceBean> & faecBeans, const std::string& removed, const Token& token);
  void recv_addFeature(FeatureBean& _return, const int32_t seqid);
  void addFeatureMulti(FeatureBean& _return, const std::string& feature, const std::string& featureVersion, const int32_t personId, const std::vector<std::string> & photos, const std::vector<FaceBean> & faces, const std::string& removed, const Token& token);
  int32_t send_addFeatureMulti(const std::string& feature, const std::string& featureVersion, const int32_t personId, const std::vector<std::string> & photos, const std::vector<FaceBean> & faces, const std::string& removed, const Token& token);
  void recv_addFeatureMulti(FeatureBean& _return, const int32_t seqid);
  void addFeatureWithImage(FeatureBean& _return, const std::string& feature, const std::string& featureVersion, const int32_t personId, const bool asIdPhotoIfAbsent, const std::string& featurePhoto, const FaceBean& faceBean, const std::string& removed, const Token& token);
  int32_t send_addFeatureWithImage(const std::string& feature, const std::string& featureVersion, const int32_t personId, const bool asIdPhotoIfAbsent, const std::string& featurePhoto, const FaceBean& faceBean, const std::string& removed, const Token& token);
  void recv_addFeatureWithImage(FeatureBean& _return, const int32_t seqid);
  void addImage(ImageBean& _return, const std::string& imageData, const int32_t deviceId, const FaceBean& faceBean, const int32_t personId, const Token& token);
  int32_t send_addImage(const std::string& imageData, const int32_t deviceId, const FaceBean& faceBean, const int32_t personId, const Token& token);
  void recv_addImage(ImageBean& _return, const int32_t seqid);
  void addLog(const LogBean& logBean, const Token& token);
  int32_t send_addLog(const LogBean& logBean, const Token& token);
  void recv_addLog(const int32_t seqid);
  void addLogFull(const LogBean& logBean, const FaceBean& faceBean, const std::string& featureImage, const Token& token);
  int32_t send_addLogFull(const LogBean& logBean, const FaceBean& faceBean, const std::string& featureImage, const Token& token);
  void recv_addLogFull(const int32_t seqid);
  void addLogs(const std::vector<LogBean> & beans, const Token& token);
  int32_t send_addLogs(const std::vector<LogBean> & beans, const Token& token);
  void recv_addLogs(const int32_t seqid);
  void addLogsFull(const std::vector<LogBean> & logBeans, const std::vector<FaceBean> & faceBeans, const std::vector<std::string> & featureImages, const Token& token);
  int32_t send_addLogsFull(const std::vector<LogBean> & logBeans, const std::vector<FaceBean> & faceBeans, const std::vector<std::string> & featureImages, const Token& token);
  void recv_addLogsFull(const int32_t seqid);
  void applyAckChannel(std::string& _return, const Token& token);
  int32_t send_applyAckChannel(const Token& token);
  void recv_applyAckChannel(std::string& _return, const int32_t seqid);
  void applyAckChannelWithDuration(std::string& _return, const int32_t duration, const Token& token);
  int32_t send_applyAckChannelWithDuration(const int32_t duration, const Token& token);
  void recv_applyAckChannelWithDuration(std::string& _return, const int32_t seqid);
  int32_t applyCmdSn(const Token& token);
  int32_t send_applyCmdSn(const Token& token);
  int32_t recv_applyCmdSn(const int32_t seqid);
  void applyPersonToken(Token& _return, const int32_t personId, const std::string& password, const bool isMd5);
  int32_t send_applyPersonToken(const int32_t personId, const std::string& password, const bool isMd5);
  void recv_applyPersonToken(Token& _return, const int32_t seqid);
  void applyRootToken(Token& _return, const std::string& password, const bool isMd5);
  int32_t send_applyRootToken(const std::string& password, const bool isMd5);
  void recv_applyRootToken(Token& _return, const int32_t seqid);
  void applyUserToken(Token& _return, const int32_t userid, const std::string& password, const bool isMd5);
  int32_t send_applyUserToken(const int32_t userid, const std::string& password, const bool isMd5);
  void recv_applyUserToken(Token& _return, const int32_t seqid);
  void bindBorder(const int32_t personGroupId, const int32_t deviceGroupId, const Token& token);
  int32_t send_bindBorder(const int32_t personGroupId, const int32_t deviceGroupId, const Token& token);
  void recv_bindBorder(const int32_t seqid);
  void childListForDeviceGroup(std::vector<int32_t> & _return, const int32_t deviceGroupId);
  int32_t send_childListForDeviceGroup(const int32_t deviceGroupId);
  void recv_childListForDeviceGroup(std::vector<int32_t> & _return, const int32_t seqid);
  void childListForPersonGroup(std::vector<int32_t> & _return, const int32_t personGroupId);
  int32_t send_childListForPersonGroup(const int32_t personGroupId);
  void recv_childListForPersonGroup(std::vector<int32_t> & _return, const int32_t seqid);
  int32_t countDeviceByWhere(const std::string& where);
  int32_t send_countDeviceByWhere(const std::string& where);
  int32_t recv_countDeviceByWhere(const int32_t seqid);
  int32_t countDeviceGroupByWhere(const std::string& where);
  int32_t send_countDeviceGroupByWhere(const std::string& where);
  int32_t recv_countDeviceGroupByWhere(const int32_t seqid);
  int32_t countLogByWhere(const std::string& where);
  int32_t send_countLogByWhere(const std::string& where);
  int32_t recv_countLogByWhere(const int32_t seqid);
  int32_t countLogLightByVerifyTime(const int64_t timestamp);
  int32_t send_countLogLightByVerifyTime(const int64_t timestamp);
  int32_t recv_countLogLightByVerifyTime(const int32_t seqid);
  int32_t countLogLightByVerifyTimeTimestr(const std::string& timestamp);
  int32_t send_countLogLightByVerifyTimeTimestr(const std::string& timestamp);
  int32_t recv_countLogLightByVerifyTimeTimestr(const int32_t seqid);
  int32_t countLogLightByWhere(const std::string& where);
  int32_t send_countLogLightByWhere(const std::string& where);
  int32_t recv_countLogLightByWhere(const int32_t seqid);
  int32_t countPersonByWhere(const std::string& where);
  int32_t send_countPersonByWhere(const std::string& where);
  int32_t recv_countPersonByWhere(const int32_t seqid);
  int32_t countPersonGroupByWhere(const std::string& where);
  int32_t send_countPersonGroupByWhere(const std::string& where);
  int32_t recv_countPersonGroupByWhere(const int32_t seqid);
  void countPersonLog(std::map<std::string, int32_t> & _return, const int32_t personId, const int64_t startDate, const int64_t endDate);
  int32_t send_countPersonLog(const int32_t personId, const int64_t startDate, const int64_t endDate);
  void recv_countPersonLog(std::map<std::string, int32_t> & _return, const int32_t seqid);
  void countPersonLogTimeStr(std::map<std::string, int32_t> & _return, const int32_t personId, const std::string& startDate, const std::string& endDate);
  int32_t send_countPersonLogTimeStr(const int32_t personId, const std::string& startDate, const std::string& endDate);
  void recv_countPersonLogTimeStr(std::map<std::string, int32_t> & _return, const int32_t seqid);
  int32_t deleteAllFeaturesByPersonId(const int32_t personId, const bool deleteImage, const Token& token);
  int32_t send_deleteAllFeaturesByPersonId(const int32_t personId, const bool deleteImage, const Token& token);
  int32_t recv_deleteAllFeaturesByPersonId(const int32_t seqid);
  bool deleteDevice(const int32_t id, const Token& token);
  int32_t send_deleteDevice(const int32_t id, const Token& token);
  bool recv_deleteDevice(const int32_t seqid);
  bool deleteDeviceByMac(const std::string& mac, const Token& token);
  int32_t send_deleteDeviceByMac(const std::string& mac, const Token& token);
  bool recv_deleteDeviceByMac(const int32_t seqid);
  int32_t deleteDeviceGroup(const int32_t deviceGroupId, const Token& token);
  int32_t send_deleteDeviceGroup(const int32_t deviceGroupId, const Token& token);
  int32_t recv_deleteDeviceGroup(const int32_t seqid);
  void deleteFeature(std::vector<std::string> & _return, const std::string& featureMd5, const bool deleteImage, const Token& token);
  int32_t send_deleteFeature(const std::string& featureMd5, const bool deleteImage, const Token& token);
  void recv_deleteFeature(std::vector<std::string> & _return, const int32_t seqid);
  int32_t deleteGroupPermitOnDeviceGroup(const int32_t deviceGroupId, const Token& token);
  int32_t send_deleteGroupPermitOnDeviceGroup(const int32_t deviceGroupId, const Token& token);
  int32_t recv_deleteGroupPermitOnDeviceGroup(const int32_t seqid);
  int32_t deleteImage(const std::string& imageMd5, const Token& token);
  int32_t send_deleteImage(const std::string& imageMd5, const Token& token);
  int32_t recv_deleteImage(const int32_t seqid);
  int32_t deletePermitById(const int32_t deviceGroupId, const int32_t personGroupId, const Token& token);
  int32_t send_deletePermitById(const int32_t deviceGroupId, const int32_t personGroupId, const Token& token);
  int32_t recv_deletePermitById(const int32_t seqid);
  int32_t deletePerson(const int32_t personId, const Token& token);
  int32_t send_deletePerson(const int32_t personId, const Token& token);
  int32_t recv_deletePerson(const int32_t seqid);
  int32_t deletePersonByPapersNum(const std::string& papersNum, const Token& token);
  int32_t send_deletePersonByPapersNum(const std::string& papersNum, const Token& token);
  int32_t recv_deletePersonByPapersNum(const int32_t seqid);
  int32_t deletePersonGroup(const int32_t personGroupId, const Token& token);
  int32_t send_deletePersonGroup(const int32_t personGroupId, const Token& token);
  int32_t recv_deletePersonGroup(const int32_t seqid);
  int32_t deletePersonGroupPermit(const int32_t personGroupId, const Token& token);
  int32_t send_deletePersonGroupPermit(const int32_t personGroupId, const Token& token);
  int32_t recv_deletePersonGroupPermit(const int32_t seqid);
  int32_t deletePersons(const std::vector<int32_t> & personIdList, const Token& token);
  int32_t send_deletePersons(const std::vector<int32_t> & personIdList, const Token& token);
  int32_t recv_deletePersons(const int32_t seqid);
  int32_t deletePersonsByPapersNum(const std::vector<std::string> & papersNumlist, const Token& token);
  int32_t send_deletePersonsByPapersNum(const std::vector<std::string> & papersNumlist, const Token& token);
  int32_t recv_deletePersonsByPapersNum(const int32_t seqid);
  void disablePerson(const int32_t personId, const int32_t moveToGroupId, const bool deletePhoto, const bool deleteFeature, const bool deleteLog, const Token& token);
  int32_t send_disablePerson(const int32_t personId, const int32_t moveToGroupId, const bool deletePhoto, const bool deleteFeature, const bool deleteLog, const Token& token);
  void recv_disablePerson(const int32_t seqid);
  void disablePersonList(const std::vector<int32_t> & personIdList, const Token& token);
  int32_t send_disablePersonList(const std::vector<int32_t> & personIdList, const Token& token);
  void recv_disablePersonList(const int32_t seqid);
  bool existsDevice(const int32_t id);
  int32_t send_existsDevice(const int32_t id);
  bool recv_existsDevice(const int32_t seqid);
  bool existsFeature(const std::string& md5);
  int32_t send_existsFeature(const std::string& md5);
  bool recv_existsFeature(const int32_t seqid);
  bool existsImage(const std::string& md5);
  int32_t send_existsImage(const std::string& md5);
  bool recv_existsImage(const int32_t seqid);
  bool existsPerson(const int32_t persionId);
  int32_t send_existsPerson(const int32_t persionId);
  bool recv_existsPerson(const int32_t seqid);
  void getDevice(DeviceBean& _return, const int32_t deviceId);
  int32_t send_getDevice(const int32_t deviceId);
  void recv_getDevice(DeviceBean& _return, const int32_t seqid);
  void getDeviceByMac(DeviceBean& _return, const std::string& mac);
  int32_t send_getDeviceByMac(const std::string& mac);
  void recv_getDeviceByMac(DeviceBean& _return, const int32_t seqid);
  void getDeviceGroup(DeviceGroupBean& _return, const int32_t deviceGroupId);
  int32_t send_getDeviceGroup(const int32_t deviceGroupId);
  void recv_getDeviceGroup(DeviceGroupBean& _return, const int32_t seqid);
  void getDeviceGroups(std::vector<DeviceGroupBean> & _return, const std::vector<int32_t> & groupIdList);
  int32_t send_getDeviceGroups(const std::vector<int32_t> & groupIdList);
  void recv_getDeviceGroups(std::vector<DeviceGroupBean> & _return, const int32_t seqid);
  void getDeviceGroupsBelongs(std::vector<int32_t> & _return, const int32_t deviceId);
  int32_t send_getDeviceGroupsBelongs(const int32_t deviceId);
  void recv_getDeviceGroupsBelongs(std::vector<int32_t> & _return, const int32_t seqid);
  void getDeviceGroupsPermit(std::vector<int32_t> & _return, const int32_t personGroupId);
  int32_t send_getDeviceGroupsPermit(const int32_t personGroupId);
  void recv_getDeviceGroupsPermit(std::vector<int32_t> & _return, const int32_t seqid);
  void getDeviceGroupsPermittedBy(std::vector<int32_t> & _return, const int32_t personGroupId);
  int32_t send_getDeviceGroupsPermittedBy(const int32_t personGroupId);
  void recv_getDeviceGroupsPermittedBy(std::vector<int32_t> & _return, const int32_t seqid);
  int32_t getDeviceIdOfFeature(const std::string& featureMd5);
  int32_t send_getDeviceIdOfFeature(const std::string& featureMd5);
  int32_t recv_getDeviceIdOfFeature(const int32_t seqid);
  void getDevices(std::vector<DeviceBean> & _return, const std::vector<int32_t> & idList);
  int32_t send_getDevices(const std::vector<int32_t> & idList);
  void recv_getDevices(std::vector<DeviceBean> & _return, const int32_t seqid);
  void getDevicesOfGroup(std::vector<int32_t> & _return, const int32_t deviceGroupId);
  int32_t send_getDevicesOfGroup(const int32_t deviceGroupId);
  void recv_getDevicesOfGroup(std::vector<int32_t> & _return, const int32_t seqid);
  void getFace(FaceBean& _return, const int32_t faceId);
  int32_t send_getFace(const int32_t faceId);
  void recv_getFace(FaceBean& _return, const int32_t seqid);
  void getFacesOfFeature(std::vector<FaceBean> & _return, const std::string& featureMd5);
  int32_t send_getFacesOfFeature(const std::string& featureMd5);
  void recv_getFacesOfFeature(std::vector<FaceBean> & _return, const int32_t seqid);
  void getFacesOfImage(std::vector<FaceBean> & _return, const std::string& imageMd5);
  int32_t send_getFacesOfImage(const std::string& imageMd5);
  void recv_getFacesOfImage(std::vector<FaceBean> & _return, const int32_t seqid);
  void getFeature(FeatureBean& _return, const std::string& md5);
  int32_t send_getFeature(const std::string& md5);
  void recv_getFeature(FeatureBean& _return, const int32_t seqid);
  void getFeatureBytes(std::string& _return, const std::string& md5);
  int32_t send_getFeatureBytes(const std::string& md5);
  void recv_getFeatureBytes(std::string& _return, const int32_t seqid);
  void getFeatures(std::vector<FeatureBean> & _return, const std::vector<std::string> & md5List);
  int32_t send_getFeatures(const std::vector<std::string> & md5List);
  void recv_getFeatures(std::vector<FeatureBean> & _return, const int32_t seqid);
  void getFeaturesByPersonIdAndSdkVersion(std::vector<std::string> & _return, const int32_t personId, const std::string& sdkVersion);
  int32_t send_getFeaturesByPersonIdAndSdkVersion(const int32_t personId, const std::string& sdkVersion);
  void recv_getFeaturesByPersonIdAndSdkVersion(std::vector<std::string> & _return, const int32_t seqid);
  void getFeaturesOfImage(std::vector<std::string> & _return, const std::string& imageMd5);
  int32_t send_getFeaturesOfImage(const std::string& imageMd5);
  void recv_getFeaturesOfImage(std::vector<std::string> & _return, const int32_t seqid);
  void getFeaturesOfPerson(std::vector<std::string> & _return, const int32_t personId);
  int32_t send_getFeaturesOfPerson(const int32_t personId);
  void recv_getFeaturesOfPerson(std::vector<std::string> & _return, const int32_t seqid);
  void getFeaturesPermittedOnDevice(std::vector<std::string> & _return, const int32_t deviceId, const bool ignoreSchedule, const std::string& sdkVersion, const std::vector<std::string> & excludeFeatureIds, const int64_t timestamp);
  int32_t send_getFeaturesPermittedOnDevice(const int32_t deviceId, const bool ignoreSchedule, const std::string& sdkVersion, const std::vector<std::string> & excludeFeatureIds, const int64_t timestamp);
  void recv_getFeaturesPermittedOnDevice(std::vector<std::string> & _return, const int32_t seqid);
  void getGroupPermit(PermitBean& _return, const int32_t deviceId, const int32_t personGroupId);
  int32_t send_getGroupPermit(const int32_t deviceId, const int32_t personGroupId);
  void recv_getGroupPermit(PermitBean& _return, const int32_t seqid);
  void getGroupPermitOnDeviceGroup(PermitBean& _return, const int32_t deviceGroupId, const int32_t personGroupId);
  int32_t send_getGroupPermitOnDeviceGroup(const int32_t deviceGroupId, const int32_t personGroupId);
  void recv_getGroupPermitOnDeviceGroup(PermitBean& _return, const int32_t seqid);
  void getGroupPermits(std::vector<PermitBean> & _return, const int32_t deviceId, const std::vector<int32_t> & personGroupIdList);
  int32_t send_getGroupPermits(const int32_t deviceId, const std::vector<int32_t> & personGroupIdList);
  void recv_getGroupPermits(std::vector<PermitBean> & _return, const int32_t seqid);
  void getImage(ImageBean& _return, const std::string& imageMD5);
  int32_t send_getImage(const std::string& imageMD5);
  void recv_getImage(ImageBean& _return, const int32_t seqid);
  void getImageBytes(std::string& _return, const std::string& imageMD5);
  int32_t send_getImageBytes(const std::string& imageMD5);
  void recv_getImageBytes(std::string& _return, const int32_t seqid);
  void getImageBytesRef(std::string& _return, const std::string& primaryKey, const std::string& refType);
  int32_t send_getImageBytesRef(const std::string& primaryKey, const std::string& refType);
  void recv_getImageBytesRef(std::string& _return, const int32_t seqid);
  void getImagesAssociatedByFeature(std::vector<std::string> & _return, const std::string& featureMd5);
  int32_t send_getImagesAssociatedByFeature(const std::string& featureMd5);
  void recv_getImagesAssociatedByFeature(std::vector<std::string> & _return, const int32_t seqid);
  void getLogBeansByPersonId(std::vector<LogBean> & _return, const int32_t personId);
  int32_t send_getLogBeansByPersonId(const int32_t personId);
  void recv_getLogBeansByPersonId(std::vector<LogBean> & _return, const int32_t seqid);
  void getPerson(PersonBean& _return, const int32_t personId);
  int32_t send_getPerson(const int32_t personId);
  void recv_getPerson(PersonBean& _return, const int32_t seqid);
  void getPersonByMobilePhone(PersonBean& _return, const std::string& mobilePhone);
  int32_t send_getPersonByMobilePhone(const std::string& mobilePhone);
  void recv_getPersonByMobilePhone(PersonBean& _return, const int32_t seqid);
  void getPersonByPapersNum(PersonBean& _return, const std::string& papersNum);
  int32_t send_getPersonByPapersNum(const std::string& papersNum);
  void recv_getPersonByPapersNum(PersonBean& _return, const int32_t seqid);
  void getPersonGroup(PersonGroupBean& _return, const int32_t personGroupId);
  int32_t send_getPersonGroup(const int32_t personGroupId);
  void recv_getPersonGroup(PersonGroupBean& _return, const int32_t seqid);
  void getPersonGroups(std::vector<PersonGroupBean> & _return, const std::vector<int32_t> & groupIdList);
  int32_t send_getPersonGroups(const std::vector<int32_t> & groupIdList);
  void recv_getPersonGroups(std::vector<PersonGroupBean> & _return, const int32_t seqid);
  void getPersonGroupsBelongs(std::vector<int32_t> & _return, const int32_t personId);
  int32_t send_getPersonGroupsBelongs(const int32_t personId);
  void recv_getPersonGroupsBelongs(std::vector<int32_t> & _return, const int32_t seqid);
  void getPersonGroupsPermittedBy(std::vector<int32_t> & _return, const int32_t deviceGroupId);
  int32_t send_getPersonGroupsPermittedBy(const int32_t deviceGroupId);
  void recv_getPersonGroupsPermittedBy(std::vector<int32_t> & _return, const int32_t seqid);
  void getPersonPermit(PermitBean& _return, const int32_t deviceId, const int32_t personId);
  int32_t send_getPersonPermit(const int32_t deviceId, const int32_t personId);
  void recv_getPersonPermit(PermitBean& _return, const int32_t seqid);
  void getPersonPermits(std::vector<PermitBean> & _return, const int32_t deviceId, const std::vector<int32_t> & personIdList);
  int32_t send_getPersonPermits(const int32_t deviceId, const std::vector<int32_t> & personIdList);
  void recv_getPersonPermits(std::vector<PermitBean> & _return, const int32_t seqid);
  void getPersons(std::vector<PersonBean> & _return, const std::vector<int32_t> & idList);
  int32_t send_getPersons(const std::vector<int32_t> & idList);
  void recv_getPersons(std::vector<PersonBean> & _return, const int32_t seqid);
  void getPersonsOfGroup(std::vector<int32_t> & _return, const int32_t personGroupId);
  int32_t send_getPersonsOfGroup(const int32_t personGroupId);
  void recv_getPersonsOfGroup(std::vector<int32_t> & _return, const int32_t seqid);
  void getPersonsPermittedOnDevice(std::vector<int32_t> & _return, const int32_t deviceId, const bool ignoreSchedule, const std::vector<int32_t> & excludePersonIds, const int64_t timestamp);
  int32_t send_getPersonsPermittedOnDevice(const int32_t deviceId, const bool ignoreSchedule, const std::vector<int32_t> & excludePersonIds, const int64_t timestamp);
  void recv_getPersonsPermittedOnDevice(std::vector<int32_t> & _return, const int32_t seqid);
  void getProperties(std::map<std::string, std::string> & _return, const std::string& prefix, const Token& token);
  int32_t send_getProperties(const std::string& prefix, const Token& token);
  void recv_getProperties(std::map<std::string, std::string> & _return, const int32_t seqid);
  void getProperty(std::string& _return, const std::string& key, const Token& token);
  int32_t send_getProperty(const std::string& key, const Token& token);
  void recv_getProperty(std::string& _return, const int32_t seqid);
  void getRedisParameters(std::map<MQParam::type, std::string> & _return, const Token& token);
  int32_t send_getRedisParameters(const Token& token);
  void recv_getRedisParameters(std::map<MQParam::type, std::string> & _return, const int32_t seqid);
  void getServiceConfig(std::map<std::string, std::string> & _return, const Token& token);
  int32_t send_getServiceConfig(const Token& token);
  void recv_getServiceConfig(std::map<std::string, std::string> & _return, const int32_t seqid);
  void getSubDeviceGroup(std::vector<int32_t> & _return, const int32_t deviceGroupId);
  int32_t send_getSubDeviceGroup(const int32_t deviceGroupId);
  void recv_getSubDeviceGroup(std::vector<int32_t> & _return, const int32_t seqid);
  void getSubPersonGroup(std::vector<int32_t> & _return, const int32_t personGroupId);
  int32_t send_getSubPersonGroup(const int32_t personGroupId);
  void recv_getSubPersonGroup(std::vector<int32_t> & _return, const int32_t seqid);
  bool isDisable(const int32_t personId);
  int32_t send_isDisable(const int32_t personId);
  bool recv_isDisable(const int32_t seqid);
  bool isLocal();
  int32_t send_isLocal();
  bool recv_isLocal(const int32_t seqid);
  bool isValidAckChannel(const std::string& ackChannel);
  int32_t send_isValidAckChannel(const std::string& ackChannel);
  bool recv_isValidAckChannel(const int32_t seqid);
  bool isValidCmdSn(const int32_t cmdSn);
  int32_t send_isValidCmdSn(const int32_t cmdSn);
  bool recv_isValidCmdSn(const int32_t seqid);
  bool isValidDeviceToken(const Token& token);
  int32_t send_isValidDeviceToken(const Token& token);
  bool recv_isValidDeviceToken(const int32_t seqid);
  bool isValidPassword(const std::string& userId, const std::string& password, const bool isMd5);
  int32_t send_isValidPassword(const std::string& userId, const std::string& password, const bool isMd5);
  bool recv_isValidPassword(const int32_t seqid);
  bool isValidPersonToken(const Token& token);
  int32_t send_isValidPersonToken(const Token& token);
  bool recv_isValidPersonToken(const int32_t seqid);
  bool isValidRootToken(const Token& token);
  int32_t send_isValidRootToken(const Token& token);
  bool recv_isValidRootToken(const int32_t seqid);
  bool isValidToken(const Token& token);
  int32_t send_isValidToken(const Token& token);
  bool recv_isValidToken(const int32_t seqid);
  bool isValidUserToken(const Token& token);
  int32_t send_isValidUserToken(const Token& token);
  bool recv_isValidUserToken(const int32_t seqid);
  void listOfParentForDeviceGroup(std::vector<int32_t> & _return, const int32_t deviceGroupId);
  int32_t send_listOfParentForDeviceGroup(const int32_t deviceGroupId);
  void recv_listOfParentForDeviceGroup(std::vector<int32_t> & _return, const int32_t seqid);
  void listOfParentForPersonGroup(std::vector<int32_t> & _return, const int32_t personGroupId);
  int32_t send_listOfParentForPersonGroup(const int32_t personGroupId);
  void recv_listOfParentForPersonGroup(std::vector<int32_t> & _return, const int32_t seqid);
  void loadAllPerson(std::vector<int32_t> & _return);
  int32_t send_loadAllPerson();
  void recv_loadAllPerson(std::vector<int32_t> & _return, const int32_t seqid);
  void loadDeviceByWhere(std::vector<DeviceBean> & _return, const std::string& where, const int32_t startRow, const int32_t numRows);
  int32_t send_loadDeviceByWhere(const std::string& where, const int32_t startRow, const int32_t numRows);
  void recv_loadDeviceByWhere(std::vector<DeviceBean> & _return, const int32_t seqid);
  void loadDeviceGroupByWhere(std::vector<int32_t> & _return, const std::string& where, const int32_t startRow, const int32_t numRows);
  int32_t send_loadDeviceGroupByWhere(const std::string& where, const int32_t startRow, const int32_t numRows);
  void recv_loadDeviceGroupByWhere(std::vector<int32_t> & _return, const int32_t seqid);
  void loadDeviceGroupIdByWhere(std::vector<int32_t> & _return, const std::string& where);
  int32_t send_loadDeviceGroupIdByWhere(const std::string& where);
  void recv_loadDeviceGroupIdByWhere(std::vector<int32_t> & _return, const int32_t seqid);
  void loadDeviceIdByWhere(std::vector<int32_t> & _return, const std::string& where);
  int32_t send_loadDeviceIdByWhere(const std::string& where);
  void recv_loadDeviceIdByWhere(std::vector<int32_t> & _return, const int32_t seqid);
  void loadDistinctIntegerColumn(std::vector<int32_t> & _return, const std::string& table, const std::string& column, const std::string& where);
  int32_t send_loadDistinctIntegerColumn(const std::string& table, const std::string& column, const std::string& where);
  void recv_loadDistinctIntegerColumn(std::vector<int32_t> & _return, const int32_t seqid);
  void loadDistinctStringColumn(std::vector<std::string> & _return, const std::string& table, const std::string& column, const std::string& where);
  int32_t send_loadDistinctStringColumn(const std::string& table, const std::string& column, const std::string& where);
  void recv_loadDistinctStringColumn(std::vector<std::string> & _return, const int32_t seqid);
  void loadFeatureMd5ByUpdate(std::vector<std::string> & _return, const int64_t timestamp);
  int32_t send_loadFeatureMd5ByUpdate(const int64_t timestamp);
  void recv_loadFeatureMd5ByUpdate(std::vector<std::string> & _return, const int32_t seqid);
  void loadFeatureMd5ByUpdateTimeStr(std::vector<std::string> & _return, const std::string& timestamp);
  int32_t send_loadFeatureMd5ByUpdateTimeStr(const std::string& timestamp);
  void recv_loadFeatureMd5ByUpdateTimeStr(std::vector<std::string> & _return, const int32_t seqid);
  void loadLogByWhere(std::vector<LogBean> & _return, const std::string& where, const int32_t startRow, const int32_t numRows);
  int32_t send_loadLogByWhere(const std::string& where, const int32_t startRow, const int32_t numRows);
  void recv_loadLogByWhere(std::vector<LogBean> & _return, const int32_t seqid);
  void loadLogLightByVerifyTime(std::vector<LogLightBean> & _return, const int64_t timestamp, const int32_t startRow, const int32_t numRows);
  int32_t send_loadLogLightByVerifyTime(const int64_t timestamp, const int32_t startRow, const int32_t numRows);
  void recv_loadLogLightByVerifyTime(std::vector<LogLightBean> & _return, const int32_t seqid);
  void loadLogLightByVerifyTimeTimestr(std::vector<LogLightBean> & _return, const std::string& timestamp, const int32_t startRow, const int32_t numRows);
  int32_t send_loadLogLightByVerifyTimeTimestr(const std::string& timestamp, const int32_t startRow, const int32_t numRows);
  void recv_loadLogLightByVerifyTimeTimestr(std::vector<LogLightBean> & _return, const int32_t seqid);
  void loadLogLightByWhere(std::vector<LogLightBean> & _return, const std::string& where, const int32_t startRow, const int32_t numRows);
  int32_t send_loadLogLightByWhere(const std::string& where, const int32_t startRow, const int32_t numRows);
  void recv_loadLogLightByWhere(std::vector<LogLightBean> & _return, const int32_t seqid);
  void loadPermitByUpdate(std::vector<PermitBean> & _return, const int64_t timestamp);
  int32_t send_loadPermitByUpdate(const int64_t timestamp);
  void recv_loadPermitByUpdate(std::vector<PermitBean> & _return, const int32_t seqid);
  void loadPermitByUpdateTimestr(std::vector<PermitBean> & _return, const std::string& timestamp);
  int32_t send_loadPermitByUpdateTimestr(const std::string& timestamp);
  void recv_loadPermitByUpdateTimestr(std::vector<PermitBean> & _return, const int32_t seqid);
  void loadPersonByWhere(std::vector<PersonBean> & _return, const std::string& where, const int32_t startRow, const int32_t numRows);
  int32_t send_loadPersonByWhere(const std::string& where, const int32_t startRow, const int32_t numRows);
  void recv_loadPersonByWhere(std::vector<PersonBean> & _return, const int32_t seqid);
  void loadPersonGroupByWhere(std::vector<int32_t> & _return, const std::string& where, const int32_t startRow, const int32_t numRows);
  int32_t send_loadPersonGroupByWhere(const std::string& where, const int32_t startRow, const int32_t numRows);
  void recv_loadPersonGroupByWhere(std::vector<int32_t> & _return, const int32_t seqid);
  void loadPersonGroupIdByWhere(std::vector<int32_t> & _return, const std::string& where);
  int32_t send_loadPersonGroupIdByWhere(const std::string& where);
  void recv_loadPersonGroupIdByWhere(std::vector<int32_t> & _return, const int32_t seqid);
  void loadPersonIdByUpdateTime(std::vector<int32_t> & _return, const int64_t timestamp);
  int32_t send_loadPersonIdByUpdateTime(const int64_t timestamp);
  void recv_loadPersonIdByUpdateTime(std::vector<int32_t> & _return, const int32_t seqid);
  void loadPersonIdByUpdateTimeTimeStr(std::vector<int32_t> & _return, const std::string& timestamp);
  int32_t send_loadPersonIdByUpdateTimeTimeStr(const std::string& timestamp);
  void recv_loadPersonIdByUpdateTimeTimeStr(std::vector<int32_t> & _return, const int32_t seqid);
  void loadPersonIdByWhere(std::vector<int32_t> & _return, const std::string& where);
  int32_t send_loadPersonIdByWhere(const std::string& where);
  void recv_loadPersonIdByWhere(std::vector<int32_t> & _return, const int32_t seqid);
  void loadUpdatedPersons(std::vector<int32_t> & _return, const int64_t timestamp);
  int32_t send_loadUpdatedPersons(const int64_t timestamp);
  void recv_loadUpdatedPersons(std::vector<int32_t> & _return, const int32_t seqid);
  void loadUpdatedPersonsTimestr(std::vector<int32_t> & _return, const std::string& timestamp);
  int32_t send_loadUpdatedPersonsTimestr(const std::string& timestamp);
  void recv_loadUpdatedPersonsTimestr(std::vector<int32_t> & _return, const int32_t seqid);
  void offline(const Token& token);
  int32_t send_offline(const Token& token);
  void recv_offline(const int32_t seqid);
  void online(Token& _return, const DeviceBean& device);
  int32_t send_online(const DeviceBean& device);
  void recv_online(Token& _return, const int32_t seqid);
  void registerDevice(DeviceBean& _return, const DeviceBean& newDevice);
  int32_t send_registerDevice(const DeviceBean& newDevice);
  void recv_registerDevice(DeviceBean& _return, const int32_t seqid);
  void releasePersonToken(const Token& token);
  int32_t send_releasePersonToken(const Token& token);
  void recv_releasePersonToken(const int32_t seqid);
  void releaseRootToken(const Token& token);
  int32_t send_releaseRootToken(const Token& token);
  void recv_releaseRootToken(const int32_t seqid);
  void releaseUserToken(const Token& token);
  int32_t send_releaseUserToken(const Token& token);
  void recv_releaseUserToken(const int32_t seqid);
  void replaceFeature(const int32_t personId, const std::string& featureMd5, const bool deleteOldFeatureImage, const Token& token);
  int32_t send_replaceFeature(const int32_t personId, const std::string& featureMd5, const bool deleteOldFeatureImage, const Token& token);
  void recv_replaceFeature(const int32_t seqid);
  int32_t rootGroupOfDevice(const int32_t deviceId);
  int32_t send_rootGroupOfDevice(const int32_t deviceId);
  int32_t recv_rootGroupOfDevice(const int32_t seqid);
  int32_t rootGroupOfPerson(const int32_t personId);
  int32_t send_rootGroupOfPerson(const int32_t personId);
  int32_t recv_rootGroupOfPerson(const int32_t seqid);
  void runCmd(std::string& _return, const std::vector<int32_t> & target, const bool group, const std::string& cmdpath, const std::string& jsonArgs, const std::string& ackChannel, const Token& token);
  int32_t send_runCmd(const std::vector<int32_t> & target, const bool group, const std::string& cmdpath, const std::string& jsonArgs, const std::string& ackChannel, const Token& token);
  void recv_runCmd(std::string& _return, const int32_t seqid);
  int32_t runTask(const std::string& taskQueue, const std::string& cmdpath, const std::string& jsonArgs, const std::string& ackChannel, const Token& token);
  int32_t send_runTask(const std::string& taskQueue, const std::string& cmdpath, const std::string& jsonArgs, const std::string& ackChannel, const Token& token);
  int32_t recv_runTask(const int32_t seqid);
  void saveDevice(DeviceBean& _return, const DeviceBean& deviceBean, const Token& token);
  int32_t send_saveDevice(const DeviceBean& deviceBean, const Token& token);
  void recv_saveDevice(DeviceBean& _return, const int32_t seqid);
  void saveDeviceGroup(DeviceGroupBean& _return, const DeviceGroupBean& deviceGroupBean, const Token& token);
  int32_t send_saveDeviceGroup(const DeviceGroupBean& deviceGroupBean, const Token& token);
  void recv_saveDeviceGroup(DeviceGroupBean& _return, const int32_t seqid);
  void savePermit(PermitBean& _return, const PermitBean& permitBean, const Token& token);
  int32_t send_savePermit(const PermitBean& permitBean, const Token& token);
  void recv_savePermit(PermitBean& _return, const int32_t seqid);
  void savePermitWithColumn(PermitBean& _return, const int32_t deviceGroupId, const int32_t personGroupId, const std::string& column, const std::string& value, const Token& token);
  int32_t send_savePermitWithColumn(const int32_t deviceGroupId, const int32_t personGroupId, const std::string& column, const std::string& value, const Token& token);
  void recv_savePermitWithColumn(PermitBean& _return, const int32_t seqid);
  void savePerson(PersonBean& _return, const PersonBean& personBean, const Token& token);
  int32_t send_savePerson(const PersonBean& personBean, const Token& token);
  void recv_savePerson(PersonBean& _return, const int32_t seqid);
  void savePersonFull(PersonBean& _return, const PersonBean& personBean, const std::string& idPhoto, const std::string& feature, const std::string& featureVersion, const std::string& featureImage, const FaceBean& faceBean, const Token& token);
  int32_t send_savePersonFull(const PersonBean& personBean, const std::string& idPhoto, const std::string& feature, const std::string& featureVersion, const std::string& featureImage, const FaceBean& faceBean, const Token& token);
  void recv_savePersonFull(PersonBean& _return, const int32_t seqid);
  void savePersonGroup(PersonGroupBean& _return, const PersonGroupBean& personGroupBean, const Token& token);
  int32_t send_savePersonGroup(const PersonGroupBean& personGroupBean, const Token& token);
  void recv_savePersonGroup(PersonGroupBean& _return, const int32_t seqid);
  void savePersonWithPhoto(PersonBean& _return, const PersonBean& personBean, const std::string& idPhoto, const Token& token);
  int32_t send_savePersonWithPhoto(const PersonBean& personBean, const std::string& idPhoto, const Token& token);
  void recv_savePersonWithPhoto(PersonBean& _return, const int32_t seqid);
  void savePersonWithPhotoAndFeature(PersonBean& _return, const PersonBean& personBean, const std::string& idPhoto, const FeatureBean& featureBean, const Token& token);
  int32_t send_savePersonWithPhotoAndFeature(const PersonBean& personBean, const std::string& idPhoto, const FeatureBean& featureBean, const Token& token);
  void recv_savePersonWithPhotoAndFeature(PersonBean& _return, const int32_t seqid);
  void savePersonWithPhotoAndFeatureMultiFaces(PersonBean& _return, const PersonBean& personBean, const std::string& idPhoto, const std::string& feature, const std::string& featureVersion, const std::vector<FaceBean> & faceBeans, const Token& token);
  int32_t send_savePersonWithPhotoAndFeatureMultiFaces(const PersonBean& personBean, const std::string& idPhoto, const std::string& feature, const std::string& featureVersion, const std::vector<FaceBean> & faceBeans, const Token& token);
  void recv_savePersonWithPhotoAndFeatureMultiFaces(PersonBean& _return, const int32_t seqid);
  void savePersonWithPhotoAndFeatureMultiImage(PersonBean& _return, const PersonBean& personBean, const std::string& idPhoto, const std::string& feature, const std::string& featureVersion, const std::vector<std::string> & photos, const std::vector<FaceBean> & faces, const Token& token);
  int32_t send_savePersonWithPhotoAndFeatureMultiImage(const PersonBean& personBean, const std::string& idPhoto, const std::string& feature, const std::string& featureVersion, const std::vector<std::string> & photos, const std::vector<FaceBean> & faces, const Token& token);
  void recv_savePersonWithPhotoAndFeatureMultiImage(PersonBean& _return, const int32_t seqid);
  void savePersonWithPhotoAndFeatureSaved(PersonBean& _return, const PersonBean& personBean, const std::string& idPhotoMd5, const std::string& featureMd5, const Token& token);
  int32_t send_savePersonWithPhotoAndFeatureSaved(const PersonBean& personBean, const std::string& idPhotoMd5, const std::string& featureMd5, const Token& token);
  void recv_savePersonWithPhotoAndFeatureSaved(PersonBean& _return, const int32_t seqid);
  void savePersons(const std::vector<PersonBean> & persons, const Token& token);
  int32_t send_savePersons(const std::vector<PersonBean> & persons, const Token& token);
  void recv_savePersons(const int32_t seqid);
  int32_t savePersonsWithPhoto(const std::vector<std::string> & photos, const std::vector<PersonBean> & persons, const Token& token);
  int32_t send_savePersonsWithPhoto(const std::vector<std::string> & photos, const std::vector<PersonBean> & persons, const Token& token);
  int32_t recv_savePersonsWithPhoto(const int32_t seqid);
  void saveServiceConfig(const Token& token);
  int32_t send_saveServiceConfig(const Token& token);
  void recv_saveServiceConfig(const int32_t seqid);
  void sdkTaskQueueOf(std::string& _return, const std::string& task, const std::string& sdkVersion, const Token& token);
  int32_t send_sdkTaskQueueOf(const std::string& task, const std::string& sdkVersion, const Token& token);
  void recv_sdkTaskQueueOf(std::string& _return, const int32_t seqid);
  void setPersonExpiryDate(const int32_t personId, const int64_t expiryDate, const Token& token);
  int32_t send_setPersonExpiryDate(const int32_t personId, const int64_t expiryDate, const Token& token);
  void recv_setPersonExpiryDate(const int32_t seqid);
  void setPersonExpiryDateList(const std::vector<int32_t> & personIdList, const int64_t expiryDate, const Token& token);
  int32_t send_setPersonExpiryDateList(const std::vector<int32_t> & personIdList, const int64_t expiryDate, const Token& token);
  void recv_setPersonExpiryDateList(const int32_t seqid);
  void setPersonExpiryDateTimeStr(const int32_t personId, const std::string& expiryDate, const Token& token);
  int32_t send_setPersonExpiryDateTimeStr(const int32_t personId, const std::string& expiryDate, const Token& token);
  void recv_setPersonExpiryDateTimeStr(const int32_t seqid);
  void setProperties(const std::map<std::string, std::string> & config, const Token& token);
  int32_t send_setProperties(const std::map<std::string, std::string> & config, const Token& token);
  void recv_setProperties(const int32_t seqid);
  void setProperty(const std::string& key, const std::string& value, const Token& token);
  int32_t send_setProperty(const std::string& key, const std::string& value, const Token& token);
  void recv_setProperty(const int32_t seqid);
  void taskQueueOf(std::string& _return, const std::string& task, const Token& token);
  int32_t send_taskQueueOf(const std::string& task, const Token& token);
  void recv_taskQueueOf(std::string& _return, const int32_t seqid);
  void unbindBorder(const int32_t personGroupId, const int32_t deviceGroupId, const Token& token);
  int32_t send_unbindBorder(const int32_t personGroupId, const int32_t deviceGroupId, const Token& token);
  void recv_unbindBorder(const int32_t seqid);
  void unregisterDevice(const Token& token);
  int32_t send_unregisterDevice(const Token& token);
  void recv_unregisterDevice(const int32_t seqid);
  void updateDevice(DeviceBean& _return, const DeviceBean& deviceBean, const Token& token);
  int32_t send_updateDevice(const DeviceBean& deviceBean, const Token& token);
  void recv_updateDevice(DeviceBean& _return, const int32_t seqid);
  void version(std::string& _return);
  int32_t send_version();
  void recv_version(std::string& _return, const int32_t seqid);
  void versionInfo(std::map<std::string, std::string> & _return);
  int32_t send_versionInfo();
  void recv_versionInfo(std::map<std::string, std::string> & _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< Protocol_> piprot_;
  apache::thrift::stdcxx::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

typedef IFaceLogConcurrentClientT< ::apache::thrift::protocol::TProtocol> IFaceLogConcurrentClient;

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#include "IFaceLog.tcc"
#include "IFaceLog_types.tcc"

#endif
