/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "IFaceLog_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace gdface {

int _kTokenTypeValues[] = {
  TokenType::UNINITIALIZED,
  TokenType::DEVICE,
  TokenType::PERSON,
  TokenType::ROOT
};
const char* _kTokenTypeNames[] = {
  "UNINITIALIZED",
  "DEVICE",
  "PERSON",
  "ROOT"
};
const std::map<int, const char*> _TokenType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kTokenTypeValues, _kTokenTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TokenType::type& val) {
  std::map<int, const char*>::const_iterator it = _TokenType_VALUES_TO_NAMES.find(val);
  if (it != _TokenType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSecurityExceptionTypeValues[] = {
  SecurityExceptionType::UNCLASSIFIED,
  SecurityExceptionType::INVALID_MAC,
  SecurityExceptionType::INVALID_SN,
  SecurityExceptionType::OCCUPIED_SN,
  SecurityExceptionType::INVALID_TOKEN,
  SecurityExceptionType::INVALID_DEVICE_ID,
  SecurityExceptionType::INVALID_PERSON_ID,
  SecurityExceptionType::INVALID_PASSWORD,
  SecurityExceptionType::REJECT_APPLY,
  SecurityExceptionType::ACCESS_DENIED,
  SecurityExceptionType::TABLE_INSERT_DENIED,
  SecurityExceptionType::TABLE_UPDATE_DENIED,
  SecurityExceptionType::TABLE_DELETE_DENIED,
  SecurityExceptionType::TOO_LOW_RANK
};
const char* _kSecurityExceptionTypeNames[] = {
  "UNCLASSIFIED",
  "INVALID_MAC",
  "INVALID_SN",
  "OCCUPIED_SN",
  "INVALID_TOKEN",
  "INVALID_DEVICE_ID",
  "INVALID_PERSON_ID",
  "INVALID_PASSWORD",
  "REJECT_APPLY",
  "ACCESS_DENIED",
  "TABLE_INSERT_DENIED",
  "TABLE_UPDATE_DENIED",
  "TABLE_DELETE_DENIED",
  "TOO_LOW_RANK"
};
const std::map<int, const char*> _SecurityExceptionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(14, _kSecurityExceptionTypeValues, _kSecurityExceptionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SecurityExceptionType::type& val) {
  std::map<int, const char*>::const_iterator it = _SecurityExceptionType_VALUES_TO_NAMES.find(val);
  if (it != _SecurityExceptionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kMQParamValues[] = {
  MQParam::REDIS_URI,
  MQParam::WEBREDIS_URL,
  MQParam::CMD_CHANNEL,
  MQParam::LOG_MONITOR_CHANNEL,
  MQParam::HB_MONITOR_CHANNEL,
  MQParam::HB_INTERVAL,
  MQParam::HB_EXPIRE
};
const char* _kMQParamNames[] = {
  "REDIS_URI",
  "WEBREDIS_URL",
  "CMD_CHANNEL",
  "LOG_MONITOR_CHANNEL",
  "HB_MONITOR_CHANNEL",
  "HB_INTERVAL",
  "HB_EXPIRE"
};
const std::map<int, const char*> _MQParam_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kMQParamValues, _kMQParamNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const MQParam::type& val) {
  std::map<int, const char*>::const_iterator it = _MQParam_VALUES_TO_NAMES.find(val);
  if (it != _MQParam_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


FaceBean::~FaceBean() throw() {
}


void FaceBean::__set__new(const bool val) {
  this->_new = val;
}

void FaceBean::__set_modified(const int32_t val) {
  this->modified = val;
}

void FaceBean::__set_initialized(const int32_t val) {
  this->initialized = val;
}

void FaceBean::__set_id(const int32_t val) {
  this->id = val;
__isset.id = true;
}

void FaceBean::__set_imageMd5(const std::string& val) {
  this->imageMd5 = val;
__isset.imageMd5 = true;
}

void FaceBean::__set_faceLeft(const int32_t val) {
  this->faceLeft = val;
__isset.faceLeft = true;
}

void FaceBean::__set_faceTop(const int32_t val) {
  this->faceTop = val;
__isset.faceTop = true;
}

void FaceBean::__set_faceWidth(const int32_t val) {
  this->faceWidth = val;
__isset.faceWidth = true;
}

void FaceBean::__set_faceHeight(const int32_t val) {
  this->faceHeight = val;
__isset.faceHeight = true;
}

void FaceBean::__set_eyeLeftx(const int32_t val) {
  this->eyeLeftx = val;
__isset.eyeLeftx = true;
}

void FaceBean::__set_eyeLefty(const int32_t val) {
  this->eyeLefty = val;
__isset.eyeLefty = true;
}

void FaceBean::__set_eyeRightx(const int32_t val) {
  this->eyeRightx = val;
__isset.eyeRightx = true;
}

void FaceBean::__set_eyeRighty(const int32_t val) {
  this->eyeRighty = val;
__isset.eyeRighty = true;
}

void FaceBean::__set_mouthX(const int32_t val) {
  this->mouthX = val;
__isset.mouthX = true;
}

void FaceBean::__set_mouthY(const int32_t val) {
  this->mouthY = val;
__isset.mouthY = true;
}

void FaceBean::__set_noseX(const int32_t val) {
  this->noseX = val;
__isset.noseX = true;
}

void FaceBean::__set_noseY(const int32_t val) {
  this->noseY = val;
__isset.noseY = true;
}

void FaceBean::__set_angleYaw(const int32_t val) {
  this->angleYaw = val;
__isset.angleYaw = true;
}

void FaceBean::__set_anglePitch(const int32_t val) {
  this->anglePitch = val;
__isset.anglePitch = true;
}

void FaceBean::__set_angleRoll(const int32_t val) {
  this->angleRoll = val;
__isset.angleRoll = true;
}

void FaceBean::__set_extInfo(const std::string& val) {
  this->extInfo = val;
__isset.extInfo = true;
}

void FaceBean::__set_featureMd5(const std::string& val) {
  this->featureMd5 = val;
__isset.featureMd5 = true;
}
std::ostream& operator<<(std::ostream& out, const FaceBean& obj)
{
  obj.printTo(out);
  return out;
}


void swap(FaceBean &a, FaceBean &b) {
  using ::std::swap;
  swap(a._new, b._new);
  swap(a.modified, b.modified);
  swap(a.initialized, b.initialized);
  swap(a.id, b.id);
  swap(a.imageMd5, b.imageMd5);
  swap(a.faceLeft, b.faceLeft);
  swap(a.faceTop, b.faceTop);
  swap(a.faceWidth, b.faceWidth);
  swap(a.faceHeight, b.faceHeight);
  swap(a.eyeLeftx, b.eyeLeftx);
  swap(a.eyeLefty, b.eyeLefty);
  swap(a.eyeRightx, b.eyeRightx);
  swap(a.eyeRighty, b.eyeRighty);
  swap(a.mouthX, b.mouthX);
  swap(a.mouthY, b.mouthY);
  swap(a.noseX, b.noseX);
  swap(a.noseY, b.noseY);
  swap(a.angleYaw, b.angleYaw);
  swap(a.anglePitch, b.anglePitch);
  swap(a.angleRoll, b.angleRoll);
  swap(a.extInfo, b.extInfo);
  swap(a.featureMd5, b.featureMd5);
  swap(a.__isset, b.__isset);
}

FaceBean::FaceBean(const FaceBean& other0) {
  _new = other0._new;
  modified = other0.modified;
  initialized = other0.initialized;
  id = other0.id;
  imageMd5 = other0.imageMd5;
  faceLeft = other0.faceLeft;
  faceTop = other0.faceTop;
  faceWidth = other0.faceWidth;
  faceHeight = other0.faceHeight;
  eyeLeftx = other0.eyeLeftx;
  eyeLefty = other0.eyeLefty;
  eyeRightx = other0.eyeRightx;
  eyeRighty = other0.eyeRighty;
  mouthX = other0.mouthX;
  mouthY = other0.mouthY;
  noseX = other0.noseX;
  noseY = other0.noseY;
  angleYaw = other0.angleYaw;
  anglePitch = other0.anglePitch;
  angleRoll = other0.angleRoll;
  extInfo = other0.extInfo;
  featureMd5 = other0.featureMd5;
  __isset = other0.__isset;
}
FaceBean::FaceBean( FaceBean&& other1) {
  _new = std::move(other1._new);
  modified = std::move(other1.modified);
  initialized = std::move(other1.initialized);
  id = std::move(other1.id);
  imageMd5 = std::move(other1.imageMd5);
  faceLeft = std::move(other1.faceLeft);
  faceTop = std::move(other1.faceTop);
  faceWidth = std::move(other1.faceWidth);
  faceHeight = std::move(other1.faceHeight);
  eyeLeftx = std::move(other1.eyeLeftx);
  eyeLefty = std::move(other1.eyeLefty);
  eyeRightx = std::move(other1.eyeRightx);
  eyeRighty = std::move(other1.eyeRighty);
  mouthX = std::move(other1.mouthX);
  mouthY = std::move(other1.mouthY);
  noseX = std::move(other1.noseX);
  noseY = std::move(other1.noseY);
  angleYaw = std::move(other1.angleYaw);
  anglePitch = std::move(other1.anglePitch);
  angleRoll = std::move(other1.angleRoll);
  extInfo = std::move(other1.extInfo);
  featureMd5 = std::move(other1.featureMd5);
  __isset = std::move(other1.__isset);
}
FaceBean& FaceBean::operator=(const FaceBean& other2) {
  _new = other2._new;
  modified = other2.modified;
  initialized = other2.initialized;
  id = other2.id;
  imageMd5 = other2.imageMd5;
  faceLeft = other2.faceLeft;
  faceTop = other2.faceTop;
  faceWidth = other2.faceWidth;
  faceHeight = other2.faceHeight;
  eyeLeftx = other2.eyeLeftx;
  eyeLefty = other2.eyeLefty;
  eyeRightx = other2.eyeRightx;
  eyeRighty = other2.eyeRighty;
  mouthX = other2.mouthX;
  mouthY = other2.mouthY;
  noseX = other2.noseX;
  noseY = other2.noseY;
  angleYaw = other2.angleYaw;
  anglePitch = other2.anglePitch;
  angleRoll = other2.angleRoll;
  extInfo = other2.extInfo;
  featureMd5 = other2.featureMd5;
  __isset = other2.__isset;
  return *this;
}
FaceBean& FaceBean::operator=(FaceBean&& other3) {
  _new = std::move(other3._new);
  modified = std::move(other3.modified);
  initialized = std::move(other3.initialized);
  id = std::move(other3.id);
  imageMd5 = std::move(other3.imageMd5);
  faceLeft = std::move(other3.faceLeft);
  faceTop = std::move(other3.faceTop);
  faceWidth = std::move(other3.faceWidth);
  faceHeight = std::move(other3.faceHeight);
  eyeLeftx = std::move(other3.eyeLeftx);
  eyeLefty = std::move(other3.eyeLefty);
  eyeRightx = std::move(other3.eyeRightx);
  eyeRighty = std::move(other3.eyeRighty);
  mouthX = std::move(other3.mouthX);
  mouthY = std::move(other3.mouthY);
  noseX = std::move(other3.noseX);
  noseY = std::move(other3.noseY);
  angleYaw = std::move(other3.angleYaw);
  anglePitch = std::move(other3.anglePitch);
  angleRoll = std::move(other3.angleRoll);
  extInfo = std::move(other3.extInfo);
  featureMd5 = std::move(other3.featureMd5);
  __isset = std::move(other3.__isset);
  return *this;
}
void FaceBean::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FaceBean(";
  out << "_new=" << to_string(_new);
  out << ", " << "modified=" << to_string(modified);
  out << ", " << "initialized=" << to_string(initialized);
  out << ", " << "id="; (__isset.id ? (out << to_string(id)) : (out << "<null>"));
  out << ", " << "imageMd5="; (__isset.imageMd5 ? (out << to_string(imageMd5)) : (out << "<null>"));
  out << ", " << "faceLeft="; (__isset.faceLeft ? (out << to_string(faceLeft)) : (out << "<null>"));
  out << ", " << "faceTop="; (__isset.faceTop ? (out << to_string(faceTop)) : (out << "<null>"));
  out << ", " << "faceWidth="; (__isset.faceWidth ? (out << to_string(faceWidth)) : (out << "<null>"));
  out << ", " << "faceHeight="; (__isset.faceHeight ? (out << to_string(faceHeight)) : (out << "<null>"));
  out << ", " << "eyeLeftx="; (__isset.eyeLeftx ? (out << to_string(eyeLeftx)) : (out << "<null>"));
  out << ", " << "eyeLefty="; (__isset.eyeLefty ? (out << to_string(eyeLefty)) : (out << "<null>"));
  out << ", " << "eyeRightx="; (__isset.eyeRightx ? (out << to_string(eyeRightx)) : (out << "<null>"));
  out << ", " << "eyeRighty="; (__isset.eyeRighty ? (out << to_string(eyeRighty)) : (out << "<null>"));
  out << ", " << "mouthX="; (__isset.mouthX ? (out << to_string(mouthX)) : (out << "<null>"));
  out << ", " << "mouthY="; (__isset.mouthY ? (out << to_string(mouthY)) : (out << "<null>"));
  out << ", " << "noseX="; (__isset.noseX ? (out << to_string(noseX)) : (out << "<null>"));
  out << ", " << "noseY="; (__isset.noseY ? (out << to_string(noseY)) : (out << "<null>"));
  out << ", " << "angleYaw="; (__isset.angleYaw ? (out << to_string(angleYaw)) : (out << "<null>"));
  out << ", " << "anglePitch="; (__isset.anglePitch ? (out << to_string(anglePitch)) : (out << "<null>"));
  out << ", " << "angleRoll="; (__isset.angleRoll ? (out << to_string(angleRoll)) : (out << "<null>"));
  out << ", " << "extInfo="; (__isset.extInfo ? (out << to_string(extInfo)) : (out << "<null>"));
  out << ", " << "featureMd5="; (__isset.featureMd5 ? (out << to_string(featureMd5)) : (out << "<null>"));
  out << ")";
}


DuplicateRecordException::~DuplicateRecordException() throw() {
}


void DuplicateRecordException::__set_message(const std::string& val) {
  this->message = val;
__isset.message = true;
}

void DuplicateRecordException::__set_causeClass(const std::string& val) {
  this->causeClass = val;
__isset.causeClass = true;
}

void DuplicateRecordException::__set_serviceStackTraceMessage(const std::string& val) {
  this->serviceStackTraceMessage = val;
__isset.serviceStackTraceMessage = true;
}

void DuplicateRecordException::__set_causeFields(const std::string& val) {
  this->causeFields = val;
__isset.causeFields = true;
}
std::ostream& operator<<(std::ostream& out, const DuplicateRecordException& obj)
{
  obj.printTo(out);
  return out;
}


void swap(DuplicateRecordException &a, DuplicateRecordException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.causeClass, b.causeClass);
  swap(a.serviceStackTraceMessage, b.serviceStackTraceMessage);
  swap(a.causeFields, b.causeFields);
  swap(a.__isset, b.__isset);
}

DuplicateRecordException::DuplicateRecordException(const DuplicateRecordException& other4) : TException() {
  message = other4.message;
  causeClass = other4.causeClass;
  serviceStackTraceMessage = other4.serviceStackTraceMessage;
  causeFields = other4.causeFields;
  __isset = other4.__isset;
}
DuplicateRecordException::DuplicateRecordException( DuplicateRecordException&& other5) : TException() {
  message = std::move(other5.message);
  causeClass = std::move(other5.causeClass);
  serviceStackTraceMessage = std::move(other5.serviceStackTraceMessage);
  causeFields = std::move(other5.causeFields);
  __isset = std::move(other5.__isset);
}
DuplicateRecordException& DuplicateRecordException::operator=(const DuplicateRecordException& other6) {
  message = other6.message;
  causeClass = other6.causeClass;
  serviceStackTraceMessage = other6.serviceStackTraceMessage;
  causeFields = other6.causeFields;
  __isset = other6.__isset;
  return *this;
}
DuplicateRecordException& DuplicateRecordException::operator=(DuplicateRecordException&& other7) {
  message = std::move(other7.message);
  causeClass = std::move(other7.causeClass);
  serviceStackTraceMessage = std::move(other7.serviceStackTraceMessage);
  causeFields = std::move(other7.causeFields);
  __isset = std::move(other7.__isset);
  return *this;
}
void DuplicateRecordException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DuplicateRecordException(";
  out << "message="; (__isset.message ? (out << to_string(message)) : (out << "<null>"));
  out << ", " << "causeClass="; (__isset.causeClass ? (out << to_string(causeClass)) : (out << "<null>"));
  out << ", " << "serviceStackTraceMessage="; (__isset.serviceStackTraceMessage ? (out << to_string(serviceStackTraceMessage)) : (out << "<null>"));
  out << ", " << "causeFields="; (__isset.causeFields ? (out << to_string(causeFields)) : (out << "<null>"));
  out << ")";
}

const char* DuplicateRecordException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: DuplicateRecordException";
  }
}


ServiceRuntimeException::~ServiceRuntimeException() throw() {
}


void ServiceRuntimeException::__set_message(const std::string& val) {
  this->message = val;
__isset.message = true;
}

void ServiceRuntimeException::__set_causeClass(const std::string& val) {
  this->causeClass = val;
__isset.causeClass = true;
}

void ServiceRuntimeException::__set_serviceStackTraceMessage(const std::string& val) {
  this->serviceStackTraceMessage = val;
__isset.serviceStackTraceMessage = true;
}

void ServiceRuntimeException::__set_causeFields(const std::string& val) {
  this->causeFields = val;
__isset.causeFields = true;
}

void ServiceRuntimeException::__set_type(const int32_t val) {
  this->type = val;
}
std::ostream& operator<<(std::ostream& out, const ServiceRuntimeException& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ServiceRuntimeException &a, ServiceRuntimeException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.causeClass, b.causeClass);
  swap(a.serviceStackTraceMessage, b.serviceStackTraceMessage);
  swap(a.causeFields, b.causeFields);
  swap(a.type, b.type);
  swap(a.__isset, b.__isset);
}

ServiceRuntimeException::ServiceRuntimeException(const ServiceRuntimeException& other8) : TException() {
  message = other8.message;
  causeClass = other8.causeClass;
  serviceStackTraceMessage = other8.serviceStackTraceMessage;
  causeFields = other8.causeFields;
  type = other8.type;
  __isset = other8.__isset;
}
ServiceRuntimeException::ServiceRuntimeException( ServiceRuntimeException&& other9) : TException() {
  message = std::move(other9.message);
  causeClass = std::move(other9.causeClass);
  serviceStackTraceMessage = std::move(other9.serviceStackTraceMessage);
  causeFields = std::move(other9.causeFields);
  type = std::move(other9.type);
  __isset = std::move(other9.__isset);
}
ServiceRuntimeException& ServiceRuntimeException::operator=(const ServiceRuntimeException& other10) {
  message = other10.message;
  causeClass = other10.causeClass;
  serviceStackTraceMessage = other10.serviceStackTraceMessage;
  causeFields = other10.causeFields;
  type = other10.type;
  __isset = other10.__isset;
  return *this;
}
ServiceRuntimeException& ServiceRuntimeException::operator=(ServiceRuntimeException&& other11) {
  message = std::move(other11.message);
  causeClass = std::move(other11.causeClass);
  serviceStackTraceMessage = std::move(other11.serviceStackTraceMessage);
  causeFields = std::move(other11.causeFields);
  type = std::move(other11.type);
  __isset = std::move(other11.__isset);
  return *this;
}
void ServiceRuntimeException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ServiceRuntimeException(";
  out << "message="; (__isset.message ? (out << to_string(message)) : (out << "<null>"));
  out << ", " << "causeClass="; (__isset.causeClass ? (out << to_string(causeClass)) : (out << "<null>"));
  out << ", " << "serviceStackTraceMessage="; (__isset.serviceStackTraceMessage ? (out << to_string(serviceStackTraceMessage)) : (out << "<null>"));
  out << ", " << "causeFields="; (__isset.causeFields ? (out << to_string(causeFields)) : (out << "<null>"));
  out << ", " << "type=" << to_string(type);
  out << ")";
}

const char* ServiceRuntimeException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: ServiceRuntimeException";
  }
}


FeatureBean::~FeatureBean() throw() {
}


void FeatureBean::__set__new(const bool val) {
  this->_new = val;
}

void FeatureBean::__set_modified(const int32_t val) {
  this->modified = val;
}

void FeatureBean::__set_initialized(const int32_t val) {
  this->initialized = val;
}

void FeatureBean::__set_md5(const std::string& val) {
  this->md5 = val;
__isset.md5 = true;
}

void FeatureBean::__set_version(const std::string& val) {
  this->version = val;
__isset.version = true;
}

void FeatureBean::__set_personId(const int32_t val) {
  this->personId = val;
__isset.personId = true;
}

void FeatureBean::__set_feature(const std::string& val) {
  this->feature = val;
__isset.feature = true;
}

void FeatureBean::__set_updateTime(const int64_t val) {
  this->updateTime = val;
__isset.updateTime = true;
}
std::ostream& operator<<(std::ostream& out, const FeatureBean& obj)
{
  obj.printTo(out);
  return out;
}


void swap(FeatureBean &a, FeatureBean &b) {
  using ::std::swap;
  swap(a._new, b._new);
  swap(a.modified, b.modified);
  swap(a.initialized, b.initialized);
  swap(a.md5, b.md5);
  swap(a.version, b.version);
  swap(a.personId, b.personId);
  swap(a.feature, b.feature);
  swap(a.updateTime, b.updateTime);
  swap(a.__isset, b.__isset);
}

FeatureBean::FeatureBean(const FeatureBean& other12) {
  _new = other12._new;
  modified = other12.modified;
  initialized = other12.initialized;
  md5 = other12.md5;
  version = other12.version;
  personId = other12.personId;
  feature = other12.feature;
  updateTime = other12.updateTime;
  __isset = other12.__isset;
}
FeatureBean::FeatureBean( FeatureBean&& other13) {
  _new = std::move(other13._new);
  modified = std::move(other13.modified);
  initialized = std::move(other13.initialized);
  md5 = std::move(other13.md5);
  version = std::move(other13.version);
  personId = std::move(other13.personId);
  feature = std::move(other13.feature);
  updateTime = std::move(other13.updateTime);
  __isset = std::move(other13.__isset);
}
FeatureBean& FeatureBean::operator=(const FeatureBean& other14) {
  _new = other14._new;
  modified = other14.modified;
  initialized = other14.initialized;
  md5 = other14.md5;
  version = other14.version;
  personId = other14.personId;
  feature = other14.feature;
  updateTime = other14.updateTime;
  __isset = other14.__isset;
  return *this;
}
FeatureBean& FeatureBean::operator=(FeatureBean&& other15) {
  _new = std::move(other15._new);
  modified = std::move(other15.modified);
  initialized = std::move(other15.initialized);
  md5 = std::move(other15.md5);
  version = std::move(other15.version);
  personId = std::move(other15.personId);
  feature = std::move(other15.feature);
  updateTime = std::move(other15.updateTime);
  __isset = std::move(other15.__isset);
  return *this;
}
void FeatureBean::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FeatureBean(";
  out << "_new=" << to_string(_new);
  out << ", " << "modified=" << to_string(modified);
  out << ", " << "initialized=" << to_string(initialized);
  out << ", " << "md5="; (__isset.md5 ? (out << to_string(md5)) : (out << "<null>"));
  out << ", " << "version="; (__isset.version ? (out << to_string(version)) : (out << "<null>"));
  out << ", " << "personId="; (__isset.personId ? (out << to_string(personId)) : (out << "<null>"));
  out << ", " << "feature="; (__isset.feature ? (out << to_string(feature)) : (out << "<null>"));
  out << ", " << "updateTime="; (__isset.updateTime ? (out << to_string(updateTime)) : (out << "<null>"));
  out << ")";
}


ImageBean::~ImageBean() throw() {
}


void ImageBean::__set__new(const bool val) {
  this->_new = val;
}

void ImageBean::__set_modified(const int32_t val) {
  this->modified = val;
}

void ImageBean::__set_initialized(const int32_t val) {
  this->initialized = val;
}

void ImageBean::__set_md5(const std::string& val) {
  this->md5 = val;
__isset.md5 = true;
}

void ImageBean::__set_format(const std::string& val) {
  this->format = val;
__isset.format = true;
}

void ImageBean::__set_width(const int32_t val) {
  this->width = val;
__isset.width = true;
}

void ImageBean::__set_height(const int32_t val) {
  this->height = val;
__isset.height = true;
}

void ImageBean::__set_depth(const int32_t val) {
  this->depth = val;
__isset.depth = true;
}

void ImageBean::__set_faceNum(const int32_t val) {
  this->faceNum = val;
__isset.faceNum = true;
}

void ImageBean::__set_thumbMd5(const std::string& val) {
  this->thumbMd5 = val;
__isset.thumbMd5 = true;
}

void ImageBean::__set_deviceId(const int32_t val) {
  this->deviceId = val;
__isset.deviceId = true;
}
std::ostream& operator<<(std::ostream& out, const ImageBean& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ImageBean &a, ImageBean &b) {
  using ::std::swap;
  swap(a._new, b._new);
  swap(a.modified, b.modified);
  swap(a.initialized, b.initialized);
  swap(a.md5, b.md5);
  swap(a.format, b.format);
  swap(a.width, b.width);
  swap(a.height, b.height);
  swap(a.depth, b.depth);
  swap(a.faceNum, b.faceNum);
  swap(a.thumbMd5, b.thumbMd5);
  swap(a.deviceId, b.deviceId);
  swap(a.__isset, b.__isset);
}

ImageBean::ImageBean(const ImageBean& other16) {
  _new = other16._new;
  modified = other16.modified;
  initialized = other16.initialized;
  md5 = other16.md5;
  format = other16.format;
  width = other16.width;
  height = other16.height;
  depth = other16.depth;
  faceNum = other16.faceNum;
  thumbMd5 = other16.thumbMd5;
  deviceId = other16.deviceId;
  __isset = other16.__isset;
}
ImageBean::ImageBean( ImageBean&& other17) {
  _new = std::move(other17._new);
  modified = std::move(other17.modified);
  initialized = std::move(other17.initialized);
  md5 = std::move(other17.md5);
  format = std::move(other17.format);
  width = std::move(other17.width);
  height = std::move(other17.height);
  depth = std::move(other17.depth);
  faceNum = std::move(other17.faceNum);
  thumbMd5 = std::move(other17.thumbMd5);
  deviceId = std::move(other17.deviceId);
  __isset = std::move(other17.__isset);
}
ImageBean& ImageBean::operator=(const ImageBean& other18) {
  _new = other18._new;
  modified = other18.modified;
  initialized = other18.initialized;
  md5 = other18.md5;
  format = other18.format;
  width = other18.width;
  height = other18.height;
  depth = other18.depth;
  faceNum = other18.faceNum;
  thumbMd5 = other18.thumbMd5;
  deviceId = other18.deviceId;
  __isset = other18.__isset;
  return *this;
}
ImageBean& ImageBean::operator=(ImageBean&& other19) {
  _new = std::move(other19._new);
  modified = std::move(other19.modified);
  initialized = std::move(other19.initialized);
  md5 = std::move(other19.md5);
  format = std::move(other19.format);
  width = std::move(other19.width);
  height = std::move(other19.height);
  depth = std::move(other19.depth);
  faceNum = std::move(other19.faceNum);
  thumbMd5 = std::move(other19.thumbMd5);
  deviceId = std::move(other19.deviceId);
  __isset = std::move(other19.__isset);
  return *this;
}
void ImageBean::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ImageBean(";
  out << "_new=" << to_string(_new);
  out << ", " << "modified=" << to_string(modified);
  out << ", " << "initialized=" << to_string(initialized);
  out << ", " << "md5="; (__isset.md5 ? (out << to_string(md5)) : (out << "<null>"));
  out << ", " << "format="; (__isset.format ? (out << to_string(format)) : (out << "<null>"));
  out << ", " << "width="; (__isset.width ? (out << to_string(width)) : (out << "<null>"));
  out << ", " << "height="; (__isset.height ? (out << to_string(height)) : (out << "<null>"));
  out << ", " << "depth="; (__isset.depth ? (out << to_string(depth)) : (out << "<null>"));
  out << ", " << "faceNum="; (__isset.faceNum ? (out << to_string(faceNum)) : (out << "<null>"));
  out << ", " << "thumbMd5="; (__isset.thumbMd5 ? (out << to_string(thumbMd5)) : (out << "<null>"));
  out << ", " << "deviceId="; (__isset.deviceId ? (out << to_string(deviceId)) : (out << "<null>"));
  out << ")";
}


LogBean::~LogBean() throw() {
}


void LogBean::__set__new(const bool val) {
  this->_new = val;
}

void LogBean::__set_modified(const int32_t val) {
  this->modified = val;
}

void LogBean::__set_initialized(const int32_t val) {
  this->initialized = val;
}

void LogBean::__set_id(const int32_t val) {
  this->id = val;
__isset.id = true;
}

void LogBean::__set_personId(const int32_t val) {
  this->personId = val;
__isset.personId = true;
}

void LogBean::__set_deviceId(const int32_t val) {
  this->deviceId = val;
__isset.deviceId = true;
}

void LogBean::__set_verifyFeature(const std::string& val) {
  this->verifyFeature = val;
__isset.verifyFeature = true;
}

void LogBean::__set_compareFace(const int32_t val) {
  this->compareFace = val;
__isset.compareFace = true;
}

void LogBean::__set_verifyStatus(const int32_t val) {
  this->verifyStatus = val;
__isset.verifyStatus = true;
}

void LogBean::__set_similarty(const double val) {
  this->similarty = val;
__isset.similarty = true;
}

void LogBean::__set_direction(const int32_t val) {
  this->direction = val;
__isset.direction = true;
}

void LogBean::__set_verifyTime(const int64_t val) {
  this->verifyTime = val;
__isset.verifyTime = true;
}

void LogBean::__set_createTime(const int64_t val) {
  this->createTime = val;
__isset.createTime = true;
}
std::ostream& operator<<(std::ostream& out, const LogBean& obj)
{
  obj.printTo(out);
  return out;
}


void swap(LogBean &a, LogBean &b) {
  using ::std::swap;
  swap(a._new, b._new);
  swap(a.modified, b.modified);
  swap(a.initialized, b.initialized);
  swap(a.id, b.id);
  swap(a.personId, b.personId);
  swap(a.deviceId, b.deviceId);
  swap(a.verifyFeature, b.verifyFeature);
  swap(a.compareFace, b.compareFace);
  swap(a.verifyStatus, b.verifyStatus);
  swap(a.similarty, b.similarty);
  swap(a.direction, b.direction);
  swap(a.verifyTime, b.verifyTime);
  swap(a.createTime, b.createTime);
  swap(a.__isset, b.__isset);
}

LogBean::LogBean(const LogBean& other20) {
  _new = other20._new;
  modified = other20.modified;
  initialized = other20.initialized;
  id = other20.id;
  personId = other20.personId;
  deviceId = other20.deviceId;
  verifyFeature = other20.verifyFeature;
  compareFace = other20.compareFace;
  verifyStatus = other20.verifyStatus;
  similarty = other20.similarty;
  direction = other20.direction;
  verifyTime = other20.verifyTime;
  createTime = other20.createTime;
  __isset = other20.__isset;
}
LogBean::LogBean( LogBean&& other21) {
  _new = std::move(other21._new);
  modified = std::move(other21.modified);
  initialized = std::move(other21.initialized);
  id = std::move(other21.id);
  personId = std::move(other21.personId);
  deviceId = std::move(other21.deviceId);
  verifyFeature = std::move(other21.verifyFeature);
  compareFace = std::move(other21.compareFace);
  verifyStatus = std::move(other21.verifyStatus);
  similarty = std::move(other21.similarty);
  direction = std::move(other21.direction);
  verifyTime = std::move(other21.verifyTime);
  createTime = std::move(other21.createTime);
  __isset = std::move(other21.__isset);
}
LogBean& LogBean::operator=(const LogBean& other22) {
  _new = other22._new;
  modified = other22.modified;
  initialized = other22.initialized;
  id = other22.id;
  personId = other22.personId;
  deviceId = other22.deviceId;
  verifyFeature = other22.verifyFeature;
  compareFace = other22.compareFace;
  verifyStatus = other22.verifyStatus;
  similarty = other22.similarty;
  direction = other22.direction;
  verifyTime = other22.verifyTime;
  createTime = other22.createTime;
  __isset = other22.__isset;
  return *this;
}
LogBean& LogBean::operator=(LogBean&& other23) {
  _new = std::move(other23._new);
  modified = std::move(other23.modified);
  initialized = std::move(other23.initialized);
  id = std::move(other23.id);
  personId = std::move(other23.personId);
  deviceId = std::move(other23.deviceId);
  verifyFeature = std::move(other23.verifyFeature);
  compareFace = std::move(other23.compareFace);
  verifyStatus = std::move(other23.verifyStatus);
  similarty = std::move(other23.similarty);
  direction = std::move(other23.direction);
  verifyTime = std::move(other23.verifyTime);
  createTime = std::move(other23.createTime);
  __isset = std::move(other23.__isset);
  return *this;
}
void LogBean::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LogBean(";
  out << "_new=" << to_string(_new);
  out << ", " << "modified=" << to_string(modified);
  out << ", " << "initialized=" << to_string(initialized);
  out << ", " << "id="; (__isset.id ? (out << to_string(id)) : (out << "<null>"));
  out << ", " << "personId="; (__isset.personId ? (out << to_string(personId)) : (out << "<null>"));
  out << ", " << "deviceId="; (__isset.deviceId ? (out << to_string(deviceId)) : (out << "<null>"));
  out << ", " << "verifyFeature="; (__isset.verifyFeature ? (out << to_string(verifyFeature)) : (out << "<null>"));
  out << ", " << "compareFace="; (__isset.compareFace ? (out << to_string(compareFace)) : (out << "<null>"));
  out << ", " << "verifyStatus="; (__isset.verifyStatus ? (out << to_string(verifyStatus)) : (out << "<null>"));
  out << ", " << "similarty="; (__isset.similarty ? (out << to_string(similarty)) : (out << "<null>"));
  out << ", " << "direction="; (__isset.direction ? (out << to_string(direction)) : (out << "<null>"));
  out << ", " << "verifyTime="; (__isset.verifyTime ? (out << to_string(verifyTime)) : (out << "<null>"));
  out << ", " << "createTime="; (__isset.createTime ? (out << to_string(createTime)) : (out << "<null>"));
  out << ")";
}


DeviceBean::~DeviceBean() throw() {
}


void DeviceBean::__set__new(const bool val) {
  this->_new = val;
}

void DeviceBean::__set_modified(const int32_t val) {
  this->modified = val;
}

void DeviceBean::__set_initialized(const int32_t val) {
  this->initialized = val;
}

void DeviceBean::__set_id(const int32_t val) {
  this->id = val;
__isset.id = true;
}

void DeviceBean::__set_groupId(const int32_t val) {
  this->groupId = val;
__isset.groupId = true;
}

void DeviceBean::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void DeviceBean::__set_productName(const std::string& val) {
  this->productName = val;
__isset.productName = true;
}

void DeviceBean::__set_model(const std::string& val) {
  this->model = val;
__isset.model = true;
}

void DeviceBean::__set_vendor(const std::string& val) {
  this->vendor = val;
__isset.vendor = true;
}

void DeviceBean::__set_manufacturer(const std::string& val) {
  this->manufacturer = val;
__isset.manufacturer = true;
}

void DeviceBean::__set_madeDate(const int64_t val) {
  this->madeDate = val;
__isset.madeDate = true;
}

void DeviceBean::__set_version(const std::string& val) {
  this->version = val;
__isset.version = true;
}

void DeviceBean::__set_usedSdks(const std::string& val) {
  this->usedSdks = val;
__isset.usedSdks = true;
}

void DeviceBean::__set_serialNo(const std::string& val) {
  this->serialNo = val;
__isset.serialNo = true;
}

void DeviceBean::__set_mac(const std::string& val) {
  this->mac = val;
__isset.mac = true;
}

void DeviceBean::__set_direction(const int32_t val) {
  this->direction = val;
__isset.direction = true;
}

void DeviceBean::__set_remark(const std::string& val) {
  this->remark = val;
__isset.remark = true;
}

void DeviceBean::__set_extBin(const std::string& val) {
  this->extBin = val;
__isset.extBin = true;
}

void DeviceBean::__set_extTxt(const std::string& val) {
  this->extTxt = val;
__isset.extTxt = true;
}

void DeviceBean::__set_createTime(const int64_t val) {
  this->createTime = val;
__isset.createTime = true;
}

void DeviceBean::__set_updateTime(const int64_t val) {
  this->updateTime = val;
__isset.updateTime = true;
}
std::ostream& operator<<(std::ostream& out, const DeviceBean& obj)
{
  obj.printTo(out);
  return out;
}


void swap(DeviceBean &a, DeviceBean &b) {
  using ::std::swap;
  swap(a._new, b._new);
  swap(a.modified, b.modified);
  swap(a.initialized, b.initialized);
  swap(a.id, b.id);
  swap(a.groupId, b.groupId);
  swap(a.name, b.name);
  swap(a.productName, b.productName);
  swap(a.model, b.model);
  swap(a.vendor, b.vendor);
  swap(a.manufacturer, b.manufacturer);
  swap(a.madeDate, b.madeDate);
  swap(a.version, b.version);
  swap(a.usedSdks, b.usedSdks);
  swap(a.serialNo, b.serialNo);
  swap(a.mac, b.mac);
  swap(a.direction, b.direction);
  swap(a.remark, b.remark);
  swap(a.extBin, b.extBin);
  swap(a.extTxt, b.extTxt);
  swap(a.createTime, b.createTime);
  swap(a.updateTime, b.updateTime);
  swap(a.__isset, b.__isset);
}

DeviceBean::DeviceBean(const DeviceBean& other24) {
  _new = other24._new;
  modified = other24.modified;
  initialized = other24.initialized;
  id = other24.id;
  groupId = other24.groupId;
  name = other24.name;
  productName = other24.productName;
  model = other24.model;
  vendor = other24.vendor;
  manufacturer = other24.manufacturer;
  madeDate = other24.madeDate;
  version = other24.version;
  usedSdks = other24.usedSdks;
  serialNo = other24.serialNo;
  mac = other24.mac;
  direction = other24.direction;
  remark = other24.remark;
  extBin = other24.extBin;
  extTxt = other24.extTxt;
  createTime = other24.createTime;
  updateTime = other24.updateTime;
  __isset = other24.__isset;
}
DeviceBean::DeviceBean( DeviceBean&& other25) {
  _new = std::move(other25._new);
  modified = std::move(other25.modified);
  initialized = std::move(other25.initialized);
  id = std::move(other25.id);
  groupId = std::move(other25.groupId);
  name = std::move(other25.name);
  productName = std::move(other25.productName);
  model = std::move(other25.model);
  vendor = std::move(other25.vendor);
  manufacturer = std::move(other25.manufacturer);
  madeDate = std::move(other25.madeDate);
  version = std::move(other25.version);
  usedSdks = std::move(other25.usedSdks);
  serialNo = std::move(other25.serialNo);
  mac = std::move(other25.mac);
  direction = std::move(other25.direction);
  remark = std::move(other25.remark);
  extBin = std::move(other25.extBin);
  extTxt = std::move(other25.extTxt);
  createTime = std::move(other25.createTime);
  updateTime = std::move(other25.updateTime);
  __isset = std::move(other25.__isset);
}
DeviceBean& DeviceBean::operator=(const DeviceBean& other26) {
  _new = other26._new;
  modified = other26.modified;
  initialized = other26.initialized;
  id = other26.id;
  groupId = other26.groupId;
  name = other26.name;
  productName = other26.productName;
  model = other26.model;
  vendor = other26.vendor;
  manufacturer = other26.manufacturer;
  madeDate = other26.madeDate;
  version = other26.version;
  usedSdks = other26.usedSdks;
  serialNo = other26.serialNo;
  mac = other26.mac;
  direction = other26.direction;
  remark = other26.remark;
  extBin = other26.extBin;
  extTxt = other26.extTxt;
  createTime = other26.createTime;
  updateTime = other26.updateTime;
  __isset = other26.__isset;
  return *this;
}
DeviceBean& DeviceBean::operator=(DeviceBean&& other27) {
  _new = std::move(other27._new);
  modified = std::move(other27.modified);
  initialized = std::move(other27.initialized);
  id = std::move(other27.id);
  groupId = std::move(other27.groupId);
  name = std::move(other27.name);
  productName = std::move(other27.productName);
  model = std::move(other27.model);
  vendor = std::move(other27.vendor);
  manufacturer = std::move(other27.manufacturer);
  madeDate = std::move(other27.madeDate);
  version = std::move(other27.version);
  usedSdks = std::move(other27.usedSdks);
  serialNo = std::move(other27.serialNo);
  mac = std::move(other27.mac);
  direction = std::move(other27.direction);
  remark = std::move(other27.remark);
  extBin = std::move(other27.extBin);
  extTxt = std::move(other27.extTxt);
  createTime = std::move(other27.createTime);
  updateTime = std::move(other27.updateTime);
  __isset = std::move(other27.__isset);
  return *this;
}
void DeviceBean::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DeviceBean(";
  out << "_new=" << to_string(_new);
  out << ", " << "modified=" << to_string(modified);
  out << ", " << "initialized=" << to_string(initialized);
  out << ", " << "id="; (__isset.id ? (out << to_string(id)) : (out << "<null>"));
  out << ", " << "groupId="; (__isset.groupId ? (out << to_string(groupId)) : (out << "<null>"));
  out << ", " << "name="; (__isset.name ? (out << to_string(name)) : (out << "<null>"));
  out << ", " << "productName="; (__isset.productName ? (out << to_string(productName)) : (out << "<null>"));
  out << ", " << "model="; (__isset.model ? (out << to_string(model)) : (out << "<null>"));
  out << ", " << "vendor="; (__isset.vendor ? (out << to_string(vendor)) : (out << "<null>"));
  out << ", " << "manufacturer="; (__isset.manufacturer ? (out << to_string(manufacturer)) : (out << "<null>"));
  out << ", " << "madeDate="; (__isset.madeDate ? (out << to_string(madeDate)) : (out << "<null>"));
  out << ", " << "version="; (__isset.version ? (out << to_string(version)) : (out << "<null>"));
  out << ", " << "usedSdks="; (__isset.usedSdks ? (out << to_string(usedSdks)) : (out << "<null>"));
  out << ", " << "serialNo="; (__isset.serialNo ? (out << to_string(serialNo)) : (out << "<null>"));
  out << ", " << "mac="; (__isset.mac ? (out << to_string(mac)) : (out << "<null>"));
  out << ", " << "direction="; (__isset.direction ? (out << to_string(direction)) : (out << "<null>"));
  out << ", " << "remark="; (__isset.remark ? (out << to_string(remark)) : (out << "<null>"));
  out << ", " << "extBin="; (__isset.extBin ? (out << to_string(extBin)) : (out << "<null>"));
  out << ", " << "extTxt="; (__isset.extTxt ? (out << to_string(extTxt)) : (out << "<null>"));
  out << ", " << "createTime="; (__isset.createTime ? (out << to_string(createTime)) : (out << "<null>"));
  out << ", " << "updateTime="; (__isset.updateTime ? (out << to_string(updateTime)) : (out << "<null>"));
  out << ")";
}


DeviceGroupBean::~DeviceGroupBean() throw() {
}


void DeviceGroupBean::__set__new(const bool val) {
  this->_new = val;
}

void DeviceGroupBean::__set_modified(const int32_t val) {
  this->modified = val;
}

void DeviceGroupBean::__set_initialized(const int32_t val) {
  this->initialized = val;
}

void DeviceGroupBean::__set_id(const int32_t val) {
  this->id = val;
__isset.id = true;
}

void DeviceGroupBean::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void DeviceGroupBean::__set_leaf(const int32_t val) {
  this->leaf = val;
__isset.leaf = true;
}

void DeviceGroupBean::__set_parent(const int32_t val) {
  this->parent = val;
__isset.parent = true;
}

void DeviceGroupBean::__set_rootGroup(const int32_t val) {
  this->rootGroup = val;
__isset.rootGroup = true;
}

void DeviceGroupBean::__set_schedule(const std::string& val) {
  this->schedule = val;
__isset.schedule = true;
}

void DeviceGroupBean::__set_remark(const std::string& val) {
  this->remark = val;
__isset.remark = true;
}

void DeviceGroupBean::__set_extBin(const std::string& val) {
  this->extBin = val;
__isset.extBin = true;
}

void DeviceGroupBean::__set_extTxt(const std::string& val) {
  this->extTxt = val;
__isset.extTxt = true;
}

void DeviceGroupBean::__set_createTime(const int64_t val) {
  this->createTime = val;
__isset.createTime = true;
}

void DeviceGroupBean::__set_updateTime(const int64_t val) {
  this->updateTime = val;
__isset.updateTime = true;
}
std::ostream& operator<<(std::ostream& out, const DeviceGroupBean& obj)
{
  obj.printTo(out);
  return out;
}


void swap(DeviceGroupBean &a, DeviceGroupBean &b) {
  using ::std::swap;
  swap(a._new, b._new);
  swap(a.modified, b.modified);
  swap(a.initialized, b.initialized);
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.leaf, b.leaf);
  swap(a.parent, b.parent);
  swap(a.rootGroup, b.rootGroup);
  swap(a.schedule, b.schedule);
  swap(a.remark, b.remark);
  swap(a.extBin, b.extBin);
  swap(a.extTxt, b.extTxt);
  swap(a.createTime, b.createTime);
  swap(a.updateTime, b.updateTime);
  swap(a.__isset, b.__isset);
}

DeviceGroupBean::DeviceGroupBean(const DeviceGroupBean& other28) {
  _new = other28._new;
  modified = other28.modified;
  initialized = other28.initialized;
  id = other28.id;
  name = other28.name;
  leaf = other28.leaf;
  parent = other28.parent;
  rootGroup = other28.rootGroup;
  schedule = other28.schedule;
  remark = other28.remark;
  extBin = other28.extBin;
  extTxt = other28.extTxt;
  createTime = other28.createTime;
  updateTime = other28.updateTime;
  __isset = other28.__isset;
}
DeviceGroupBean::DeviceGroupBean( DeviceGroupBean&& other29) {
  _new = std::move(other29._new);
  modified = std::move(other29.modified);
  initialized = std::move(other29.initialized);
  id = std::move(other29.id);
  name = std::move(other29.name);
  leaf = std::move(other29.leaf);
  parent = std::move(other29.parent);
  rootGroup = std::move(other29.rootGroup);
  schedule = std::move(other29.schedule);
  remark = std::move(other29.remark);
  extBin = std::move(other29.extBin);
  extTxt = std::move(other29.extTxt);
  createTime = std::move(other29.createTime);
  updateTime = std::move(other29.updateTime);
  __isset = std::move(other29.__isset);
}
DeviceGroupBean& DeviceGroupBean::operator=(const DeviceGroupBean& other30) {
  _new = other30._new;
  modified = other30.modified;
  initialized = other30.initialized;
  id = other30.id;
  name = other30.name;
  leaf = other30.leaf;
  parent = other30.parent;
  rootGroup = other30.rootGroup;
  schedule = other30.schedule;
  remark = other30.remark;
  extBin = other30.extBin;
  extTxt = other30.extTxt;
  createTime = other30.createTime;
  updateTime = other30.updateTime;
  __isset = other30.__isset;
  return *this;
}
DeviceGroupBean& DeviceGroupBean::operator=(DeviceGroupBean&& other31) {
  _new = std::move(other31._new);
  modified = std::move(other31.modified);
  initialized = std::move(other31.initialized);
  id = std::move(other31.id);
  name = std::move(other31.name);
  leaf = std::move(other31.leaf);
  parent = std::move(other31.parent);
  rootGroup = std::move(other31.rootGroup);
  schedule = std::move(other31.schedule);
  remark = std::move(other31.remark);
  extBin = std::move(other31.extBin);
  extTxt = std::move(other31.extTxt);
  createTime = std::move(other31.createTime);
  updateTime = std::move(other31.updateTime);
  __isset = std::move(other31.__isset);
  return *this;
}
void DeviceGroupBean::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DeviceGroupBean(";
  out << "_new=" << to_string(_new);
  out << ", " << "modified=" << to_string(modified);
  out << ", " << "initialized=" << to_string(initialized);
  out << ", " << "id="; (__isset.id ? (out << to_string(id)) : (out << "<null>"));
  out << ", " << "name="; (__isset.name ? (out << to_string(name)) : (out << "<null>"));
  out << ", " << "leaf="; (__isset.leaf ? (out << to_string(leaf)) : (out << "<null>"));
  out << ", " << "parent="; (__isset.parent ? (out << to_string(parent)) : (out << "<null>"));
  out << ", " << "rootGroup="; (__isset.rootGroup ? (out << to_string(rootGroup)) : (out << "<null>"));
  out << ", " << "schedule="; (__isset.schedule ? (out << to_string(schedule)) : (out << "<null>"));
  out << ", " << "remark="; (__isset.remark ? (out << to_string(remark)) : (out << "<null>"));
  out << ", " << "extBin="; (__isset.extBin ? (out << to_string(extBin)) : (out << "<null>"));
  out << ", " << "extTxt="; (__isset.extTxt ? (out << to_string(extTxt)) : (out << "<null>"));
  out << ", " << "createTime="; (__isset.createTime ? (out << to_string(createTime)) : (out << "<null>"));
  out << ", " << "updateTime="; (__isset.updateTime ? (out << to_string(updateTime)) : (out << "<null>"));
  out << ")";
}


PermitBean::~PermitBean() throw() {
}


void PermitBean::__set__new(const bool val) {
  this->_new = val;
}

void PermitBean::__set_modified(const int32_t val) {
  this->modified = val;
}

void PermitBean::__set_initialized(const int32_t val) {
  this->initialized = val;
}

void PermitBean::__set_deviceGroupId(const int32_t val) {
  this->deviceGroupId = val;
__isset.deviceGroupId = true;
}

void PermitBean::__set_personGroupId(const int32_t val) {
  this->personGroupId = val;
__isset.personGroupId = true;
}

void PermitBean::__set_schedule(const std::string& val) {
  this->schedule = val;
__isset.schedule = true;
}

void PermitBean::__set_passLimit(const std::string& val) {
  this->passLimit = val;
__isset.passLimit = true;
}

void PermitBean::__set_remark(const std::string& val) {
  this->remark = val;
__isset.remark = true;
}

void PermitBean::__set_extBin(const std::string& val) {
  this->extBin = val;
__isset.extBin = true;
}

void PermitBean::__set_extTxt(const std::string& val) {
  this->extTxt = val;
__isset.extTxt = true;
}

void PermitBean::__set_createTime(const int64_t val) {
  this->createTime = val;
__isset.createTime = true;
}
std::ostream& operator<<(std::ostream& out, const PermitBean& obj)
{
  obj.printTo(out);
  return out;
}


void swap(PermitBean &a, PermitBean &b) {
  using ::std::swap;
  swap(a._new, b._new);
  swap(a.modified, b.modified);
  swap(a.initialized, b.initialized);
  swap(a.deviceGroupId, b.deviceGroupId);
  swap(a.personGroupId, b.personGroupId);
  swap(a.schedule, b.schedule);
  swap(a.passLimit, b.passLimit);
  swap(a.remark, b.remark);
  swap(a.extBin, b.extBin);
  swap(a.extTxt, b.extTxt);
  swap(a.createTime, b.createTime);
  swap(a.__isset, b.__isset);
}

PermitBean::PermitBean(const PermitBean& other32) {
  _new = other32._new;
  modified = other32.modified;
  initialized = other32.initialized;
  deviceGroupId = other32.deviceGroupId;
  personGroupId = other32.personGroupId;
  schedule = other32.schedule;
  passLimit = other32.passLimit;
  remark = other32.remark;
  extBin = other32.extBin;
  extTxt = other32.extTxt;
  createTime = other32.createTime;
  __isset = other32.__isset;
}
PermitBean::PermitBean( PermitBean&& other33) {
  _new = std::move(other33._new);
  modified = std::move(other33.modified);
  initialized = std::move(other33.initialized);
  deviceGroupId = std::move(other33.deviceGroupId);
  personGroupId = std::move(other33.personGroupId);
  schedule = std::move(other33.schedule);
  passLimit = std::move(other33.passLimit);
  remark = std::move(other33.remark);
  extBin = std::move(other33.extBin);
  extTxt = std::move(other33.extTxt);
  createTime = std::move(other33.createTime);
  __isset = std::move(other33.__isset);
}
PermitBean& PermitBean::operator=(const PermitBean& other34) {
  _new = other34._new;
  modified = other34.modified;
  initialized = other34.initialized;
  deviceGroupId = other34.deviceGroupId;
  personGroupId = other34.personGroupId;
  schedule = other34.schedule;
  passLimit = other34.passLimit;
  remark = other34.remark;
  extBin = other34.extBin;
  extTxt = other34.extTxt;
  createTime = other34.createTime;
  __isset = other34.__isset;
  return *this;
}
PermitBean& PermitBean::operator=(PermitBean&& other35) {
  _new = std::move(other35._new);
  modified = std::move(other35.modified);
  initialized = std::move(other35.initialized);
  deviceGroupId = std::move(other35.deviceGroupId);
  personGroupId = std::move(other35.personGroupId);
  schedule = std::move(other35.schedule);
  passLimit = std::move(other35.passLimit);
  remark = std::move(other35.remark);
  extBin = std::move(other35.extBin);
  extTxt = std::move(other35.extTxt);
  createTime = std::move(other35.createTime);
  __isset = std::move(other35.__isset);
  return *this;
}
void PermitBean::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PermitBean(";
  out << "_new=" << to_string(_new);
  out << ", " << "modified=" << to_string(modified);
  out << ", " << "initialized=" << to_string(initialized);
  out << ", " << "deviceGroupId="; (__isset.deviceGroupId ? (out << to_string(deviceGroupId)) : (out << "<null>"));
  out << ", " << "personGroupId="; (__isset.personGroupId ? (out << to_string(personGroupId)) : (out << "<null>"));
  out << ", " << "schedule="; (__isset.schedule ? (out << to_string(schedule)) : (out << "<null>"));
  out << ", " << "passLimit="; (__isset.passLimit ? (out << to_string(passLimit)) : (out << "<null>"));
  out << ", " << "remark="; (__isset.remark ? (out << to_string(remark)) : (out << "<null>"));
  out << ", " << "extBin="; (__isset.extBin ? (out << to_string(extBin)) : (out << "<null>"));
  out << ", " << "extTxt="; (__isset.extTxt ? (out << to_string(extTxt)) : (out << "<null>"));
  out << ", " << "createTime="; (__isset.createTime ? (out << to_string(createTime)) : (out << "<null>"));
  out << ")";
}


PersonBean::~PersonBean() throw() {
}


void PersonBean::__set__new(const bool val) {
  this->_new = val;
}

void PersonBean::__set_modified(const int32_t val) {
  this->modified = val;
}

void PersonBean::__set_initialized(const int32_t val) {
  this->initialized = val;
}

void PersonBean::__set_id(const int32_t val) {
  this->id = val;
__isset.id = true;
}

void PersonBean::__set_groupId(const int32_t val) {
  this->groupId = val;
__isset.groupId = true;
}

void PersonBean::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void PersonBean::__set_sex(const int32_t val) {
  this->sex = val;
__isset.sex = true;
}

void PersonBean::__set_rank(const int32_t val) {
  this->rank = val;
__isset.rank = true;
}

void PersonBean::__set_password(const std::string& val) {
  this->password = val;
__isset.password = true;
}

void PersonBean::__set_birthdate(const int64_t val) {
  this->birthdate = val;
__isset.birthdate = true;
}

void PersonBean::__set_mobilePhone(const std::string& val) {
  this->mobilePhone = val;
__isset.mobilePhone = true;
}

void PersonBean::__set_papersType(const int32_t val) {
  this->papersType = val;
__isset.papersType = true;
}

void PersonBean::__set_papersNum(const std::string& val) {
  this->papersNum = val;
__isset.papersNum = true;
}

void PersonBean::__set_imageMd5(const std::string& val) {
  this->imageMd5 = val;
__isset.imageMd5 = true;
}

void PersonBean::__set_expiryDate(const int64_t val) {
  this->expiryDate = val;
__isset.expiryDate = true;
}

void PersonBean::__set_activatedDate(const int64_t val) {
  this->activatedDate = val;
__isset.activatedDate = true;
}

void PersonBean::__set_remark(const std::string& val) {
  this->remark = val;
__isset.remark = true;
}

void PersonBean::__set_extBin(const std::string& val) {
  this->extBin = val;
__isset.extBin = true;
}

void PersonBean::__set_extTxt(const std::string& val) {
  this->extTxt = val;
__isset.extTxt = true;
}

void PersonBean::__set_createTime(const int64_t val) {
  this->createTime = val;
__isset.createTime = true;
}

void PersonBean::__set_updateTime(const int64_t val) {
  this->updateTime = val;
__isset.updateTime = true;
}
std::ostream& operator<<(std::ostream& out, const PersonBean& obj)
{
  obj.printTo(out);
  return out;
}


void swap(PersonBean &a, PersonBean &b) {
  using ::std::swap;
  swap(a._new, b._new);
  swap(a.modified, b.modified);
  swap(a.initialized, b.initialized);
  swap(a.id, b.id);
  swap(a.groupId, b.groupId);
  swap(a.name, b.name);
  swap(a.sex, b.sex);
  swap(a.rank, b.rank);
  swap(a.password, b.password);
  swap(a.birthdate, b.birthdate);
  swap(a.mobilePhone, b.mobilePhone);
  swap(a.papersType, b.papersType);
  swap(a.papersNum, b.papersNum);
  swap(a.imageMd5, b.imageMd5);
  swap(a.expiryDate, b.expiryDate);
  swap(a.activatedDate, b.activatedDate);
  swap(a.remark, b.remark);
  swap(a.extBin, b.extBin);
  swap(a.extTxt, b.extTxt);
  swap(a.createTime, b.createTime);
  swap(a.updateTime, b.updateTime);
  swap(a.__isset, b.__isset);
}

PersonBean::PersonBean(const PersonBean& other36) {
  _new = other36._new;
  modified = other36.modified;
  initialized = other36.initialized;
  id = other36.id;
  groupId = other36.groupId;
  name = other36.name;
  sex = other36.sex;
  rank = other36.rank;
  password = other36.password;
  birthdate = other36.birthdate;
  mobilePhone = other36.mobilePhone;
  papersType = other36.papersType;
  papersNum = other36.papersNum;
  imageMd5 = other36.imageMd5;
  expiryDate = other36.expiryDate;
  activatedDate = other36.activatedDate;
  remark = other36.remark;
  extBin = other36.extBin;
  extTxt = other36.extTxt;
  createTime = other36.createTime;
  updateTime = other36.updateTime;
  __isset = other36.__isset;
}
PersonBean::PersonBean( PersonBean&& other37) {
  _new = std::move(other37._new);
  modified = std::move(other37.modified);
  initialized = std::move(other37.initialized);
  id = std::move(other37.id);
  groupId = std::move(other37.groupId);
  name = std::move(other37.name);
  sex = std::move(other37.sex);
  rank = std::move(other37.rank);
  password = std::move(other37.password);
  birthdate = std::move(other37.birthdate);
  mobilePhone = std::move(other37.mobilePhone);
  papersType = std::move(other37.papersType);
  papersNum = std::move(other37.papersNum);
  imageMd5 = std::move(other37.imageMd5);
  expiryDate = std::move(other37.expiryDate);
  activatedDate = std::move(other37.activatedDate);
  remark = std::move(other37.remark);
  extBin = std::move(other37.extBin);
  extTxt = std::move(other37.extTxt);
  createTime = std::move(other37.createTime);
  updateTime = std::move(other37.updateTime);
  __isset = std::move(other37.__isset);
}
PersonBean& PersonBean::operator=(const PersonBean& other38) {
  _new = other38._new;
  modified = other38.modified;
  initialized = other38.initialized;
  id = other38.id;
  groupId = other38.groupId;
  name = other38.name;
  sex = other38.sex;
  rank = other38.rank;
  password = other38.password;
  birthdate = other38.birthdate;
  mobilePhone = other38.mobilePhone;
  papersType = other38.papersType;
  papersNum = other38.papersNum;
  imageMd5 = other38.imageMd5;
  expiryDate = other38.expiryDate;
  activatedDate = other38.activatedDate;
  remark = other38.remark;
  extBin = other38.extBin;
  extTxt = other38.extTxt;
  createTime = other38.createTime;
  updateTime = other38.updateTime;
  __isset = other38.__isset;
  return *this;
}
PersonBean& PersonBean::operator=(PersonBean&& other39) {
  _new = std::move(other39._new);
  modified = std::move(other39.modified);
  initialized = std::move(other39.initialized);
  id = std::move(other39.id);
  groupId = std::move(other39.groupId);
  name = std::move(other39.name);
  sex = std::move(other39.sex);
  rank = std::move(other39.rank);
  password = std::move(other39.password);
  birthdate = std::move(other39.birthdate);
  mobilePhone = std::move(other39.mobilePhone);
  papersType = std::move(other39.papersType);
  papersNum = std::move(other39.papersNum);
  imageMd5 = std::move(other39.imageMd5);
  expiryDate = std::move(other39.expiryDate);
  activatedDate = std::move(other39.activatedDate);
  remark = std::move(other39.remark);
  extBin = std::move(other39.extBin);
  extTxt = std::move(other39.extTxt);
  createTime = std::move(other39.createTime);
  updateTime = std::move(other39.updateTime);
  __isset = std::move(other39.__isset);
  return *this;
}
void PersonBean::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PersonBean(";
  out << "_new=" << to_string(_new);
  out << ", " << "modified=" << to_string(modified);
  out << ", " << "initialized=" << to_string(initialized);
  out << ", " << "id="; (__isset.id ? (out << to_string(id)) : (out << "<null>"));
  out << ", " << "groupId="; (__isset.groupId ? (out << to_string(groupId)) : (out << "<null>"));
  out << ", " << "name="; (__isset.name ? (out << to_string(name)) : (out << "<null>"));
  out << ", " << "sex="; (__isset.sex ? (out << to_string(sex)) : (out << "<null>"));
  out << ", " << "rank="; (__isset.rank ? (out << to_string(rank)) : (out << "<null>"));
  out << ", " << "password="; (__isset.password ? (out << to_string(password)) : (out << "<null>"));
  out << ", " << "birthdate="; (__isset.birthdate ? (out << to_string(birthdate)) : (out << "<null>"));
  out << ", " << "mobilePhone="; (__isset.mobilePhone ? (out << to_string(mobilePhone)) : (out << "<null>"));
  out << ", " << "papersType="; (__isset.papersType ? (out << to_string(papersType)) : (out << "<null>"));
  out << ", " << "papersNum="; (__isset.papersNum ? (out << to_string(papersNum)) : (out << "<null>"));
  out << ", " << "imageMd5="; (__isset.imageMd5 ? (out << to_string(imageMd5)) : (out << "<null>"));
  out << ", " << "expiryDate="; (__isset.expiryDate ? (out << to_string(expiryDate)) : (out << "<null>"));
  out << ", " << "activatedDate="; (__isset.activatedDate ? (out << to_string(activatedDate)) : (out << "<null>"));
  out << ", " << "remark="; (__isset.remark ? (out << to_string(remark)) : (out << "<null>"));
  out << ", " << "extBin="; (__isset.extBin ? (out << to_string(extBin)) : (out << "<null>"));
  out << ", " << "extTxt="; (__isset.extTxt ? (out << to_string(extTxt)) : (out << "<null>"));
  out << ", " << "createTime="; (__isset.createTime ? (out << to_string(createTime)) : (out << "<null>"));
  out << ", " << "updateTime="; (__isset.updateTime ? (out << to_string(updateTime)) : (out << "<null>"));
  out << ")";
}


PersonGroupBean::~PersonGroupBean() throw() {
}


void PersonGroupBean::__set__new(const bool val) {
  this->_new = val;
}

void PersonGroupBean::__set_modified(const int32_t val) {
  this->modified = val;
}

void PersonGroupBean::__set_initialized(const int32_t val) {
  this->initialized = val;
}

void PersonGroupBean::__set_id(const int32_t val) {
  this->id = val;
__isset.id = true;
}

void PersonGroupBean::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void PersonGroupBean::__set_leaf(const int32_t val) {
  this->leaf = val;
__isset.leaf = true;
}

void PersonGroupBean::__set_parent(const int32_t val) {
  this->parent = val;
__isset.parent = true;
}

void PersonGroupBean::__set_rootGroup(const int32_t val) {
  this->rootGroup = val;
__isset.rootGroup = true;
}

void PersonGroupBean::__set_remark(const std::string& val) {
  this->remark = val;
__isset.remark = true;
}

void PersonGroupBean::__set_extBin(const std::string& val) {
  this->extBin = val;
__isset.extBin = true;
}

void PersonGroupBean::__set_extTxt(const std::string& val) {
  this->extTxt = val;
__isset.extTxt = true;
}

void PersonGroupBean::__set_createTime(const int64_t val) {
  this->createTime = val;
__isset.createTime = true;
}

void PersonGroupBean::__set_updateTime(const int64_t val) {
  this->updateTime = val;
__isset.updateTime = true;
}
std::ostream& operator<<(std::ostream& out, const PersonGroupBean& obj)
{
  obj.printTo(out);
  return out;
}


void swap(PersonGroupBean &a, PersonGroupBean &b) {
  using ::std::swap;
  swap(a._new, b._new);
  swap(a.modified, b.modified);
  swap(a.initialized, b.initialized);
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.leaf, b.leaf);
  swap(a.parent, b.parent);
  swap(a.rootGroup, b.rootGroup);
  swap(a.remark, b.remark);
  swap(a.extBin, b.extBin);
  swap(a.extTxt, b.extTxt);
  swap(a.createTime, b.createTime);
  swap(a.updateTime, b.updateTime);
  swap(a.__isset, b.__isset);
}

PersonGroupBean::PersonGroupBean(const PersonGroupBean& other40) {
  _new = other40._new;
  modified = other40.modified;
  initialized = other40.initialized;
  id = other40.id;
  name = other40.name;
  leaf = other40.leaf;
  parent = other40.parent;
  rootGroup = other40.rootGroup;
  remark = other40.remark;
  extBin = other40.extBin;
  extTxt = other40.extTxt;
  createTime = other40.createTime;
  updateTime = other40.updateTime;
  __isset = other40.__isset;
}
PersonGroupBean::PersonGroupBean( PersonGroupBean&& other41) {
  _new = std::move(other41._new);
  modified = std::move(other41.modified);
  initialized = std::move(other41.initialized);
  id = std::move(other41.id);
  name = std::move(other41.name);
  leaf = std::move(other41.leaf);
  parent = std::move(other41.parent);
  rootGroup = std::move(other41.rootGroup);
  remark = std::move(other41.remark);
  extBin = std::move(other41.extBin);
  extTxt = std::move(other41.extTxt);
  createTime = std::move(other41.createTime);
  updateTime = std::move(other41.updateTime);
  __isset = std::move(other41.__isset);
}
PersonGroupBean& PersonGroupBean::operator=(const PersonGroupBean& other42) {
  _new = other42._new;
  modified = other42.modified;
  initialized = other42.initialized;
  id = other42.id;
  name = other42.name;
  leaf = other42.leaf;
  parent = other42.parent;
  rootGroup = other42.rootGroup;
  remark = other42.remark;
  extBin = other42.extBin;
  extTxt = other42.extTxt;
  createTime = other42.createTime;
  updateTime = other42.updateTime;
  __isset = other42.__isset;
  return *this;
}
PersonGroupBean& PersonGroupBean::operator=(PersonGroupBean&& other43) {
  _new = std::move(other43._new);
  modified = std::move(other43.modified);
  initialized = std::move(other43.initialized);
  id = std::move(other43.id);
  name = std::move(other43.name);
  leaf = std::move(other43.leaf);
  parent = std::move(other43.parent);
  rootGroup = std::move(other43.rootGroup);
  remark = std::move(other43.remark);
  extBin = std::move(other43.extBin);
  extTxt = std::move(other43.extTxt);
  createTime = std::move(other43.createTime);
  updateTime = std::move(other43.updateTime);
  __isset = std::move(other43.__isset);
  return *this;
}
void PersonGroupBean::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PersonGroupBean(";
  out << "_new=" << to_string(_new);
  out << ", " << "modified=" << to_string(modified);
  out << ", " << "initialized=" << to_string(initialized);
  out << ", " << "id="; (__isset.id ? (out << to_string(id)) : (out << "<null>"));
  out << ", " << "name="; (__isset.name ? (out << to_string(name)) : (out << "<null>"));
  out << ", " << "leaf="; (__isset.leaf ? (out << to_string(leaf)) : (out << "<null>"));
  out << ", " << "parent="; (__isset.parent ? (out << to_string(parent)) : (out << "<null>"));
  out << ", " << "rootGroup="; (__isset.rootGroup ? (out << to_string(rootGroup)) : (out << "<null>"));
  out << ", " << "remark="; (__isset.remark ? (out << to_string(remark)) : (out << "<null>"));
  out << ", " << "extBin="; (__isset.extBin ? (out << to_string(extBin)) : (out << "<null>"));
  out << ", " << "extTxt="; (__isset.extTxt ? (out << to_string(extTxt)) : (out << "<null>"));
  out << ", " << "createTime="; (__isset.createTime ? (out << to_string(createTime)) : (out << "<null>"));
  out << ", " << "updateTime="; (__isset.updateTime ? (out << to_string(updateTime)) : (out << "<null>"));
  out << ")";
}


LogLightBean::~LogLightBean() throw() {
}


void LogLightBean::__set__new(const bool val) {
  this->_new = val;
}

void LogLightBean::__set_modified(const int32_t val) {
  this->modified = val;
}

void LogLightBean::__set_initialized(const int32_t val) {
  this->initialized = val;
}

void LogLightBean::__set_id(const int32_t val) {
  this->id = val;
__isset.id = true;
}

void LogLightBean::__set_personId(const int32_t val) {
  this->personId = val;
__isset.personId = true;
}

void LogLightBean::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void LogLightBean::__set_papersType(const int32_t val) {
  this->papersType = val;
__isset.papersType = true;
}

void LogLightBean::__set_papersNum(const std::string& val) {
  this->papersNum = val;
__isset.papersNum = true;
}

void LogLightBean::__set_verifyTime(const int64_t val) {
  this->verifyTime = val;
__isset.verifyTime = true;
}

void LogLightBean::__set_direction(const int32_t val) {
  this->direction = val;
__isset.direction = true;
}
std::ostream& operator<<(std::ostream& out, const LogLightBean& obj)
{
  obj.printTo(out);
  return out;
}


void swap(LogLightBean &a, LogLightBean &b) {
  using ::std::swap;
  swap(a._new, b._new);
  swap(a.modified, b.modified);
  swap(a.initialized, b.initialized);
  swap(a.id, b.id);
  swap(a.personId, b.personId);
  swap(a.name, b.name);
  swap(a.papersType, b.papersType);
  swap(a.papersNum, b.papersNum);
  swap(a.verifyTime, b.verifyTime);
  swap(a.direction, b.direction);
  swap(a.__isset, b.__isset);
}

LogLightBean::LogLightBean(const LogLightBean& other44) {
  _new = other44._new;
  modified = other44.modified;
  initialized = other44.initialized;
  id = other44.id;
  personId = other44.personId;
  name = other44.name;
  papersType = other44.papersType;
  papersNum = other44.papersNum;
  verifyTime = other44.verifyTime;
  direction = other44.direction;
  __isset = other44.__isset;
}
LogLightBean::LogLightBean( LogLightBean&& other45) {
  _new = std::move(other45._new);
  modified = std::move(other45.modified);
  initialized = std::move(other45.initialized);
  id = std::move(other45.id);
  personId = std::move(other45.personId);
  name = std::move(other45.name);
  papersType = std::move(other45.papersType);
  papersNum = std::move(other45.papersNum);
  verifyTime = std::move(other45.verifyTime);
  direction = std::move(other45.direction);
  __isset = std::move(other45.__isset);
}
LogLightBean& LogLightBean::operator=(const LogLightBean& other46) {
  _new = other46._new;
  modified = other46.modified;
  initialized = other46.initialized;
  id = other46.id;
  personId = other46.personId;
  name = other46.name;
  papersType = other46.papersType;
  papersNum = other46.papersNum;
  verifyTime = other46.verifyTime;
  direction = other46.direction;
  __isset = other46.__isset;
  return *this;
}
LogLightBean& LogLightBean::operator=(LogLightBean&& other47) {
  _new = std::move(other47._new);
  modified = std::move(other47.modified);
  initialized = std::move(other47.initialized);
  id = std::move(other47.id);
  personId = std::move(other47.personId);
  name = std::move(other47.name);
  papersType = std::move(other47.papersType);
  papersNum = std::move(other47.papersNum);
  verifyTime = std::move(other47.verifyTime);
  direction = std::move(other47.direction);
  __isset = std::move(other47.__isset);
  return *this;
}
void LogLightBean::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LogLightBean(";
  out << "_new=" << to_string(_new);
  out << ", " << "modified=" << to_string(modified);
  out << ", " << "initialized=" << to_string(initialized);
  out << ", " << "id="; (__isset.id ? (out << to_string(id)) : (out << "<null>"));
  out << ", " << "personId="; (__isset.personId ? (out << to_string(personId)) : (out << "<null>"));
  out << ", " << "name="; (__isset.name ? (out << to_string(name)) : (out << "<null>"));
  out << ", " << "papersType="; (__isset.papersType ? (out << to_string(papersType)) : (out << "<null>"));
  out << ", " << "papersNum="; (__isset.papersNum ? (out << to_string(papersNum)) : (out << "<null>"));
  out << ", " << "verifyTime="; (__isset.verifyTime ? (out << to_string(verifyTime)) : (out << "<null>"));
  out << ", " << "direction="; (__isset.direction ? (out << to_string(direction)) : (out << "<null>"));
  out << ")";
}


Token::~Token() throw() {
}


void Token::__set_id(const int32_t val) {
  this->id = val;
}

void Token::__set_t1(const int32_t val) {
  this->t1 = val;
}

void Token::__set_t2(const int32_t val) {
  this->t2 = val;
}

void Token::__set_t3(const int32_t val) {
  this->t3 = val;
}

void Token::__set_t4(const int32_t val) {
  this->t4 = val;
}

void Token::__set_type(const TokenType::type val) {
  this->type = val;
__isset.type = true;
}
std::ostream& operator<<(std::ostream& out, const Token& obj)
{
  obj.printTo(out);
  return out;
}


void swap(Token &a, Token &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.t1, b.t1);
  swap(a.t2, b.t2);
  swap(a.t3, b.t3);
  swap(a.t4, b.t4);
  swap(a.type, b.type);
  swap(a.__isset, b.__isset);
}

Token::Token(const Token& other49) {
  id = other49.id;
  t1 = other49.t1;
  t2 = other49.t2;
  t3 = other49.t3;
  t4 = other49.t4;
  type = other49.type;
  __isset = other49.__isset;
}
Token::Token( Token&& other50) {
  id = std::move(other50.id);
  t1 = std::move(other50.t1);
  t2 = std::move(other50.t2);
  t3 = std::move(other50.t3);
  t4 = std::move(other50.t4);
  type = std::move(other50.type);
  __isset = std::move(other50.__isset);
}
Token& Token::operator=(const Token& other51) {
  id = other51.id;
  t1 = other51.t1;
  t2 = other51.t2;
  t3 = other51.t3;
  t4 = other51.t4;
  type = other51.type;
  __isset = other51.__isset;
  return *this;
}
Token& Token::operator=(Token&& other52) {
  id = std::move(other52.id);
  t1 = std::move(other52.t1);
  t2 = std::move(other52.t2);
  t3 = std::move(other52.t3);
  t4 = std::move(other52.t4);
  type = std::move(other52.type);
  __isset = std::move(other52.__isset);
  return *this;
}
void Token::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Token(";
  out << "id=" << to_string(id);
  out << ", " << "t1=" << to_string(t1);
  out << ", " << "t2=" << to_string(t2);
  out << ", " << "t3=" << to_string(t3);
  out << ", " << "t4=" << to_string(t4);
  out << ", " << "type="; (__isset.type ? (out << to_string(type)) : (out << "<null>"));
  out << ")";
}


ServiceSecurityException::~ServiceSecurityException() throw() {
}


void ServiceSecurityException::__set_message(const std::string& val) {
  this->message = val;
__isset.message = true;
}

void ServiceSecurityException::__set_causeClass(const std::string& val) {
  this->causeClass = val;
__isset.causeClass = true;
}

void ServiceSecurityException::__set_serviceStackTraceMessage(const std::string& val) {
  this->serviceStackTraceMessage = val;
__isset.serviceStackTraceMessage = true;
}

void ServiceSecurityException::__set_causeFields(const std::string& val) {
  this->causeFields = val;
__isset.causeFields = true;
}

void ServiceSecurityException::__set_deviceID(const int32_t val) {
  this->deviceID = val;
__isset.deviceID = true;
}

void ServiceSecurityException::__set_type(const SecurityExceptionType::type val) {
  this->type = val;
__isset.type = true;
}
std::ostream& operator<<(std::ostream& out, const ServiceSecurityException& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ServiceSecurityException &a, ServiceSecurityException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.causeClass, b.causeClass);
  swap(a.serviceStackTraceMessage, b.serviceStackTraceMessage);
  swap(a.causeFields, b.causeFields);
  swap(a.deviceID, b.deviceID);
  swap(a.type, b.type);
  swap(a.__isset, b.__isset);
}

ServiceSecurityException::ServiceSecurityException(const ServiceSecurityException& other54) : TException() {
  message = other54.message;
  causeClass = other54.causeClass;
  serviceStackTraceMessage = other54.serviceStackTraceMessage;
  causeFields = other54.causeFields;
  deviceID = other54.deviceID;
  type = other54.type;
  __isset = other54.__isset;
}
ServiceSecurityException::ServiceSecurityException( ServiceSecurityException&& other55) : TException() {
  message = std::move(other55.message);
  causeClass = std::move(other55.causeClass);
  serviceStackTraceMessage = std::move(other55.serviceStackTraceMessage);
  causeFields = std::move(other55.causeFields);
  deviceID = std::move(other55.deviceID);
  type = std::move(other55.type);
  __isset = std::move(other55.__isset);
}
ServiceSecurityException& ServiceSecurityException::operator=(const ServiceSecurityException& other56) {
  message = other56.message;
  causeClass = other56.causeClass;
  serviceStackTraceMessage = other56.serviceStackTraceMessage;
  causeFields = other56.causeFields;
  deviceID = other56.deviceID;
  type = other56.type;
  __isset = other56.__isset;
  return *this;
}
ServiceSecurityException& ServiceSecurityException::operator=(ServiceSecurityException&& other57) {
  message = std::move(other57.message);
  causeClass = std::move(other57.causeClass);
  serviceStackTraceMessage = std::move(other57.serviceStackTraceMessage);
  causeFields = std::move(other57.causeFields);
  deviceID = std::move(other57.deviceID);
  type = std::move(other57.type);
  __isset = std::move(other57.__isset);
  return *this;
}
void ServiceSecurityException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ServiceSecurityException(";
  out << "message="; (__isset.message ? (out << to_string(message)) : (out << "<null>"));
  out << ", " << "causeClass="; (__isset.causeClass ? (out << to_string(causeClass)) : (out << "<null>"));
  out << ", " << "serviceStackTraceMessage="; (__isset.serviceStackTraceMessage ? (out << to_string(serviceStackTraceMessage)) : (out << "<null>"));
  out << ", " << "causeFields="; (__isset.causeFields ? (out << to_string(causeFields)) : (out << "<null>"));
  out << ", " << "deviceID="; (__isset.deviceID ? (out << to_string(deviceID)) : (out << "<null>"));
  out << ", " << "type="; (__isset.type ? (out << to_string(type)) : (out << "<null>"));
  out << ")";
}

const char* ServiceSecurityException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: ServiceSecurityException";
  }
}

} // namespace
